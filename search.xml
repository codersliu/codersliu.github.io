<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>牛客题解-NC37合并区间</title>
    <url>/posts/7551feb3.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给出一组区间，请合并所有重叠的区间。</p>
<p>请保证合并后的区间按区间起点升序排列。</p>
<p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[[<span class="number">10</span>,<span class="number">30</span>],[<span class="number">20</span>,<span class="number">60</span>],[<span class="number">80</span>,<span class="number">100</span>],[<span class="number">150</span>,<span class="number">180</span>]]</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[[<span class="number">10</span>,<span class="number">60</span>],[<span class="number">80</span>,<span class="number">100</span>],[<span class="number">150</span>,<span class="number">180</span>]]</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>利用<code>Collections.sort()</code>方法对每一个区间的左区间进行排序，然后从第一个序列进行遍历，当后一个区间的右区间，小于或者等于后一个区间的左区间时，然后继续遍历下一个区间的左区间，并与下下个区间的右区间继续比较……直到后一个左区间大于后一个的右区间时，合并前面的多个区间，并寻找下一个合并区间，直到结束。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for an interval.</span></span><br><span class="line"><span class="comment"> * public class Interval &#123;</span></span><br><span class="line"><span class="comment"> *     int start;</span></span><br><span class="line"><span class="comment"> *     int end;</span></span><br><span class="line"><span class="comment"> *     Interval() &#123; start = 0; end = 0; &#125;</span></span><br><span class="line"><span class="comment"> *     Interval(int s, int e) &#123; start = s; end = e; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Interval&gt; <span class="title function_">merge</span><span class="params">(ArrayList&lt;Interval&gt; intervals)</span> &#123;</span><br><span class="line">        ArrayList&lt;Interval&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.sort(intervals,(a,b)-&gt;a.start-b.start);</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> intervals.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> intervals.get(i).start;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> intervals.get(i).end;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; len-<span class="number">1</span> &amp;&amp; intervals.get(i+<span class="number">1</span>).start &lt;= right) &#123;</span><br><span class="line">                right = Math.max(right,intervals.get(i+<span class="number">1</span>).end);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">Interval</span>(left,right));</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>排序</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC54数组中相加和为0三元组</title>
    <url>/posts/a042c421.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给出一个有n个元素的数组S，S中是否有元素a,b,c满足a+b+c=0？找出数组S中所有满足条件的三元组。</p>
<p>注意：</p>
<ol>
<li><p>三元组（a、b、c）中的元素必须按非降序排列。（即a≤b≤c）</p>
</li>
<li><p>解集中不能包含重复的三元组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例如，给定的数组 S = &#123;-<span class="number">10</span> <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> -<span class="number">10</span> -<span class="number">40</span>&#125;,解集为(-<span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>) (-<span class="number">10</span>, -<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[-<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[[-<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>],[-<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>通过Arrays.sort()方法对原数组进行排序，对于排序后的数据，从第一个元素开始，运用双指针（首尾双指针），求解该双指针指向数字之和为当前索引所在数字的相反数即可。实际上就转换成了多次的双指针求和问题。</p>
<p>需要特别注意的是在每一次指针移动过程中要判断是否有重复元素，重复元素需要跳过。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] num)</span> &#123;</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="literal">null</span> ||num.length &lt; <span class="number">3</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Arrays.sort(num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;num.length-<span class="number">2</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; num[i]==num[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> i + <span class="number">1</span>, r = num.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> num[i] + num[l] + num[r];</span><br><span class="line">                <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</span><br><span class="line">                    ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    tmp.add(num[i]);</span><br><span class="line">                    tmp.add(num[l]);</span><br><span class="line">                    tmp.add(num[r]);</span><br><span class="line">                    res.add(tmp);</span><br><span class="line">                    <span class="keyword">while</span>(l&lt;r &amp;&amp; num[l] == num[l+<span class="number">1</span>])&#123;</span><br><span class="line">                        l++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span>(l&lt;r &amp;&amp; num[r] == num[r-<span class="number">1</span>])&#123;</span><br><span class="line">                        r--;</span><br><span class="line">                    &#125;</span><br><span class="line">                    l++;</span><br><span class="line">                    r--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    r--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    l++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数组</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC61两数之和</title>
    <url>/posts/e16d3e6e.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给出一个整数数组，请在数组中找出两个加起来等于目标值的数，</p>
<p>你给出的函数twoSum 需要返回这两个数字的下标（index1，index2），需要满足 index1 小于index2.。注意：下标是从1开始的</p>
<p>假设给出的数组中只存在唯一解</p>
<p>例如：</p>
<p>给出的数组为 {20, 70, 110, 150},目标值为90<br>输出 index1=1, index2=2</p>
<p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>],<span class="number">6</span></span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题目提到只存在唯一解，故而考虑使用HashMap求解该问题。</p>
<p>对于每一个数，在存入HashMap之前先判断HashMap中当前是否存在可以和该数字相加为target的数字，有则返回。没有才将该数字和下标存入HashMap中。先判断后存入的方式能够避免使用到同一个数字。</p>
<p>要注意返回时下标需要+1.</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> numbers int整型一维数组 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target int整型 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型一维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum (<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> numbers.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(target-numbers[i]))&#123;</span><br><span class="line">                res[<span class="number">0</span>] = map.get(target-numbers[i])+<span class="number">1</span>;</span><br><span class="line">                res[<span class="number">1</span>] = i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">             map.put(numbers[i],i);</span><br><span class="line">         &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数组</tag>
        <tag>哈希</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC65斐波那契数列</title>
    <url>/posts/d50e8c3.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0，第1项是1）。</p>
<p><em>n</em>≤39</p>
<h2 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>该问题为经典的动态规划问题。</p>
<p>对于动态规划问题，关键就是找到初始状态和状态转换方程。</p>
<p>本体的初始状态为</p>
<p>f（0）= 0</p>
<p>f（1）= 1</p>
<p>状态转换方程为</p>
<p>f（n） = f（n-1）+ f（n-2）</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">Fibonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            sum = a + b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数组</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC66两个链表的第一个公共节点</title>
    <url>/posts/bd369e07.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入两个链表，找出它们的第一个公共结点。（注意因为传入数据是链表，所以错误测试数据的提示是用其他方式显示的，保证传入数据是正确的）</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>从两个链表的头节点出发，同时向后移动，当某一个链表的指针为空后，此时到了链表尾，指向另一个链表的头节点，这样，最终两个指针会在两个链表的同一相对位置。此时继续遍历就能找到第一个公共节点。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210325194213.png" alt=""></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">FindFirstCommonNode</span><span class="params">(ListNode pHead1, ListNode pHead2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(pHead1==<span class="literal">null</span> || pHead2==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l1</span> <span class="operator">=</span> pHead1;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l2</span> <span class="operator">=</span> pHead2;</span><br><span class="line">        <span class="keyword">while</span>(l1 != l2)&#123;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">            <span class="keyword">if</span>(l1 != l2)&#123;</span><br><span class="line">                <span class="keyword">if</span>(l1 == <span class="literal">null</span>) l1 = pHead2;</span><br><span class="line">                <span class="keyword">if</span>(l2 == <span class="literal">null</span>) l2 = pHead1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC90设计getMin功能的栈</title>
    <url>/posts/e03df8f0.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>实现一个特殊功能的栈，在实现栈的基本功能的基础上，再实现返回栈中最小元素的操作。</p>
<p>输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[1,3],[1,2],[1,1],[3],[2],[3]]</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1,2]</span><br></pre></td></tr></table></figure>
<p>Tips：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有三种操作种类，op1表示push，op2表示pop，op3表示getMin。你需要返回和op3出现次数一样多的数组，表示每次getMin的答案</span><br><span class="line"></span><br><span class="line">1&lt;=操作总数&lt;=1000000</span><br><span class="line">-1000000&lt;=每个操作数&lt;=1000000</span><br><span class="line">数据保证没有不合法的操作</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>该题目重点在于获取当前栈中的min值。</p>
<p>考虑为原栈stack1，新建一个stack2栈用来维持stack1中的最小数。由于栈FILO的特性，只需要保证stack2中的栈顶元素维持在一个最小值水平即可。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * return a array which include all ans for op3</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> op int整型二维数组 operator</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型一维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getMinStack (<span class="type">int</span>[][] op) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        Stack&lt;Integer&gt; s1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; s2 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> flag;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;op.length; i++)&#123;</span><br><span class="line">            flag = op[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;</span><br><span class="line">                s1.push(op[i][<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span>(s2.isEmpty() || s2.peek() &gt;= op[i][<span class="number">1</span>])&#123;</span><br><span class="line">                    s2.push(op[i][<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> s1.pop();</span><br><span class="line">                <span class="keyword">if</span>(value == s2.peek())&#123;</span><br><span class="line">                    s2.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">3</span>)&#123;</span><br><span class="line">                list.add(s2.peek());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j&lt;list.size(); j++)&#123;</span><br><span class="line">            res[j] = list.get(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC144不相邻最大子序列和</title>
    <url>/posts/2ad2d7e9.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给你一个n（1≤<em>n</em>≤1e5)，和一个长度为n的数组，在不同时选位置相邻的两个数的基础上，求该序列的最大子序列和（挑选出的子序列可以为空）。</p>
<p>注意：</p>
<ol>
<li><p>三元组（a、b、c）中的元素必须按非降序排列。（即a≤b≤c）</p>
</li>
<li><p>解集中不能包含重复的三元组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例如，给定的数组 S = &#123;-<span class="number">10</span> <span class="number">0</span> <span class="number">10</span> <span class="number">20</span> -<span class="number">10</span> -<span class="number">40</span>&#125;,解集为(-<span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>) (-<span class="number">10</span>, -<span class="number">10</span>, <span class="number">20</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>返回值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">有[],[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>],[<span class="number">1</span>,<span class="number">3</span>] <span class="number">4</span>种选取方式其中[<span class="number">1</span>,<span class="number">3</span>]选取最优，答案为<span class="number">4</span> </span><br></pre></td></tr></table></figure>
<h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span>,[<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>
<p>说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">其中[<span class="number">4</span>,<span class="number">5</span>]的选取方案是在满足不同时选取相邻位置的数的情况下是最优的答案 </span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>该问题为动态规划问题。</p>
<p>用一个长度为n+1的数组dp[n+1]来保存各个位置的最佳解。</p>
<p>首先初始化dp[0] = 0; dp[1] =  array[0];</p>
<p>后续具体的状态转移过程可以描述为：</p>
<p>dp[i] = Math.max(dp[i-1], dp[i-2] + array[i-1])</p>
<p>最终得到的dp[n]则为所求解。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     * 计算</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n int整型 数组的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array int整型一维数组 长度为n的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long长整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">subsequence</span> <span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>],dp[i-<span class="number">2</span>]+array[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC1大数加法</title>
    <url>/posts/640c1916.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>以字符串的形式读入两个数字，编写一个函数计算它们的和，以字符串形式返回。</p>
<p>（字符串长度不大于100000，保证字符串仅由’0’~’9’这10种字符组成）</p>
<p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;1&quot;</span>,<span class="string">&quot;99&quot;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;100&quot;</span></span><br></pre></td></tr></table></figure>
<p>Tips：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>+<span class="number">99</span>=<span class="number">100</span> </span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>该题目重点在于获取当前栈中的min值。</p>
<p>考虑为原栈stack1，新建一个stack2栈用来维持stack1中的最小数。由于栈FILO的特性，只需要保证stack2中的栈顶元素维持在一个最小值水平即可。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     * 计算两个数之和</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s string字符串 表示第一个整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t string字符串 表示第二个整数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">solve</span> <span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> t.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span> || carry != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i &lt; <span class="number">0</span> ? <span class="number">0</span> : s.charAt(i--) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> j &lt; <span class="number">0</span> ? <span class="number">0</span> : t.charAt(j--) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> x + y + carry;</span><br><span class="line">            sb.append(sum % <span class="number">10</span>);</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>字符串</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC15求二叉树的层序遍历</title>
    <url>/posts/5fc98f80.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个二叉树，返回该二叉树层序遍历的结果，（从左到右，一层一层地遍历）<br>例如：<br>给定的二叉树是{3,9,20,#,#,15,7},</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210325202139.png" alt=""></p>
<p>该二叉树层序遍历的结果是<br>[<br>[3],<br>[9,20],<br>[15,7]<br>]</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[[<span class="number">1</span>],[<span class="number">2</span>]]</span><br></pre></td></tr></table></figure>
<h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,#,#,<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[[<span class="number">1</span>],[<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>]]</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>bfs问题借助队列FIFO的特性。</p>
<p>逐层遍历二叉树，在某一层进行遍历的时候。写入遍历信息到ArrayList集合中去的同时，判断每个节点是否存在左右子树。存在的话将对应的子节点入队。以准备下一层次的遍历。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val = 0;</span></span><br><span class="line"><span class="comment"> *   TreeNode left = null;</span></span><br><span class="line"><span class="comment"> *   TreeNode right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root TreeNode类 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型ArrayList&lt;ArrayList&lt;&gt;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span> <span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; level = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">tmp</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                level.add(tmp.val);</span><br><span class="line">                <span class="keyword">if</span>(tmp.left != <span class="literal">null</span>) queue.offer(tmp.left);</span><br><span class="line">                <span class="keyword">if</span>(tmp.right != <span class="literal">null</span>) queue.offer(tmp.right);</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(level);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>树</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC17最长回文子串</title>
    <url>/posts/87a4468d.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>对于一个字符串，请设计一个高效算法，计算其中最长回文子串的长度。</p>
<p>给定字符串<strong>A</strong>以及它的长度<strong>n</strong>，请返回最长回文子串的长度。</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;abc1234321ab&quot;</span>,<span class="number">12</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210327210613.png" alt=""></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLongestPalindrome</span><span class="params">(String A, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[n][n];</span><br><span class="line">        <span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt; n; l++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i + l &lt; n; ++i)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + l;</span><br><span class="line">                <span class="keyword">if</span>(l == <span class="number">0</span>)&#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(l == <span class="number">1</span>)&#123;</span><br><span class="line">                    dp[i][j] = (A.charAt(i) == A.charAt(j));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = (dp[i+<span class="number">1</span>][j-<span class="number">1</span>] &amp;&amp; A.charAt(i) == A.charAt(j));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(dp[i][j] &amp;&amp; l + <span class="number">1</span> &gt; ans.length())&#123;</span><br><span class="line">                    ans = A.substring(i,i+l+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>动态规划</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC73数组中超过一半的数字（众数）</title>
    <url>/posts/e23557d2.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。<br><strong>思路</strong>：用一般的排序也可以完成这道题目，但是如果那样完成的话就可能太简单了。<br>用preValue记录上一次访问的值，count表明当前值出现的次数，如果下一个值和当前值相同那么count++；如果不同count—，减到0的时候就要更换新的preValue值了，因为如果存在超过数组长度一半的值，那么最后preValue一定会是该值。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">MoreThanHalfNum_Solution</span><span class="params">(<span class="type">int</span> [] array)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(array == <span class="literal">null</span>||array.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i&lt;array.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] == tmp)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">                tmp = array[i];</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] == tmp)&#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; array.length/<span class="number">2</span>) res = tmp;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数组</tag>
        <tag>哈希</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC3链表中环的入口节点</title>
    <url>/posts/e8e45288.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>对于一个给定的链表，返回环的入口节点，如果没有环，返回null</p>
<p>拓展：</p>
<p>你能给出不利用额外空间的解法么？</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>利用快慢指针确定链表是否存在环。</p>
<p>是：此时的slow指针和fast指针相遇且均在环内。此时将另一个指针slow2指向链表头结点，并让slow2和slow指针同时一次移动一步。由于slow指针在环内，所以两节点一旦相遇。一定是在环的入口节点处。</p>
<p>否：返回null。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head, slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow)&#123;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">slow2</span> <span class="operator">=</span> head;</span><br><span class="line">                <span class="keyword">while</span>(slow2 != slow)&#123;</span><br><span class="line">                    slow2 = slow2.next;</span><br><span class="line">                    slow = slow.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> slow;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>双指针</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC141判断回文</title>
    <url>/posts/77a66fad.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个字符串，请编写一个函数判断该字符串是否回文。如果回文请返回true，否则返回false。</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;absba&quot;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;ranko&quot;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;yamatomaya&quot;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>tips:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">字符串长度不大于<span class="number">1000000</span>，且仅由小写字母组成</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>直接利用双索引，从第一个下标i和最后一个下标j开始比较，此后i++和j—逐一比较。直到遇到不同的字符则返回false，否则返回true。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str string字符串 待判断的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">judge</span> <span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = str.length()-<span class="number">1</span>; i&lt;j; i++,j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) != str.charAt(j))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC25删除有序链表中重复的元素</title>
    <url>/posts/46772ae5.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>删除给出链表中的重复元素（链表中元素从小到大有序），使链表中的所有元素都只出现一次<br>例如：<br>给出的链表为1\to1\to21→1→2,返回1 \to 21→2.<br>给出的链表为1\to1\to 2 \to 3 \to 31→1→2→3→3,返回1\to 2 \to 31→2→3.</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>用一个指针就可以实现，对指针当前位置和下一位置的值进行比较。</p>
<p>相同：删除下一位置的节点</p>
<p>不同：指针移动到下一位置</p>
<p>直到链表尾。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val;</span></span><br><span class="line"><span class="comment"> *   ListNode next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head ListNode类 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">deleteDuplicates</span> <span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(tmp.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp.next.val == tmp.val)&#123;</span><br><span class="line">                tmp.next = tmp.next.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tmp = tmp.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC38螺旋矩阵</title>
    <url>/posts/36804329.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个m x n大小的矩阵（m行，n列），按螺旋的顺序返回矩阵中的所有元素。</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210325212049.png" alt=""></p>
<p>分别需要实现四个遍历：</p>
<p>左→右</p>
<p>上→下</p>
<p>右→左</p>
<p>下→上</p>
<p>需要特别注意的是不要遍历重复数据。left、right、top、bottom的指针变化方式尤为重要。</p>
<p>另外还要注意限制条件top！= bottom 和 left！= right</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210325212338.png" alt=""></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(matrix.length == <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> <span class="number">0</span>, bottom = matrix.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(top &lt; (matrix.length + <span class="number">1</span>) / <span class="number">2</span> &amp;&amp; left &lt; (matrix[<span class="number">0</span>].length + <span class="number">1</span>) / <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;= right; i++)&#123;</span><br><span class="line">                res.add(matrix[top][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top + <span class="number">1</span>; i &lt;= bottom; i++)&#123;</span><br><span class="line">                res.add(matrix[i][right]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> right - <span class="number">1</span>; i &gt;= left &amp;&amp; top != bottom; i--)&#123;</span><br><span class="line">                res.add(matrix[bottom][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bottom - <span class="number">1</span>; i &gt;= top + <span class="number">1</span> &amp;&amp; left != right; i--)&#123;</span><br><span class="line">                res.add(matrix[i][left]);</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            top++;</span><br><span class="line">            right--;</span><br><span class="line">            bottom--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC69链表中倒数第k个节点</title>
    <url>/posts/46c69418.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个链表，输出该链表中倒数第k个结点。</p>
<p>如果该链表长度小于k，请返回空。</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,<span class="number">1</span> </span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先让一个指针first先走k步。</p>
<p>此时再引出一个res指针从head节点开始。</p>
<p>first 和res 指针同时前进。</p>
<p>当first走到尾部时，此时res为倒数第k个节点。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val;</span></span><br><span class="line"><span class="comment"> *   ListNode next = null;</span></span><br><span class="line"><span class="comment"> *   public ListNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pHead ListNode类 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k int整型 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">FindKthToTail</span> <span class="params">(ListNode pHead, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">first</span> <span class="operator">=</span> pHead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;k; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(first==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">res</span> <span class="operator">=</span> pHead;</span><br><span class="line">        <span class="keyword">while</span>(first != <span class="literal">null</span>)&#123;</span><br><span class="line">            res = res.next;</span><br><span class="line">            first = first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习日记（一）安装与时光机</title>
    <url>/posts/b861857a.html</url>
    <content><![CDATA[<font size = 3>

<h1 id="windows下的安装"><a href="#windows下的安装" class="headerlink" title="windows下的安装"></a>windows下的安装</h1><p>下载安装</p>
<p>安装完成后配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><p>版本库又名仓库，英文名<strong>repository</strong>，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>
<h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><p>首先，选择一个合适的地方，创建一个空目录：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ mkdir learngit<span class="comment">//创建目录</span></span><br><span class="line">$ cd learngit<span class="comment">//切换到刚刚创建的目录下</span></span><br><span class="line">$ pwd<span class="comment">//显示当前所在目录</span></span><br><span class="line">/Users/michael/learngit</span><br></pre></td></tr></table></figure>
<h2 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h2><p>第二步，通过<code>git init</code>命令把这个目录变成Git可以管理的仓库：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in /Users/michael/learngit/.git/</span><br></pre></td></tr></table></figure>
<p>目录下多了一个<code>.git</code>的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。</p>
<p>如果你没有看到<code>.git</code>目录，那是因为这个目录默认是隐藏的，用<code>ls -ah</code>命令就可以看见。</p>
<h2 id="添加文件到版本库"><a href="#添加文件到版本库" class="headerlink" title="添加文件到版本库"></a>添加文件到版本库</h2><p>对于文件编码，如果没有历史遗留问题，强烈建议使用标准的<strong>UTF-8</strong>编码</p>
<p>不要使用windows子代记事本，下载<a href="http://notepad-plus-plus.org/">Notepad++</a>代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可。</p>
<p>在任意位置创建一个txt（readme.txt），添加文本内容。</p>
<p>第一步，用命令<code>git add</code>告诉Git，把文件添加到仓库：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure>
<p>第二步，用命令<code>git commit</code>告诉Git，把文件提交到仓库：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;wrote a readme file&quot;</span></span><br><span class="line">[master (root-commit) eaadf4e] wrote a readme file</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">2</span> insertions(+)</span><br><span class="line"> create mode <span class="number">100644</span> readme.txt</span><br></pre></td></tr></table></figure>
<p><code>-m</code>后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。</p>
<p>为什么Git添加文件需要<code>add</code>，<code>commit</code>一共两步呢？因为<code>commit</code>可以一次提交很多文件，所以你可以多次<code>add</code>不同的文件，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m <span class="string">&quot;add 3 files.&quot;</span></span><br></pre></td></tr></table></figure>
<h1 id="时光穿梭"><a href="#时光穿梭" class="headerlink" title="时光穿梭"></a>时光穿梭</h1><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>在实际工作中，我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，不然要版本控制系统干什么。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用<code>git log</code>命令查看。</p>
<p>要把当前版本<code>append GPL</code>回退到上一个版本<code>add distributed</code>，就可以使用<code>git reset</code>命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at e475afc add distributed</span><br></pre></td></tr></table></figure>
<p>指定回到未来的某个版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git reset --hard 1094a</span><br><span class="line">HEAD is now at 83b0afe append GPL</span><br></pre></td></tr></table></figure>
<p>版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。</p>
<p>Git提供了一个命令<code>git reflog</code>用来记录你的每一次命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">e475afc HEAD@&#123;<span class="number">1</span>&#125;: reset: moving to HEAD^</span><br><span class="line">1094adb (HEAD -&gt; master) HEAD@&#123;<span class="number">2</span>&#125;: commit: append GPL</span><br><span class="line">e475afc HEAD@&#123;<span class="number">3</span>&#125;: commit: add distributed</span><br><span class="line">eaadf4e HEAD@&#123;<span class="number">4</span>&#125;: commit (initial): wrote a readme file</span><br></pre></td></tr></table></figure>
<h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210416202617.png" alt=""></p>
<p>我们把文件往Git版本库里添加的时候，是分两步执行的：</p>
<p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p>
<p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>
<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个<code>master</code>分支，所以，现在，<code>git commit</code>就是往<code>master</code>分支上提交更改。</p>
<p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p>
<p>tips：用<code>git status</code>查看一下状态</p>
<h1 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h1><h1 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h1><p><code>git checkout -- file</code>可以丢弃工作区的修改：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure>
<p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p>
<p>一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>
<p>一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
<p><strong>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</strong></p>
<p>用命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD readme.txt</span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M	readme.txt</span><br></pre></td></tr></table></figure>
<p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。 </p>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>在Git中，删除也是一个修改操作，我们实战一下，先添加一个新文件<code>test.txt</code>到Git并且提交：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git add test.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;add test.txt&quot;</span></span><br><span class="line">[master b84166e] add test.txt</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br><span class="line"> create mode <span class="number">100644</span> test.txt</span><br></pre></td></tr></table></figure>
<p>一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用<code>rm</code>命令删了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ rm test.txt</span><br></pre></td></tr></table></figure>
<p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add/rm &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	deleted:    test.txt</span><br><span class="line"></span><br><span class="line">no changes added to <span class="title function_">commit</span> <span class="params">(use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span></span><br></pre></td></tr></table></figure>
<p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git rm test.txt</span><br><span class="line">rm <span class="string">&#x27;test.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;remove test.txt&quot;</span></span><br><span class="line">[master d46f35e] remove test.txt</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> deletion(-)</span><br><span class="line"> delete mode <span class="number">100644</span> test.txt</span><br></pre></td></tr></table></figure>
<p>现在，文件就从版本库中被删除了。</p>
<p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git checkout -- test.txt</span><br></pre></td></tr></table></figure>
<p><code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>仓库</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习日记（二）远程仓库与分支管理</title>
    <url>/posts/a7ec5e47.html</url>
    <content><![CDATA[<font size = 3>

<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p><a href="https://github.com/">GitHub</a>提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。</p>
<p>第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</p>
<p>如果一切顺利的话，可以在用户主目录里找到<code>.ssh</code>目录，里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件，这两个就是SSH Key的秘钥对，<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p>
<p>第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：</p>
<p>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容</p>
<h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库。</p>
<p>在Repository name填入仓库名（<code>learngit</code>），其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p>
<p>目前，在GitHub上的这个<code>learngit</code>仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p>
<p>现在，我们根据GitHub的提示，在本地的<code>learngit</code>仓库下运行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@github.com:xxxxxx/learngit.git</span><br></pre></td></tr></table></figure>
<p>请千万注意，把上面的xxxxxx替换成你自己的GitHub账户名</p>
<p>添加后，远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p>
<p>下一步，就可以把本地库的所有内容推送到远程库上：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">Counting objects: <span class="number">20</span>, done.</span><br><span class="line">Delta compression using up to <span class="number">4</span> threads.</span><br><span class="line">Compressing objects: <span class="number">100</span>% (<span class="number">15</span>/<span class="number">15</span>), done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">20</span>/<span class="number">20</span>), <span class="number">1.64</span> KiB | <span class="number">560.00</span> KiB/s, done.</span><br><span class="line">Total <span class="number">20</span> (delta <span class="number">5</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">remote: Resolving deltas: <span class="number">100</span>% (<span class="number">5</span>/<span class="number">5</span>), done.</span><br><span class="line">To github.com:michaelliao/learngit.git</span><br><span class="line"> * [<span class="keyword">new</span> <span class="title class_">branch</span>]      master -&gt; master</span><br><span class="line">Branch <span class="string">&#x27;master&#x27;</span> set up to track remote branch <span class="string">&#x27;master&#x27;</span> from <span class="string">&#x27;origin&#x27;</span>.</span><br></pre></td></tr></table></figure>
<p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p>
<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<h2 id="删除远程库"><a href="#删除远程库" class="headerlink" title="删除远程库"></a>删除远程库</h2><h3 id="删除远程库-1"><a href="#删除远程库-1" class="headerlink" title="删除远程库"></a>删除远程库</h3><p>如果添加的时候地址写错了，或者就是想删除远程库，可以用<code>git remote rm &lt;name&gt;</code>命令。使用前，建议先用<code>git remote -v</code>查看远程库信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git<span class="meta">@github</span>.com:michaelliao/learn-git.git (fetch)</span><br><span class="line">origin  git<span class="meta">@github</span>.com:michaelliao/learn-git.git (push)</span><br></pre></td></tr></table></figure>
<p>然后，根据名字删除，比如删除<code>origin</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git remote rm origin</span><br></pre></td></tr></table></figure>
<p>此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到GitHub，在后台页面找到删除按钮再删除。</p>
<h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>用命令<code>git clone</code>克隆一个本地库：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git clone git<span class="meta">@github</span>.com:xxxxxx/gitskills.git</span><br><span class="line">Cloning into <span class="string">&#x27;gitskills&#x27;</span>...</span><br><span class="line">remote: Counting objects: <span class="number">3</span>, done.</span><br><span class="line">remote: Total <span class="number">3</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>), pack-reused <span class="number">3</span></span><br><span class="line">Receiving objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</span><br></pre></td></tr></table></figure>
<p>注意把Git库的地址换成你自己的，然后进入<code>gitskills</code>目录看看，已经有<code>README.md</code>文件了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd gitskills</span><br><span class="line">$ ls</span><br><span class="line">README.md</span><br></pre></td></tr></table></figure>
<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p>一开始的时候，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支，以及当前分支的提交点：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210416205416.png" alt=""></p>
<p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p>
<p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210416205445.png" alt=""></p>
<p>Git创建一个分支很快，因为除了增加一个<code>dev</code>指针，改改<code>HEAD</code>的指向，工作区的文件都没有任何变化！</p>
<p>不过，从现在开始，对工作区的修改和提交就是针对<code>dev</code>分支了，比如新提交一次后，<code>dev</code>指针往前移动一步，而<code>master</code>指针不变：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210416205540.png" alt=""></p>
<p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210416205611.png" alt=""></p>
<p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p>
<p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210416211709.png" alt=""></p>
<h2 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h2><p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a <span class="keyword">new</span> <span class="title class_">branch</span> <span class="string">&#x27;dev&#x27;</span></span><br></pre></td></tr></table></figure>
<p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch <span class="string">&#x27;dev&#x27;</span></span><br></pre></td></tr></table></figure>
<p>然后，用<code>git branch</code>命令查看当前分支：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure>
<p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。</p>
<p>然后，我们就可以在<code>dev</code>分支上正常提交，比如对<code>readme.txt</code>做个修改，加上一行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Creating a <span class="keyword">new</span> <span class="title class_">branch</span> is quick.</span><br></pre></td></tr></table></figure>
<p>然后提交：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;branch test&quot;</span></span><br><span class="line">[dev b17d20e] branch test</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br></pre></td></tr></table></figure>
<p>现在，<code>dev</code>分支的工作完成，我们就可以切换回<code>master</code>分支：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure>
<p>切换回<code>master</code>分支后，再查看一个<code>readme.txt</code>文件，刚才添加的内容不见了！因为那个提交是在<code>dev</code>分支上，而<code>master</code>分支此刻的提交点并没有变：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210416211652.png" alt=""></p>
<p>现在，我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Updating d46f35e..b17d20e</span><br><span class="line">Fast-forward</span><br><span class="line"> readme.txt | <span class="number">1</span> +</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br></pre></td></tr></table></figure>
<p><code>git merge</code>命令用于合并指定分支到当前分支。合并后，再查看<code>readme.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。</p>
<p>注意到上面的<code>Fast-forward</code>信息，Git告诉我们，这次合并是“快进模式”，也就是直接把<code>master</code>指向<code>dev</code>的当前提交，所以合并速度非常快。</p>
<p>当然，也不是每次合并都能<code>Fast-forward</code>，我们后面会讲其他方式的合并。</p>
<p>合并完成后，就可以放心地删除<code>dev</code>分支了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git branch -d dev</span><br><span class="line">Deleted branch <span class="title function_">dev</span> <span class="params">(was b17d20e)</span>.</span><br></pre></td></tr></table></figure>
<p>删除后，查看<code>branch</code>，就只剩下<code>master</code>分支了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>
<p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><p>我们注意到切换分支使用<code>git checkout &lt;branch&gt;</code>，而前面讲过的撤销修改则是<code>git checkout -- &lt;file&gt;</code>，同一个命令，有两种作用，确实有点令人迷惑。</p>
<p>实际上，切换分支这个动作，用<code>switch</code>更科学。因此，最新版本的Git提供了新的<code>git switch</code>命令来切换分支：</p>
<p>创建并切换到新的<code>dev</code>分支，可以使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">switch</span> -c dev</span><br></pre></td></tr></table></figure>
<p>直接切换到已有的<code>master</code>分支，可以使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">switch</span> master</span><br></pre></td></tr></table></figure>
<p>使用新的<code>git switch</code>命令，比<code>git checkout</code>要更容易理解。</p>
<h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>准备新的<code>feature1</code>分支，继续我们的新分支开发：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">switch</span> -c feature1</span><br><span class="line">Switched to a <span class="keyword">new</span> <span class="title class_">branch</span> <span class="string">&#x27;feature1&#x27;</span></span><br></pre></td></tr></table></figure>
<p>修改<code>readme.txt</code>最后一行，改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Creating a <span class="keyword">new</span> <span class="title class_">branch</span> is quick AND simple.</span><br></pre></td></tr></table></figure>
<p>在<code>feature1</code>分支上提交：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;AND simple&quot;</span></span><br><span class="line">[feature1 14096d0] AND simple</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</span><br></pre></td></tr></table></figure>
<p>切换到<code>master</code>分支：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">switch</span> master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by <span class="number">1</span> commit.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your local commits)</span><br></pre></td></tr></table></figure>
<p>Git还会自动提示我们当前<code>master</code>分支比远程的<code>master</code>分支要超前1个提交。</p>
<p>在<code>master</code>分支上把<code>readme.txt</code>文件的最后一行改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Creating a <span class="keyword">new</span> <span class="title class_">branch</span> is quick &amp; simple.</span><br></pre></td></tr></table></figure>
<p>提交：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;&amp; simple&quot;</span></span><br><span class="line">[master 5dc6824] &amp; simple</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</span><br></pre></td></tr></table></figure>
<p>现在，<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交，变成了这样：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210416211632.png" alt=""></p>
<p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git merge feature1</span><br><span class="line">Auto-merging readme.txt</span><br><span class="line"><span class="title function_">CONFLICT</span> <span class="params">(content)</span>: Merge conflict in readme.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure>
<p>果然冲突了！Git告诉我们，<code>readme.txt</code>文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by <span class="number">2</span> commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your local commits)</span><br><span class="line"></span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run <span class="string">&quot;git commit&quot;</span>)</span><br><span class="line">  (use <span class="string">&quot;git merge --abort&quot;</span> to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution)</span><br><span class="line"></span><br><span class="line">	both modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to <span class="title function_">commit</span> <span class="params">(use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span></span><br></pre></td></tr></table></figure>
<p>我们可以直接查看readme.txt的内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a <span class="keyword">new</span> <span class="title class_">branch</span> is quick &amp; simple.</span><br><span class="line">=======</span><br><span class="line">Creating a <span class="keyword">new</span> <span class="title class_">branch</span> is quick AND simple.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure>
<p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容，我们修改如下后保存：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Creating a <span class="keyword">new</span> <span class="title class_">branch</span> is quick and simple.</span><br></pre></td></tr></table></figure>
<p>再提交：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;conflict fixed&quot;</span></span><br><span class="line">[master cf810e4] conflict fixed</span><br></pre></td></tr></table></figure>
<p>现在，<code>master</code>分支和<code>feature1</code>分支变成了下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210416211809.png" alt=""></p>
<p>用带参数的<code>git log</code>也可以看到分支的合并情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   cf810e4 (HEAD -&gt; master) conflict fixed</span><br><span class="line">|\  </span><br><span class="line">| * 14096d0 (feature1) AND simple</span><br><span class="line">* | 5dc6824 &amp; simple</span><br><span class="line">|/  </span><br><span class="line">* b17d20e branch test</span><br><span class="line">* d46f35e (origin/master) remove test.txt</span><br><span class="line">* b84166e add test.txt</span><br><span class="line">* 519219b git tracks changes</span><br><span class="line">* e43a48b understand how stage works</span><br><span class="line">* 1094adb append GPL</span><br><span class="line">* e475afc add distributed</span><br><span class="line">* eaadf4e wrote a readme file</span><br></pre></td></tr></table></figure>
<p>最后，删除<code>feature1</code>分支：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git branch -d feature1</span><br><span class="line">Deleted branch <span class="title function_">feature1</span> <span class="params">(was 14096d0)</span>.</span><br></pre></td></tr></table></figure>
<h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p>
<p>如果要强制禁用<code>Fast forward</code>模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p>
<p>下面我们实战一下<code>--no-ff</code>方式的<code>git merge</code>：</p>
<p>首先，仍然创建并切换<code>dev</code>分支：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">switch</span> -c dev</span><br><span class="line">Switched to a <span class="keyword">new</span> <span class="title class_">branch</span> <span class="string">&#x27;dev&#x27;</span></span><br></pre></td></tr></table></figure>
<p>修改readme.txt文件，并提交一个新的commit：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;add merge&quot;</span></span><br><span class="line">[dev f52c633] add merge</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br></pre></td></tr></table></figure>
<p>现在，我们切换回<code>master</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">switch</span> master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure>
<p>准备合并<code>dev</code>分支，请注意<code>--no-ff</code>参数，表示禁用<code>Fast forward</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git merge --no-ff -m <span class="string">&quot;merge with no-ff&quot;</span> dev</span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> readme.txt | <span class="number">1</span> +</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br></pre></td></tr></table></figure>
<p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去。</p>
<p>合并后，我们用<code>git log</code>看看分支历史：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   e1e9c68 (HEAD -&gt; master) merge with no-ff</span><br><span class="line">|\  </span><br><span class="line">| * f52c633 (dev) add merge</span><br><span class="line">|/  </span><br><span class="line">*   cf810e4 conflict fixed</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>可以看到，不使用<code>Fast forward</code>模式，merge后就像这样：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210416212421.png" alt=""></p>
<h3 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h3><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p>
<p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>
<p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p>
<p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p>
<p>所以，团队合作的分支看起来就像这样：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210416213422.png" alt=""></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>仓库</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC135股票（两次交易）</title>
    <url>/posts/55b71ebb.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>假定你知道某只股票每一天价格的变动。</p>
<p>你最多可以同时持有一只股票。但你最多只能进行<strong>两次</strong>交易（一次买进和一次卖出记为一次交易。买进和卖出均无手续费）。</p>
<p>请设计一个函数，计算你所能获得的最大收益。</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">8</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>tips：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">第三天买进，第四天卖出，第五天买进，第六天卖出。总收益为<span class="number">4</span>。 </span><br><span class="line">总天数不大于<span class="number">200000</span>。保证股票每一天的价格在[<span class="number">1</span>,<span class="number">100</span>]范围内。</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>该问题为动态规划问题，关键在于找到初始值以及动态规划转移方程。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326215805.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326215841.png" alt=""></p>
<p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210326215918814.png" alt="image-20210326215918814"></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     * 两次交易所能获得的最大收益</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prices int整型一维数组 股票每一天的价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span> <span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(prices.length == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[prices.length][<span class="number">5</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -<span class="number">1</span> * prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">3</span>] = -<span class="number">1</span> * prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i&lt;prices.length; i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">            dp[i][<span class="number">2</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">2</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">3</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">3</span>], dp[i-<span class="number">1</span>][<span class="number">2</span>] - prices[i]);</span><br><span class="line">            dp[i][<span class="number">4</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">4</span>], dp[i-<span class="number">1</span>][<span class="number">3</span>] + prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[prices.length-<span class="number">1</span>][<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC62平衡二叉树</title>
    <url>/posts/d28e3fbc.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一棵二叉树，判断该二叉树是否是平衡二叉树。</p>
<p>在这里，我们只需要考虑其平衡性，不需要考虑其是不是排序二叉树</p>
<p><strong>平衡二叉树</strong>（Balanced Binary Tree），具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>利用递归逐层判断左右子树深度只差是否超过1。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">depth</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> depth(root.left);</span><br><span class="line">        <span class="keyword">if</span>(left == -<span class="number">1</span>)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> depth(root.right);</span><br><span class="line">        <span class="keyword">if</span>(right == -<span class="number">1</span>)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(left - right &lt; (-<span class="number">1</span>) || left - right &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> + (left &gt; right ? left:right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">IsBalanced_Solution</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> depth(root) != -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>树</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC92最长公共子序列</title>
    <url>/posts/44aa7f49.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定两个字符串str1和str2，输出连个字符串的最长公共子序列。如过最长公共子序列为空，则输出-1。</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;1A2C3D4B56&quot;</span>,<span class="string">&quot;B1D23CA45B6A&quot;</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure>
<p>tips：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1≤∣str 1∣,∣str 2∣≤5000</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先需要科普一下，最长公共子序列（longest common sequence）和最长公共子串（longest common substring）不是一回事儿。什么是子序列呢？即一个给定的序列的子序列，就是将给定序列中零个或多个元素去掉之后得到的结果。什么是子串呢？给定串中任意个连续的字符组成的子序列称为该串的子串。给一个图再解释一下：<br><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210329200226.png" alt=""></p>
<p>   求解LCS问题，不能使用暴力搜索方法。一个长度为n的序列拥有 2的n次方个子序列，它的时间复杂度是指数阶，太恐怖了。解决LCS问题，需要借助动态规划的思想。<br>       动态规划算法通常用于求解具有某种最优性质的问题。在这类问题中，可能会有许多可行解。每一个解都对应于一个值，我们希望找到具有最优值的解。动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题，先求解子问题，然后从这些子问题的解得到原问题的解。与分治法不同的是，适合于用动态规划求解的问题，经分解得到子问题往往不是互相独立的。若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。如果我们能够保存已解决的子问题的答案，而在需要时再找出已求得的答案，这样就可以避免大量的重复计算，节省时间。我们可以用一个表来记录所有已解的子问题的答案。不管该子问题以后是否被用到，只要它被计算过，就将其结果填入表中。这就是动态规划法的基本思路。</p>
<p>解决LCS问题，需要把原问题分解成若干个子问题，所以需要刻画LCS的特征。</p>
<p>   设A=“a0，a1，…，am”，B=“b0，b1，…，bn”，且Z=“z0，z1，…，zk”为它们的最长公共子序列。不难证明有以下性质：<br>   如果am=bn，则zk=am=bn，且“z0，z1，…，z(k-1)”是“a0，a1，…，a(m-1)”和“b0，b1，…，b(n-1)”的一个最长公共子序列；<br>   如果am!=bn，则若zk!=am，蕴涵“z0，z1，…，zk”是“a0，a1，…，a(m-1)”和“b0，b1，…，bn”的一个最长公共子序列；<br>   如果am!=bn，则若zk!=bn，蕴涵“z0，z1，…，zk”是“a0，a1，…，am”和“b0，b1，…，b(n-1)”的一个最长公共子序列。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210329200311.png" alt=""></p>
<p>  假如S1的最后一个元素 与 S2的最后一个元素相等，那么S1和S2的LCS就等于 {S1减去最后一个元素} 与 {S2减去最后一个元素} 的 LCS  再加上 S1和S2相等的最后一个元素。</p>
<p>   假如S1的最后一个元素 与 S2的最后一个元素不等（本例子就是属于这种情况），那么S1和S2的LCS就等于 ： {S1减去最后一个元素} 与 S2 的LCS， {S2减去最后一个元素} 与 S1 的LCS 中的最大的那个序列。</p>
<p>假设我需要求 a1 … am 和 b1 .. b(n-1)的LCS 和 a1 … a(m-1) 和 b1 .. bn的LCS，一定会递归地并且重复地把如a1… a(m-1) 与 b1 … b(n-1) 的 LCS 计算几次。所以我们需要一个数据结构来记录中间结果，避免重复计算。</p>
<p>​    假设我们用c[i,j]表示Xi 和 Yj 的LCS的长度（直接保存最长公共子序列的中间结果不现实，需要先借助LCS的长度）。其中X = {x1 … xm}，Y ={y1…yn}，Xi = {x1 … xi}，Yj={y1… yj}。可得递归公式如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210329200424.png" alt=""></p>
<p> 本文S1和S2的最LCS并不是只有1个，本文并不是着重讲输出两个序列的所有LCS，只是介绍如何通过上表，输出其中一个LCS。</p>
<p>   我们根据递归公式构建了上表，我们将从最后一个元素c[8][9]倒推出S1和S2的LCS。</p>
<p>   c[8][9] = 5，且S1[8] != S2[9]，所以倒推回去，c[8][9]的值来源于c[8][8]的值(因为c[8][8] &gt; c[7][9])。</p>
<p>   c[8][8] = 5,  且S1[8] = S2[8], 所以倒推回去，c[8][8]的值来源于 c[7][7]。</p>
<p>   以此类推，如果遇到S1[i] != S2[j] ，且c[i-1][j] = c[i][j-1] 这种存在分支的情况，这里请都选择一个方向（之后遇到这样的情况，也选择相同的方向）。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * longest common subsequence</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s1 string字符串 the string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s2 string字符串 the string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">LCS</span> <span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">l1</span> <span class="operator">=</span> s1.length(), l2 = s2.length();</span><br><span class="line">        <span class="keyword">if</span>(s1 == <span class="literal">null</span>||s2 == <span class="literal">null</span>|| s1 == <span class="string">&quot;&quot;</span> || s2 == <span class="string">&quot;&quot;</span>) <span class="keyword">return</span> <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[l1 + <span class="number">1</span>][l2 + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= l1; i++) &#123;dp[i][<span class="number">0</span>] = <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= l2; j++) &#123;dp[<span class="number">0</span>][j] = <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= l1; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= l2; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span> || j == <span class="number">0</span>)&#123;</span><br><span class="line">                        dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(s1.charAt(i-<span class="number">1</span>) == s2.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                        dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="number">0</span> &amp;&amp; l2 != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1.charAt(l1-<span class="number">1</span>) == s2.charAt(l2 - <span class="number">1</span>))&#123;</span><br><span class="line">                sb.append(s1.charAt(l1-<span class="number">1</span>));</span><br><span class="line">                l1 --;</span><br><span class="line">                l2 --;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[l1 - <span class="number">1</span>][l2] &gt; dp[l1][l2-<span class="number">1</span>])&#123;</span><br><span class="line">                    l1--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    l2--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sb.length() == <span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC134股票（无限次交易）</title>
    <url>/posts/c81d78e6.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>假定你知道某只股票每一天价格的变动。</p>
<p>你最多可以同时持有一只股票。但你可以无限次的交易（买进和卖出均无手续费）。</p>
<p>请设计一个函数，计算你所能获得的最大收益。</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>tips：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">由于每天股票都在跌，因此不进行任何交易最优。最大收益为<span class="number">0</span>。</span><br></pre></td></tr></table></figure>
<h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>tips：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">第一天买进，最后一天卖出最优。中间的当天买进当天卖出不影响最终结果。最大收益为<span class="number">4</span>。  </span><br><span class="line">总天数不大于<span class="number">200000</span>。保证股票每一天的价格在[<span class="number">1</span>,<span class="number">100</span>]范围内。</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">定义dp[i][0]表示第i+1天交易完之后手里没有股票的最大利润，dp[i][1]表示第i+1天交易完之后手里持有股票的最大利润。</span><br></pre></td></tr></table></figure>
<p><strong>当天交易完之后手里没有股票可能有两种情况，一种是当天没有进行任何交易</strong>，又因为当天手里没有股票，所以当天没有股票的利润只能取前一天手里没有股票的利润。<strong>一种是把当天手里的股票给卖了</strong>，既然能卖，说明手里是有股票的，所以这个时候当天没有股票的利润要取前一天手里有股票的利润加上当天股票能卖的价格。这两种情况我们取利润最大的即可，所以可以得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i][0]=max(dp[i-1][0],dp[i-1][1]+prices[i]);</span><br></pre></td></tr></table></figure>
<p><strong>当天交易完之后手里持有股票也有两种情况，一种是当天没有任何交易</strong>，又因为当天手里持有股票，所以当天手里持有的股票其实前一天就已经持有了。<strong>还一种是当天买入了股票</strong>，当天能卖股票，说明前一天手里肯定是没有股票的，我们取这两者的最大值，所以可以得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dp[i][1]=max(dp[i-1][1],dp[i-1][0]-prices[i]);</span><br></pre></td></tr></table></figure>
<p>动态规划的递推公式有了，那么边界条件是什么，就是第一天</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果买入：dp[0][1]=-prices[0];</span><br><span class="line">如果没买：dp[0][0]=0;</span><br></pre></td></tr></table></figure>
<p>有了递推公式和边界条件，代码很容易就写出来了</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     * 计算最大收益</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prices int整型一维数组 股票每一天的价格</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span> <span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(prices == <span class="literal">null</span> || prices.length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[prices.length][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC8二叉树路径之和</title>
    <url>/posts/36f0890c.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个二叉树和一个值\ sum <em>s<strong>u</strong>m</em>，请找出所有的根节点到叶子节点的节点值之和等于\ sum <em>s<strong>u</strong>m</em> 的路径，<br>例如：<br>给出如下的二叉树，\ sum=22 <em>s<strong>u</strong>m</em>=22，</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326221631.png" alt=""></p>
<p>返回<br>[<br>[5,4,11,2],<br>[5,8,9]<br>]</p>
<h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure>
<h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><p>输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[[<span class="number">1</span>,<span class="number">2</span>]]</span><br></pre></td></tr></table></figure>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326221753.png" alt=""></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val = 0;</span></span><br><span class="line"><span class="comment"> *   TreeNode left = null;</span></span><br><span class="line"><span class="comment"> *   TreeNode right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root TreeNode类 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sum int整型 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型ArrayList&lt;ArrayList&lt;&gt;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">    ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="title function_">pathSum</span> <span class="params">(TreeNode root, <span class="type">int</span> sum)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        dfs(root, sum, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> sum, <span class="type">int</span> cur)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        tmp.add(root.val);</span><br><span class="line">        cur += root.val;</span><br><span class="line">        <span class="keyword">if</span>(root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur == sum)&#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(tmp));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dfs(root.left, sum, cur);</span><br><span class="line">                dfs(root.right, sum, cur);</span><br><span class="line">            &#125;</span><br><span class="line">            tmp.remove(tmp.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>树</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>请教我学计网（一）网络结构与协议</title>
    <url>/posts/8380215d.html</url>
    <content><![CDATA[<h1 id="OSI与TCP-IP各层结构"><a href="#OSI与TCP-IP各层结构" class="headerlink" title="OSI与TCP/IP各层结构"></a>OSI与TCP/IP各层结构</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2@latest/image/20210325104841.png" alt="avatar"></p>
<font size = 3>

<ol>
<li><strong>应用层</strong>：通过应用进程间的交互来完成特定的网络应用。包括DNS，HTTP，DNS等协议。</li>
<li><strong>运输层</strong>：向两台主机进程之间的通信提供通⽤的数据传输服务（包括TCP和UDP协议） 。</li>
<li><strong>网络层</strong>：计算机⽹络中进⾏通信的两个计算机之间可能会经过很多个数据链路，也可能还要经过很多通信⼦⽹。⽹络层的任务就是选择合适的⽹间路由和交换结点， 确保数据及时传送 。（网络层使用IP协议）</li>
<li><strong>数据链路层</strong>：两台主机之间的数据传输，总是在⼀段⼀段的链路上传送的，这就需要使⽤专⻔的链路层的协议。     在两个相邻节点之间传送数据时， 数据链路层将⽹络层交下来的 <strong>IP</strong> 数据报组装成帧 。</li>
<li><strong>物理层</strong>：实现相邻计算机节点之间⽐特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异     。</li>
</ol>
<h1 id="TCP三次握手与四次挥手"><a href="#TCP三次握手与四次挥手" class="headerlink" title="TCP三次握手与四次挥手"></a>TCP三次握手与四次挥手</h1><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2@latest/image/20210325105635.png" alt="avatar"></p>
<ol>
<li><p>三次握手过程：客户端(syn)→服务端(syn/ACK)-&gt;客户端(ACK)-&gt;服务端</p>
</li>
<li><p>为什么要三次握手：</p>
<p>建⽴可靠的通信信道 </p>
<p>双⽅确认⾃⼰与对⽅的发送与接收是正常的 </p>
<p>第一次：s1(无) s2（s1发送正常，s2接收正常）</p>
<p>第二次：s1(s2 收发正常， s1收发正常) s2(同上)</p>
<p>第三次：s1(同上) s2(s1收发正常，s2收发正常)</p>
</li>
<li><p>为什么要传回syn：用来确认信道无误，接收到的就是发送方传来的同一个syn</p>
</li>
<li><p>为什么传回syn还要传回ack：syn用来确认s1到s2的信道无误，而ack用来后续判断s2到s1的信道是否有误</p>
<h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210325105925.png" alt=""></p>
</li>
</ol>
<ol>
<li>四次挥手过程: s1(FIN) -&gt; s2(ACK,FIN) -&gt; s1(ACK)     -&gt; s2</li>
<li>为什么建立连接是三次握手，而断开需要四次挥手：s2在接收到s1的断开请求后，只是表示s1不会再发送数据了，但可以接收数据，自身可能也有数据需要发送，所以FIN和ACK分开发送。</li>
</ol>
<h1 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210325110037.png" alt=""></p>
<p>UDP多用于即时通信：如qq语音视频等</p>
<p>TCP ⼀般⽤于⽂件传输、发送和接收邮件、远程登录等场景 </p>
<h1 id="TCP如何保证可靠传输"><a href="#TCP如何保证可靠传输" class="headerlink" title="TCP如何保证可靠传输"></a>TCP如何保证可靠传输</h1><h2 id="保证可靠传输"><a href="#保证可靠传输" class="headerlink" title="保证可靠传输"></a>保证可靠传输</h2><ol>
<li>划分应用数据为合适的数据块</li>
</ol>
<ol>
<li>给发送的包编号，接收方排序后传送给应用层</li>
</ol>
<ol>
<li>校验和： 保持TCP首部和数据的校验和。有差错则丢弃</li>
</ol>
<ol>
<li><p>接收端丢弃重复数据</p>
</li>
<li><p>流量控制： TCP连接双方有固定大小的缓存空间。值允许接受缓存区能够容纳的数据，当来不及处理时，提示发送方降低发送速率，防止包丢失。（TCP利用滑动窗口实现流量控制。）</p>
</li>
</ol>
<ol>
<li>拥塞控制：网络拥塞时，减少数据的发送</li>
</ol>
<ol>
<li>ARQ协议： 没发完一个分组后停止发送，等待对方确认后继续下一组</li>
</ol>
<ol>
<li>超时重传：在定时器时长内未能接收到确认信息，重发报文段。</li>
</ol>
<h2 id="ARQ协议"><a href="#ARQ协议" class="headerlink" title="ARQ协议"></a>ARQ协议</h2><ol>
<li>停止等待ARQ：</li>
</ol>
<p>每发完⼀个分组就停⽌发送，等待对⽅确认（回复ACK）。如果过了⼀段时间（超时时间后），还是没有收到 ACK 确认，说明没有发送成功，需要重新发送，直到收到确认后再发下⼀个分组； </p>
<p>若接收⽅收到重复分组，就丢弃该分组，但同时还要发送确认 </p>
<p>优：简单</p>
<p>缺：信道利用率低，等待时间长</p>
<ol>
<li>连续ARQ协议：</li>
</ol>
<p>发送⽅维持⼀个发送窗⼝，凡位于发送窗⼝内的分组可以连续发送出去，⽽不需要等待对⽅确认。接收⽅⼀般采⽤累计确认，对按序到达的最后⼀个分组发送确认，表明到这个分组为⽌的所有分组都已经正确收到了</p>
<p>优：信道利⽤率⾼，容易实现，即使确认丢失，也不必重传</p>
<p>缺：不能向发送⽅反映出接收⽅已经正确收到的所有分组的信息 （可能需要重传在分组中丢失号数据之后的全部数据）</p>
<h1 id="滑动窗口和流量控制"><a href="#滑动窗口和流量控制" class="headerlink" title="滑动窗口和流量控制"></a>滑动窗口和流量控制</h1><p>流量控制是为了控制发送⽅发送速率，保证接收⽅来得及接收 。</p>
<p>接收方ack报文中通过设置窗口字段大小来影响发送方的发送速率</p>
<h1 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h1><ol>
<li><p>拥塞控制是⼀个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低⽹络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。     </p>
</li>
<li><p>TCP 发送⽅要维持⼀个 <strong>拥塞窗⼝**</strong>(cwnd)** 的状态变量。拥塞控制窗⼝的⼤⼩取决于⽹络的拥塞程度，并且动态变化。发送⽅让⾃⼰的发送窗⼝取为拥塞窗⼝和接收⽅的接受窗⼝中较⼩的⼀个     </p>
</li>
<li><p>拥塞控制采用的四种算法：<strong>慢开始、拥塞避免、快重传、快恢复</strong></p>
<p>（1）慢开始：先探测⼀下，即由⼩到⼤逐渐增⼤发送窗⼝，也就是由⼩到⼤逐渐增⼤拥塞窗⼝数值。cwnd初始值为1，每经过⼀个传播轮次， cwnd加倍 </p>
<p>（2）拥塞避免：让拥塞窗⼝cwnd缓慢增⼤，即每经过⼀个往返时间RTT,就把发送方的cwnd加1 </p>
<p>（3）快重传和快恢复（FRR）：没有 FRR，如果数据包丢失了， TCP 将会使⽤定时器来要求传输暂停 .有了 FRR，如果接收机接收到⼀个不按顺序的数据段，它会⽴即给发送机发送⼀个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并⽴即重传这些丢失的数据段。</p>
<p>有了 FRR，就不会因为重传时要求的暂停被耽误。 当有单独的数据包丢失时，快速重传</p>
<p>和恢复（FRR）能最有效地⼯作。当有多个数据信息包在某⼀段很短的时间内丢失时，它则</p>
<p>不能很有效地⼯作 </p>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>OSI</tag>
        <tag>TCP/IP</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>请教我学Java（二）ConcurrentHashMap为什么是线程安全的</title>
    <url>/posts/13e1009d.html</url>
    <content><![CDATA[<h1 id="HashMap线程不安全"><a href="#HashMap线程不安全" class="headerlink" title="HashMap线程不安全"></a>HashMap线程不安全</h1><font size = 3>

<p>HashMap在扩容的时候会调用resize（）方法，这样的并发操作容易在一个桶上形成环形链表。当获取一个不存在的key时，计算出的index正好时环形链表的下标时就会出现如下的死循环。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210416191153.png" alt=""></p>
<h1 id="ConcurrentHashMap线程安全"><a href="#ConcurrentHashMap线程安全" class="headerlink" title="ConcurrentHashMap线程安全"></a>ConcurrentHashMap线程安全</h1><p>引入了如下的Segment数组</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210416191307.png" alt=""></p>
<p>其中的核心数据，例如value和链表都是由volatile修饰的，保证了数据的可见性。</p>
<p>原理上来说：ConcurrentHashMap 采用了分段锁技术，其中 Segment 继承于 ReentrantLock。不会像 HashTable 那样不管是 put 还是 get 操作都需要做同步处理，理论上 ConcurrentHashMap 支持 CurrencyLevel (Segment 数组数量)的线程并发。每当一个线程占用锁访问一个 Segment 时，不会影响到其他的 Segment。</p>
<p>jdk1.8抛弃了原有的segment锁，而使用CAS(Compare ans Swap) + synchronized的方式实现。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210416191607.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>请教我学数据结构（一）排序</title>
    <url>/posts/47991e6b.html</url>
    <content><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><font size=3>

<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/1156494-ab4cecff133d87b3.png" alt=""></p>
<ol>
<li>性能分析</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/1156494-62f859c2ac6f95ff.png" alt=""></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><p>直接插入排序的核心思想就是：将数组中的所有元素依次跟前面已经排好的元素相比较，如果选择的元素比已排序的元素小，则交换，直到全部元素都比较过。<br> 因此，从上面的描述中我们可以发现，直接插入排序可以用两个循环完成：</p>
<ol>
<li>第一层循环：遍历待比较的所有数组元素</li>
<li>第二层循环：将本轮选择的元素(selected)与已经排好序的元素(ordered)相比较。<br> 如果：selected &gt; ordered，那么将二者交换</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">insert_sort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">10</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="希尔（shell）排序"><a href="#希尔（shell）排序" class="headerlink" title="希尔（shell）排序"></a>希尔（shell）排序</h3><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326160721.png" alt=""></p>
<p>算法思想：</p>
<p>将待排序数组按照步长gap进行分组，然后将每组的元素利用直接插入排序的方法进行排序；每次将gap折半减小，循环上述操作；当gap=1时，利用直接插入，完成排序。<br> 同样的：从上面的描述中我们可以发现：希尔排序的总体实现应该由三个循环完成：</p>
<ol>
<li>第一层循环：将gap依次折半，对序列进行分组，直到gap=1</li>
<li>第二、三层循环：也即直接插入排序所需要的两次循环。具体描述见上。</li>
</ol>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h3><p>基本思想：比较+交换。</p>
<ol>
<li>从待排序序列中，找到关键字最小的元素；</li>
<li>如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换；</li>
<li>从余下的 N - 1 个元素中，找出关键字最小的元素，重复(1)、(2)步，直到排序结束。<br> 因此我们可以发现，简单选择排序也是通过两层循环实现。<br> 第一层循环：依次遍历序列当中的每一个元素<br> 第二层循环：将遍历得到的当前元素依次与余下的元素进行比较，符合最小元素的条件，则交换。</li>
</ol>
<p><strong>实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] numbers)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> numbers.length; <span class="comment">//数组长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span> ; <span class="comment">//中间变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i;   <span class="comment">//待确定的位置</span></span><br><span class="line">    <span class="comment">//选择出应该在第i个位置的数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> size -<span class="number">1</span> ; j &gt; i ; j--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(numbers[j] &lt; numbers[k])</span><br><span class="line">    &#123;</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//交换两个数</span></span><br><span class="line">    temp = numbers[i];</span><br><span class="line">    numbers[i] = numbers[k];</span><br><span class="line">    numbers[k] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆排序是利用<strong>堆</strong>这种数据结构而设计的一种排序算法，堆排序是一种<strong>选择排序。</strong></p>
<p>首先我们来了解下什么是堆。</p>
<p>堆分为两种：大顶堆和小顶堆，两者的差别主要在于排序方式。</p>
<p>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326191535.png" alt=""></p>
<p>大顶堆的存储结构为：{19,16,15,9,8,1}</p>
<p>小顶堆的存储结构为：{1,8,9,15,16,19}</p>
<p>我举的是两个有序的例子，当然，大顶堆和小顶堆的存储结构未必是有序的，只要父节点大于他的左右孩子节点就是大顶堆了，父节点小于他的孩子左右孩子节点就是小顶堆。</p>
<p><strong>堆排序的基本思想和步骤</strong></p>
<p>堆排序的基本思想是：将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了</p>
<p>下面我们举例来说明堆排序的步骤。</p>
<p>给定序列{15,8,1,19,16,9}</p>
<p>首先根据序列构造一个完全二叉树。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326191614.png" alt=""></p>
<p>根据大顶堆的原理，我们构造一个大顶堆，此时我们从最后一个非叶子节点开始，如下图。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326191645.png" alt=""></p>
<p>大顶堆的存储结构为{19,16,9,8,15,1}</p>
<p>然后我们将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换，步骤如下。</p>
<p>第一步：将堆顶元素19和堆底元素1交换，然后再重建，得到新的大顶堆，存储结构为：{16,15,9,8,1,19}。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326191710.png" alt=""></p>
<p>第二步：将堆顶元素16和新的无序堆的堆底元素1交换，然后再重建，得到新的大顶堆，存储结构为：{15,8,9,1,16,19}</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326191731.png" alt=""></p>
<p>第三步：将堆顶元素15和新的无序堆的堆底元素1交换，然后再重建，得到新的大顶堆，存储结构为：{9,8,1,15,16,19}</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326191800.png" alt=""></p>
<p>第四步：将堆顶元素9和新的无序堆的堆底元素1交换，然后再重建，得到新的大顶堆，存储结构为：{8,1,9,15,16,19}</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326191821.png" alt=""></p>
<p>第五步，将堆顶元素8和新的无序堆的堆底元素1交换，交换后整个堆为有序，存储结构为:{1,8,9,15,16,19}。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326191842.png" alt=""></p>
<p><strong>代码实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01.paixu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">19</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        sort(arr);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            adjustHead(arr,i,arr.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--)&#123;</span><br><span class="line">            swap(arr, <span class="number">0</span>, j);</span><br><span class="line">            adjustHead(arr, <span class="number">0</span>, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">adjustHead</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> i, <span class="type">int</span> len)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i * <span class="number">2</span> + <span class="number">1</span>; k &lt; len; k = k * <span class="number">2</span> + <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k + <span class="number">1</span> &lt; len &amp;&amp; arr[k + <span class="number">1</span>] &gt; arr[k])&#123;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr[k] &gt; tmp)&#123;</span><br><span class="line">                arr[i] = arr[k];</span><br><span class="line">                i = k;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[a];</span><br><span class="line">        arr[a] = arr[b];</span><br><span class="line">        arr[b] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326192212.png" alt=""></p>
<p><strong>实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] numbers)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> numbers.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; size-<span class="number">1</span>; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span> ;j &lt; size-<span class="number">1</span>-i ; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers[j] &gt; numbers[j+<span class="number">1</span>])  <span class="comment">//交换两数位置</span></span><br><span class="line">        &#123;</span><br><span class="line">        temp = numbers[j];</span><br><span class="line">        numbers[j] = numbers[j+<span class="number">1</span>];</span><br><span class="line">        numbers[j+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><strong>快速排序的基本思想</strong>：<br>通过一趟排序将待排序记录分割成独立的两部分，其中一部分记录的关键字均比另一部分关键字小，则分别对这两部分继续进行排序，直到整个序列有序。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326192807.png" alt=""></p>
<p>把整个序列看做一个数组，把第零个位置看做中轴，和最后一个比，如果比它小交换，比它大不做任何处理；交换了以后再和小的那端比，比它小不交换，比他大交换。这样循环往复，一趟排序完成，左边就是比中轴小的，右边就是比中轴大的，然后再用分治法，分别对这两个独立的数组进行排序。</p>
<p><strong>实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找出中轴（默认是最低位low）的在numbers数组排序后所在位置</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> numbers 带查找数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> low   开始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> high  结束位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  中轴所在位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMiddle</span><span class="params">(<span class="type">int</span>[] numbers, <span class="type">int</span> low,<span class="type">int</span> high)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> numbers[low]; <span class="comment">//数组的第一个作为中轴</span></span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">while</span>(low &lt; high &amp;&amp; numbers[high] &gt;= temp)</span><br><span class="line">    &#123;</span><br><span class="line">        high--;</span><br><span class="line">    &#125;</span><br><span class="line">    numbers[low] = numbers[high];<span class="comment">//比中轴小的记录移到低端</span></span><br><span class="line">    <span class="keyword">while</span>(low &lt; high &amp;&amp; numbers[low] &lt; temp)</span><br><span class="line">    &#123;</span><br><span class="line">        low++;</span><br><span class="line">    &#125;</span><br><span class="line">    numbers[high] = numbers[low] ; <span class="comment">//比中轴大的记录移到高端</span></span><br><span class="line">    &#125;</span><br><span class="line">    numbers[low] = temp ; <span class="comment">//中轴记录到尾</span></span><br><span class="line">    <span class="keyword">return</span> low ; <span class="comment">// 返回中轴的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><strong>基本思想：</strong><br>　　归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。<br>归并排序示例：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326193340.png" alt=""></p>
<p><strong>实现</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01.paixu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">gb</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">9</span>,<span class="number">98</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] res = sort(arr,<span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : res) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span> nums[], <span class="type">int</span> low, <span class="type">int</span> high)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(low &lt; high)&#123;</span><br><span class="line">            sort(nums, low, mid);</span><br><span class="line">            sort(nums, mid + <span class="number">1</span>, high);</span><br><span class="line">            merge(nums, low, mid, high);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] tmp = <span class="keyword">new</span> <span class="title class_">int</span>[high - low + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt; nums[j]) &#123;</span><br><span class="line">                tmp[k++] = nums[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tmp[k++] = nums[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">while</span> (i &lt;= mid)&#123;</span><br><span class="line">                tmp[k++] = nums[i++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(j &lt;= high)&#123;</span><br><span class="line">                tmp[k++] = nums[j++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k2</span> <span class="operator">=</span> <span class="number">0</span>; k2 &lt; tmp.length; k2++)&#123;</span><br><span class="line">                nums[k2 + low] = tmp[k2];</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>假定现在有这样一个整型数组{21,56,88,195,354,1,35,12,6,7}，我们可以看到，最大的数，354，是三位数，也就是说，这个排序最大涉及的数就是一个三位数，那么我们该怎么对这个数组运用基数排序呢？</p>
<p>首先，看这些数的个位，把他们按照个位从小到大排序（注意是按照个位），具体怎么排咱们一会儿看代码，先说原理， 也就是说，原来的数组按照个位排序就变成了{21,1,12,354,195,35,56,6,7,88}</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326203829.png" alt=""></p>
<p>从前往后，21，放到1号桶中（我们姑且先把他叫做桶），56放到6号桶中，88放到8号桶……放完之后，再把他们按顺序拿出来，就变成了{21,1,12,354,195,35,56,6,7,88}，很好理解，对吧，之后再按照这样的方法，把十位，百位，都排一遍，当你排完百位的时候，你就发现，数组变得有序了</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326203924.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326203944.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//调用基数排序函数</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//定义整型数组</span></span><br><span class="line">     <span class="type">int</span>[] arr = &#123;<span class="number">21</span>,<span class="number">56</span>,<span class="number">88</span>,<span class="number">195</span>,<span class="number">354</span>,<span class="number">1</span>,<span class="number">35</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">	lsd_RadixSort(arr,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出排序后的数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.print(arr[i]+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//arr是要排序的数组，max是数组中最大的数有几位</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">lsd_RadixSort</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> max)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//count数组用来计数</span></span><br><span class="line">    <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">    <span class="comment">//bucket用来当桶（在下面你就理解了什么是桶了），放数据，取数据</span></span><br><span class="line">    <span class="type">int</span>[] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//k表示第几位，1代表个位，2代表十位，3代表百位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=max;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//把count置空，防止上次循环的数据影响</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            count[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分别统计第k位是0,1,2,3,4,5,6,7,8,9的数量</span></span><br><span class="line">        <span class="comment">//以下便称为桶</span></span><br><span class="line">        <span class="comment">//即此循环用来统计每个桶中的数据的数量</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            count[getFigure(arr[i],k)]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用count[i]来确定放置数据的位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            count[i] = count[i] + count[i-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行完此循环之后的count[i]就是第i个桶右边界的位置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用循环把数据装入各个桶中，注意是从后往前装</span></span><br><span class="line">        <span class="comment">//这里是重点，一定要仔细理解</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=arr.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> getFigure(arr[i],k);</span><br><span class="line">            bucket[count[j]-<span class="number">1</span>] = arr[i];</span><br><span class="line">            count[j]--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将桶中的数据取出来，赋值给arr</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;arr.length;i++,j++)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[i] = bucket[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此函数返回整型数i的第k位是什么</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getFigure</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> k)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">10</span>,<span class="number">100</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> (i/a[k-<span class="number">1</span>])%<span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>请教我学Java（一）浅析重写equals方法后必须重写hashCode方法</title>
    <url>/posts/674e848.html</url>
    <content><![CDATA[<p>根据“<strong>类是否覆盖equals()方法</strong>”，将它分为2类。</p>
<p>(01) 若某个类没有覆盖equals()方法，当它的通过equals()比较两个对象时，实际上是比较两个对象是不是同一个对象。这时，等价于通过“==”去比较这两个对象。</p>
<p>(02) 我们可以覆盖类的equals()方法，来让equals()通过其它方式比较两个对象是否相等。通常的做法是：若两个对象的内容相等，则equals()方法返回true；否则，返回fasle。</p>
<p>“hashCode() 和 equals() ”是有关系的：</p>
<p>​    1)、如果两个对象相等，那么它们的hashCode()值一定相同。</p>
<p>​       这里的相等是指，通过equals()比较两个对象时返回true。</p>
<p>​    2)、如果两个对象hashCode()相等，它们并不一定相等。</p>
<p>​        因为在散列表中，hashCode()相等，即两个键值对的哈希值相等。然而哈希值相等</p>
<p><strong>参考代码</strong> (ConflictHashCodeTest1.java)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="number">2</span> <span class="keyword">import</span> java.lang.Comparable;</span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">4</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment">5 * <span class="doctag">@desc</span> 比较equals() 返回true 以及 返回false时， hashCode()的值。</span></span><br><span class="line"><span class="comment">6 *</span></span><br><span class="line"><span class="comment">7 * <span class="doctag">@author</span> skywang</span></span><br><span class="line"><span class="comment">8 * <span class="doctag">@emai</span> kuiwu-wang@163.com</span></span><br><span class="line"><span class="comment">9 */</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConflictHashCodeTest1</span>&#123;</span><br><span class="line"><span class="number">11</span> </span><br><span class="line"><span class="number">12</span>   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="number">13</span>     <span class="comment">// 新建Person对象，</span></span><br><span class="line"><span class="number">14</span>     <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;eee&quot;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="number">15</span>     <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;eee&quot;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="number">16</span>     <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">200</span>);</span><br><span class="line"><span class="number">17</span> </span><br><span class="line"><span class="number">18</span>     <span class="comment">// 新建HashSet对象 </span></span><br><span class="line"><span class="number">19</span>     <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line"><span class="number">20</span>     set.add(p1);</span><br><span class="line"><span class="number">21</span>     set.add(p2);</span><br><span class="line"><span class="number">22</span>     set.add(p3);</span><br><span class="line"><span class="number">23</span> </span><br><span class="line"><span class="number">24</span>     <span class="comment">// 比较p1 和 p2， 并打印它们的hashCode()</span></span><br><span class="line"><span class="number">25</span>     System.out.printf(<span class="string">&quot;p1.equals(p2) : %s; p1(%d) p2(%d)\n&quot;</span>, p1.equals(p2), p1.hashCode(), p2.hashCode());</span><br><span class="line"><span class="number">26</span>     <span class="comment">// 打印set</span></span><br><span class="line"><span class="number">27</span>     System.out.printf(<span class="string">&quot;set:%s\n&quot;</span>, set);</span><br><span class="line"><span class="number">28</span>   &#125;</span><br><span class="line"><span class="number">29</span> </span><br><span class="line"><span class="number">30</span>   <span class="comment">/**</span></span><br><span class="line"><span class="comment">31   * <span class="doctag">@desc</span> Person类。</span></span><br><span class="line"><span class="comment">32   */</span></span><br><span class="line"><span class="number">33</span>   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="number">34</span>     <span class="type">int</span> age;</span><br><span class="line"><span class="number">35</span>     String name;</span><br><span class="line"><span class="number">36</span> </span><br><span class="line"><span class="number">37</span>     <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="number">38</span>       <span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="number">39</span>       <span class="built_in">this</span>.age = age;</span><br><span class="line"><span class="number">40</span>     &#125;</span><br><span class="line"><span class="number">41</span> </span><br><span class="line"><span class="number">42</span>     <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="number">43</span>       <span class="keyword">return</span> <span class="string">&quot;(&quot;</span>+name + <span class="string">&quot;, &quot;</span> +age+<span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="number">44</span>     &#125;</span><br><span class="line"><span class="number">45</span> </span><br><span class="line"><span class="number">46</span>     <span class="comment">/** </span></span><br><span class="line"><span class="comment">47     * <span class="doctag">@desc</span> 覆盖equals方法 </span></span><br><span class="line"><span class="comment">48     */</span> </span><br><span class="line"><span class="number">49</span>     <span class="meta">@Override</span></span><br><span class="line"><span class="number">50</span>     <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123; </span><br><span class="line"><span class="number">51</span>       <span class="keyword">if</span>(obj == <span class="literal">null</span>)&#123; </span><br><span class="line"><span class="number">52</span>         <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"><span class="number">53</span>       &#125; </span><br><span class="line"><span class="number">54</span>        </span><br><span class="line"><span class="number">55</span>       <span class="comment">//如果是同一个对象返回true，反之返回false </span></span><br><span class="line"><span class="number">56</span>       <span class="keyword">if</span>(<span class="built_in">this</span> == obj)&#123; </span><br><span class="line"><span class="number">57</span>         <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line"><span class="number">58</span>       &#125; </span><br><span class="line"><span class="number">59</span>        </span><br><span class="line"><span class="number">60</span>       <span class="comment">//判断是否类型相同 </span></span><br><span class="line"><span class="number">61</span>       <span class="keyword">if</span>(<span class="built_in">this</span>.getClass() != obj.getClass())&#123; </span><br><span class="line"><span class="number">62</span>         <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"><span class="number">63</span>       &#125; </span><br><span class="line"><span class="number">64</span>        </span><br><span class="line"><span class="number">65</span>       <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person)obj; </span><br><span class="line"><span class="number">66</span>       <span class="keyword">return</span> name.equals(person.name) &amp;&amp; age==person.age; </span><br><span class="line"><span class="number">67</span>     &#125; </span><br><span class="line"><span class="number">68</span>   &#125;</span><br><span class="line"><span class="number">69</span> &#125;</span><br></pre></td></tr></table></figure>
<p><a href="javascript:void(0"><img src="file:///C:/Users/ADMINI~1/AppData/Local/Temp/msohtmlclip1/02/clip_image001.gif" alt="复制代码"></a>;)</p>
<p><strong>运行结果</strong>：</p>
<p>p1.equals(p2) : true; p1(1169863946) p2(1690552137)<br> set:[(eee, 100), (eee, 100), (aaa, 200)]</p>
<p><strong>结果分析</strong>：</p>
<p>​    我们重写了Person的equals()。但是，很奇怪的发现：HashSet中仍然有重复元素：p1 和 p2。为什么会出现这种情况呢？</p>
<p>​    这是因为虽然p1 和 p2的内容相等，但是它们的hashCode()不等；所以，HashSet在添加p1和p2的时候，认为它们不相等。</p>
<p>下面，我们同时覆盖equals() 和 hashCode()方法。</p>
<p>参考代码 (ConflictHashCodeTest2.java)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">import</span> java.util.*;</span><br><span class="line"> <span class="number">2</span> <span class="keyword">import</span> java.lang.Comparable;</span><br><span class="line"> <span class="number">3</span> </span><br><span class="line"> <span class="number">4</span> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 5 * <span class="doctag">@desc</span> 比较equals() 返回true 以及 返回false时， hashCode()的值。</span></span><br><span class="line"><span class="comment"> 6 *</span></span><br><span class="line"><span class="comment"> 7 * <span class="doctag">@author</span> skywang</span></span><br><span class="line"><span class="comment"> 8 * <span class="doctag">@emai</span> kuiwu-wang@163.com</span></span><br><span class="line"><span class="comment"> 9 */</span></span><br><span class="line"> <span class="number">10</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConflictHashCodeTest2</span>&#123;</span><br><span class="line"> <span class="number">11</span> </span><br><span class="line"> <span class="number">12</span>   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="number">13</span>     <span class="comment">// 新建Person对象，</span></span><br><span class="line"> <span class="number">14</span>     <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;eee&quot;</span>, <span class="number">100</span>);</span><br><span class="line"> <span class="number">15</span>     <span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;eee&quot;</span>, <span class="number">100</span>);</span><br><span class="line"> <span class="number">16</span>     <span class="type">Person</span> <span class="variable">p3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;aaa&quot;</span>, <span class="number">200</span>);</span><br><span class="line"> <span class="number">17</span>     <span class="type">Person</span> <span class="variable">p4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;EEE&quot;</span>, <span class="number">100</span>);</span><br><span class="line"> <span class="number">18</span> </span><br><span class="line"> <span class="number">19</span>     <span class="comment">// 新建HashSet对象 </span></span><br><span class="line"> <span class="number">20</span>     <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line"> <span class="number">21</span>     set.add(p1);</span><br><span class="line"> <span class="number">22</span>     set.add(p2);</span><br><span class="line"> <span class="number">23</span>     set.add(p3);</span><br><span class="line"> <span class="number">24</span> </span><br><span class="line"> <span class="number">25</span>     <span class="comment">// 比较p1 和 p2， 并打印它们的hashCode()</span></span><br><span class="line"> <span class="number">26</span>     System.out.printf(<span class="string">&quot;p1.equals(p2) : %s; p1(%d) p2(%d)\n&quot;</span>, p1.equals(p2), p1.hashCode(), p2.hashCode());</span><br><span class="line"> <span class="number">27</span>     <span class="comment">// 比较p1 和 p4， 并打印它们的hashCode()</span></span><br><span class="line"> <span class="number">28</span>     System.out.printf(<span class="string">&quot;p1.equals(p4) : %s; p1(%d) p4(%d)\n&quot;</span>, p1.equals(p4), p1.hashCode(), p4.hashCode());</span><br><span class="line"> <span class="number">29</span>     <span class="comment">// 打印set</span></span><br><span class="line"> <span class="number">30</span>     System.out.printf(<span class="string">&quot;set:%s\n&quot;</span>, set);</span><br><span class="line"> <span class="number">31</span>   &#125;</span><br><span class="line"> <span class="number">32</span> </span><br><span class="line"> <span class="number">33</span>   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 34   * <span class="doctag">@desc</span> Person类。</span></span><br><span class="line"><span class="comment"> 35   */</span></span><br><span class="line"> <span class="number">36</span>   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"> <span class="number">37</span>     <span class="type">int</span> age;</span><br><span class="line"> <span class="number">38</span>     String name;</span><br><span class="line"> <span class="number">39</span> </span><br><span class="line"> <span class="number">40</span>     <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line"> <span class="number">41</span>       <span class="built_in">this</span>.name = name;</span><br><span class="line"> <span class="number">42</span>       <span class="built_in">this</span>.age = age;</span><br><span class="line"> <span class="number">43</span>     &#125;</span><br><span class="line"> <span class="number">44</span> </span><br><span class="line"> <span class="number">45</span>     <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"> <span class="number">46</span>       <span class="keyword">return</span> name + <span class="string">&quot; - &quot;</span> +age;</span><br><span class="line"> <span class="number">47</span>     &#125;</span><br><span class="line"> <span class="number">48</span> </span><br><span class="line"> <span class="number">49</span>     <span class="comment">/** </span></span><br><span class="line"><span class="comment"> 50     * <span class="doctag">@desc</span>重写hashCode </span></span><br><span class="line"><span class="comment"> 51     */</span> </span><br><span class="line"> <span class="number">52</span>     <span class="meta">@Override</span></span><br><span class="line"> <span class="number">53</span>     <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>&#123; </span><br><span class="line"> <span class="number">54</span>       <span class="type">int</span> <span class="variable">nameHash</span> <span class="operator">=</span> name.toUpperCase().hashCode();</span><br><span class="line"> <span class="number">55</span>       <span class="keyword">return</span> nameHash ^ age;</span><br><span class="line"> <span class="number">56</span>     &#125;</span><br><span class="line"> <span class="number">57</span> </span><br><span class="line"> <span class="number">58</span>     <span class="comment">/** </span></span><br><span class="line"><span class="comment"> 59     * <span class="doctag">@desc</span> 覆盖equals方法 </span></span><br><span class="line"><span class="comment"> 60     */</span> </span><br><span class="line"> <span class="number">61</span>     <span class="meta">@Override</span></span><br><span class="line"> <span class="number">62</span>     <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123; </span><br><span class="line"> <span class="number">63</span>       <span class="keyword">if</span>(obj == <span class="literal">null</span>)&#123; </span><br><span class="line"> <span class="number">64</span>         <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"> <span class="number">65</span>       &#125; </span><br><span class="line"> <span class="number">66</span>        </span><br><span class="line"> <span class="number">67</span>       <span class="comment">//如果是同一个对象返回true，反之返回false </span></span><br><span class="line"> <span class="number">68</span>       <span class="keyword">if</span>(<span class="built_in">this</span> == obj)&#123; </span><br><span class="line"> <span class="number">69</span>         <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line"> <span class="number">70</span>       &#125; </span><br><span class="line"> <span class="number">71</span>        </span><br><span class="line"> <span class="number">72</span>       <span class="comment">//判断是否类型相同 </span></span><br><span class="line"> <span class="number">73</span>       <span class="keyword">if</span>(<span class="built_in">this</span>.getClass() != obj.getClass())&#123; </span><br><span class="line"> <span class="number">74</span>         <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"> <span class="number">75</span>       &#125; </span><br><span class="line"> <span class="number">76</span>        </span><br><span class="line"> <span class="number">77</span>       <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person)obj; </span><br><span class="line"> <span class="number">78</span>       <span class="keyword">return</span> name.equals(person.name) &amp;&amp; age==person.age; </span><br><span class="line"> <span class="number">79</span>     &#125; </span><br><span class="line"> <span class="number">80</span>   &#125;</span><br><span class="line"> <span class="number">81</span> &#125;</span><br></pre></td></tr></table></figure>
<p><strong>运行结果</strong>：</p>
<p>p1.equals(p2) : true; p1(68545) p2(68545)<br> p1.equals(p4) : false; p1(68545) p4(68545)<br> set:[aaa - 200, eee - 100]</p>
<p><strong>结果分析</strong>：</p>
<p>​    这下，equals()生效了，HashSet中没有重复元素。</p>
<p>​    <em>比较p1和p2</em>，我们发现：它们的hashCode()相等，通过equals()比较它们也返回true。所以，p1和p2被视为相等。</p>
<p>​    <em>比较p1和p4</em>，我们发现：虽然它们的hashCode()相等；但是，通过equals()比较它们返回false。所以，p1和p4被视为不相等。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>hashCode</tag>
      </tags>
  </entry>
  <entry>
    <title>请教我学计网（二）HTTP协议相关</title>
    <url>/posts/33157a3.html</url>
    <content><![CDATA[<h1 id="浏览器输入url-gt-gt-显示主页的过程"><a href="#浏览器输入url-gt-gt-显示主页的过程" class="headerlink" title="浏览器输入url-&gt;&gt;显示主页的过程"></a>浏览器输入url-&gt;&gt;显示主页的过程</h1><h1 id="浏览器输入url-gt-gt-显示主页的过程-1"><a href="#浏览器输入url-gt-gt-显示主页的过程-1" class="headerlink" title="浏览器输入url-&gt;&gt;显示主页的过程"></a>浏览器输入url-&gt;&gt;显示主页的过程</h1><h2 id="大致过程："><a href="#大致过程：" class="headerlink" title="大致过程："></a>大致过程：</h2><ol>
<li>浏览器通过DNS解析查找域名对应的IP地址（DNS解析）</li>
<li>浏览器向web服务器发送一个HTTP请求（TCP连接 → 发送HTTP请求）</li>
<li>服务器处理请求</li>
<li>服务器发回HTML响应（服务器处理请求并返回HTTP报文）</li>
<li>浏览器显示HTML（浏览器解析渲染界面 → 连接结束）状态码</li>
</ol>
<h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326151225.png" alt=""></p>
<h2 id="一图流解释各协议的作用（HTTP、TCP、IP）"><a href="#一图流解释各协议的作用（HTTP、TCP、IP）" class="headerlink" title="一图流解释各协议的作用（HTTP、TCP、IP）"></a>一图流解释各协议的作用（HTTP、TCP、IP）</h2><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210326151429.png" alt=""></p>
<h1 id="Cookie和Session的区别"><a href="#Cookie和Session的区别" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h1><ol>
<li>Cookie 主要用于保存用户信息，session     的主要作⽤就是通过服务端记录⽤户的状态 。</li>
<li>Cookie     数据保存在客户端(浏览器端)， Session 数据保存在服务器端 </li>
<li>相对来说 Session 安全性更⾼</li>
</ol>
<h1 id="HTTP1-0和1-1的区别"><a href="#HTTP1-0和1-1的区别" class="headerlink" title="HTTP1.0和1.1的区别"></a>HTTP1.0和1.1的区别</h1><ol>
<li><p>长连接：1.0默认短连接，HTTP协议是基于TCP协议的，每一次建立断开连接都需要三次握手，四次挥手。1.1默认长连接（Connection：keep alive）。持续方式包括非流水线式和流水线式。</p>
</li>
<li><p>错误状态响应码：1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的</p>
<p>资源与资源的当前状态发⽣冲突； 410（Gone）表示服务器上的某个资源被永久性的删除。</p>
</li>
<li><p>缓存处理：1.0中主要使⽤header⾥的If-Modified-Since,Expires来做为缓存判断的标</p>
<p>准 。1.1则引⼊了更多的缓存控制策略例如Entity tag， If-Unmodified-Since, If-Match,</p>
<p>If-None-Match等更多可供选择的缓存头来控制缓存策略 </p>
</li>
<li><p>带宽优化及网络连接的使用：1.0中，存在⼀些浪费带宽的现象，例如客户端只是需要某个对象的⼀部分，⽽服务器却将整个对象送过来了，并且不⽀持断点续传功能， HTTP1.1则在请求头引⼊了range头域，它允许只请求资源的某个部分，即返回码是206（PartialContent），这样就⽅便了开发者⾃由的选择以便于充分利⽤带宽和连接 </p>
</li>
</ol>
<h1 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h1><p>URI是统一资源标志符，可以唯一标识一个资源</p>
<p>URL是统一资源定位符，除了可以唯一标识一个资源，还指明了如何local到这个资源。</p>
<h1 id="HTTP和HTTPS的区别"><a href="#HTTP和HTTPS的区别" class="headerlink" title="HTTP和HTTPS的区别"></a>HTTP和HTTPS的区别</h1><ol>
<li><p>端口：HTTP端口默认为80；HTTPS为443</p>
</li>
<li><p>安全性和资源消耗：HTTP运行在TCP上，传输内容均为明文，客户端与服务器无法验证对方身份。HTTPS运行在SSL/TLS上，而SSL/TLS运行在TCP上，所有传输内容都采用对称加密，且对称加密的密钥采用了服务器的非对称加密。所以：HTTP 安全性没有 HTTPS⾼，但是 HTTPS ⽐HTTP耗费更多服务器资源 。</p>
</li>
<li><p>补充（对称加密与非对称加密）：</p>
<p>对称加密：密钥只有⼀个，加密解密为同⼀个密码，且加解密速度快，典型的对称加密算法有DES、 AES等；</p>
<p>⾮对称加密：密钥成对出现（且根据公钥⽆法推知私钥，根据私钥也⽆法推知公钥），加密解密使⽤不同密钥（公钥加密需要私钥解密，私钥加密需要公钥解密），相对对称加密速度较慢，典型的⾮对称加密算法有RSA、 DSA等。 </p>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>DNS</tag>
        <tag>会话</tag>
      </tags>
  </entry>
  <entry>
    <title>请教我学数据结构（二）红黑树</title>
    <url>/posts/5d1e0225.html</url>
    <content><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><font size = 3>

<p>红黑树是一种<strong>特殊的二叉查找树</strong>，能够通过操作实现<strong>自平衡</strong>。</p>
<h1 id="定义和性质"><a href="#定义和性质" class="headerlink" title="定义和性质"></a>定义和性质</h1><p>（1）根节点和叶子节点都为黑色</p>
<p>（2）红色节点的子节点都为黑色</p>
<p>（3）任意一个节点到每一个叶子节点的路径所包含的黑色节点树相同。</p>
<p>红黑树的自平衡通过三种操作实现：<strong>左旋</strong>、<strong>右旋</strong>和<strong>变色</strong></p>
<p><strong>左旋</strong>：以某个结点作为支点(旋转结点)，其右子结点变为旋转结点的父结点，右子结点的左子结点变为旋转结点的右子结点，左子结点保持不变。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210412103419.png" alt=""></p>
<p><strong>右旋</strong>：以某个结点作为支点(旋转结点)，其左子结点变为旋转结点的父结点，左子结点的右子结点变为旋转结点的左子结点，右子结点保持不变。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210412103440.png" alt=""></p>
<p><strong>变色</strong>：结点的颜色由红变黑或由黑变红。</p>
<h1 id="红黑树查找"><a href="#红黑树查找" class="headerlink" title="红黑树查找"></a>红黑树查找</h1><ol>
<li><p>从根结点开始查找，把根结点设置为当前结点；</p>
</li>
<li><p>若当前结点为空，返回null；</p>
</li>
<li><p>若当前结点不为空，用当前结点的key跟查找key作比较；</p>
</li>
<li><p>若当前结点key等于查找key，那么该key就是查找目标，返回当前结点；</p>
</li>
<li><p>若当前结点key大于查找key，把当前结点的左子结点设置为当前结点，重复步骤2；</p>
</li>
<li><p>若当前结点key小于查找key，把当前结点的右子结点设置为当前结点，重复步骤2；</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210412103534.png" alt=""></p>
<h1 id="红黑树插入"><a href="#红黑树插入" class="headerlink" title="红黑树插入"></a>红黑树插入</h1><p>插入操作包括两部分工作：一查找插入的位置；二插入后自平衡。查找插入的父结点很简单，跟查找操作区别不大：</p>
<ol>
<li>从根结点开始查找；</li>
<li>若根结点为空，那么插入结点作为根结点，结束。</li>
<li>若根结点不为空，那么把根结点作为当前结点；</li>
<li>若当前结点为null，返回当前结点的父结点，结束。</li>
<li>若当前结点key等于查找key，那么该key所在结点就是插入结点，更新结点的值，结束。</li>
<li>若当前结点key大于查找key，把当前结点的左子结点设置为当前结点，重复步骤4；</li>
<li>若当前结点key小于查找key，把当前结点的右子结点设置为当前结点，重复步骤4；</li>
</ol>
<p>插入时包含以下情景</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210412103708.png" alt=""></p>
<h1 id="红黑树删除"><a href="#红黑树删除" class="headerlink" title="红黑树删除"></a>红黑树删除</h1><p>红黑树的删除操作也包括两部分工作：一查找目标结点；而删除后自平衡。查找目标结点显然可以复用查找操作，当不存在目标结点时，忽略本次操作；当存在目标结点时，删除后就得做自平衡处理了。删除了结点后我们还需要找结点来替代删除结点的位置，不然子树跟父辈结点断开了，除非删除结点刚好没子结点，那么就不需要替代。</p>
<p>二叉树删除结点找替代结点有3种情情景：</p>
<ul>
<li>情景1：若删除结点无子结点，直接删除</li>
<li>情景2：若删除结点只有一个子结点，用子结点替换删除结点</li>
<li>情景3：若删除结点有两个子结点，用后继结点（大于删除结点的最小结点）替换删除结点</li>
</ul>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>红黑树</tag>
        <tag>二叉查找树</tag>
      </tags>
  </entry>
  <entry>
    <title>请教我学MySQL（一）索引</title>
    <url>/posts/7f61fc79.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><p>数据库索引的原理：数据库索引，是数据库管理系统中一个排序的数据结构，以协助快速查询、更新数据库表中数据。索引的实现通常使用 BTree 及其变种 B+Tree。</p>
<p>一般情况下,在没有建立索引的时候, mysql 需要扫描全表及扫描 10W 条数据找这条数据,如果我在 nickname 上建立索引,那么mysql只需要扫描一行数据及为我们找到这条 nickname=’css’ 的数据,是不是感觉性能提升了好多咧….</p>
<p>mysql 的索引分为 单例索引（主键索引、唯一索引、普通索引）和 组合索引。</p>
<ul>
<li>单例索引：一个索引只包含一个列，一个表可以有多个单例索引。</li>
<li>组合索引：一个组合索引包含两个或两个以上的列。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `award` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &#x27;用户id&#x27;,</span><br><span class="line">  `aty_id` varchar(100) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;活动场景id&#x27;,</span><br><span class="line">  `nickname` varchar(12) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;用户昵称&#x27;,</span><br><span class="line">  `is_awarded` tinyint(1) NOT NULL DEFAULT 0 COMMENT &#x27;用户是否领奖&#x27;,</span><br><span class="line">  `award_time` int(11) NOT NULL DEFAULT 0 COMMENT &#x27;领奖时间&#x27;,</span><br><span class="line">  `account` varchar(12) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;帐号&#x27;,</span><br><span class="line">  `password` char(32) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">  `message` varchar(255) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;获奖信息&#x27;,</span><br><span class="line">  `created_time` int(11) NOT NULL DEFAULT 0 COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `updated_time` int(11) NOT NULL DEFAULT 0 COMMENT &#x27;更新时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line"> ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8 COMMENT=&#x27;获奖信息表&#x27;;</span><br><span class="line"> </span><br><span class="line"> INSERT INTO `award` (`nickname`, `account`, `message`, `created_time`)</span><br><span class="line"> VALUES (&#x27;rSUQFzpkDz3R&#x27;, &#x27;DYxJoqZq2rd7&#x27;, &#x27;aaabbbccccxuxuxuxuuxux&#x27;, 1449567822);</span><br></pre></td></tr></table></figure>
<h1 id="索引的创建"><a href="#索引的创建" class="headerlink" title="索引的创建"></a>索引的创建</h1><h2 id="单例索引"><a href="#单例索引" class="headerlink" title="单例索引"></a>单例索引</h2><ol>
<li>普通索引</li>
</ol>
<p>是最基本的索引。</p>
<p>其 sql 格式是 :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE INDEX IndexName ON `TableName`(`字段名`(length));</span><br></pre></td></tr></table></figure>
<p> # 或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE TableName ADD INDEX IndexName(`字段名`(length));</span><br></pre></td></tr></table></figure>
<p>第一种方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE INDEX account_Index ON `award`(`account`);</span><br></pre></td></tr></table></figure>
<p>第二种方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE award ADD INDEX account_Index(`account`);</span><br></pre></td></tr></table></figure>
<p>如果是 CHAR , VARCHAR 类型, length 可以小于字段的实际长度,如果是BLOB和TEXT类型就必须指定长度。</p>
<ol>
<li>唯一索引，与普通索引类似，但是不同的是唯一索引要求所有的列的值是唯一的，这一点和主键索引一样，但是它允许有空值。</li>
</ol>
<p>其 sql 格式是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE UNIQUE INDEX IndexName ON `TableName`(`字段名`(length));</span><br></pre></td></tr></table></figure>
<p> # 或者</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE TableName ADD UNIQUE (column_list); </span><br></pre></td></tr></table></figure>
<p>第一种方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE UNIQUE INDEX account_UNIQUE_Index ON `award`(`account`);</span><br></pre></td></tr></table></figure>
<ol>
<li>主键索引，不允许有空值,（在     B+Tree 中的 InnoDB 引擎中，主键索引起到了至关重要的位置）</li>
</ol>
<p>主键索引建立的规则是 int 优于 varchar，一般在建表的时候创建，最好是与表的其他字段不相关的列或者是业务不相关的列。一般会设为 int 而且是 AUTO_INCREMENT 自增类型的。</p>
<h2 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h2><p>一个表中含有多个单例索引不代表是组合索引，通俗一点讲，组合索引是：包含多个字段但是只有索引名称。</p>
<p>其 sql 格式是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE INDEX nickname_account_createdTime_Index ON `award`(`nickname`, `account`, `created_time`);</span><br></pre></td></tr></table></figure>
<p>如果你建立了组合索引 (nickname_account_createdTime_Index)，那么它实际包含的是 3 个索引 (nickname) (nickname,account)(nickname,account,created_time)</p>
<p>在使用查询的时候遵循 mysql 组合索引的 “最左前缀”，即索引 where 时的条件要按照建立索引的时候字段的排列方式。</p>
<ol>
<li>不按索引最左列开始查询（多列索引）     例如</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index(‘c1’, ‘c2’, ‘c3’) where c2 = &#x27;aaa&#x27; # 不使用索引</span><br><span class="line">where c2 = &#x27;aaa&#x27; and c3=&#x27;sss&#x27; # 不能使用索引</span><br></pre></td></tr></table></figure>
<ol>
<li>查询某个列有范围查询，则其右边的所有列都无法使用查询（多列查询）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Where c1= &#x27;xxx&#x27; and c2 like &#x27;aa%&#x27; and c3=&#x27;sss&#x27;</span><br></pre></td></tr></table></figure>
<p> # 该查询只会使用索引中的前两列,因为like是范围查询</p>
<ol>
<li>不能跳过某个字段来进行查询，这样利用不到索引，比如：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM `award` WHERE nickname &gt; &#x27;rSUQFzpkDz3R&#x27; AND account = &#x27;DYxJoqZq2rd7&#x27; AND created_time = 1449567822; </span><br></pre></td></tr></table></figure>
<p>因为我的索引是 (nickname, account, created_time)，如果第一个字段出现 范围符号 的查找，那么将不会用到索引，如果我是第二个或者第三个字段使用范围符号的查找，那么它会利用索引，利用的索引是 (nickname)，因为上面说了建立组合索引 (nickname, account, created_time)，会出现三个索引。</p>
<h2 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h2><p>文本字段上（text）如果建立的是普通索引，那么只有对文本的字段内容前面的字符进行索引，其字符大小根据索引建立索引时声明的大小来规定。</p>
<p>如果文本中出现多个一样的字符，而且需要查找的话，那么其条件只能是 where column like ‘%xxxx%’， 这样做会让索引失效</p>
<p>这个时候全文索引就有作用了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE TableName ADD FULLTEXT(column1, column2);</span><br><span class="line"></span><br><span class="line">ALTER TABLE `award` ADD FULLTEXT(`message`);</span><br></pre></td></tr></table></figure>
<p>有了全文索引，就可以用 SELECT 查询命令去检索那些包含着一个或多个给定单词的数据记录了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM TableName WHERE MATCH(column1, column2) AGAINST(&#x27;xxx&#x27;, &#x27;sss&#x27;, &#x27;ddd&#x27;);</span><br><span class="line"></span><br><span class="line"> EXPLAIN SELECT * FROM `award` WHERE MATCH(message) AGAINST(&#x27;aaa&#x27;);</span><br></pre></td></tr></table></figure>
<p>上述命令将把 column1 和 column2 字段里有 xxx、sss、和 ddd 的数据记录全部查询出来。</p>
<h1 id="索引的删除"><a href="#索引的删除" class="headerlink" title="索引的删除"></a>索引的删除</h1><ul>
<li>查询索引</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW INDEX FROM TableName;</span><br><span class="line"></span><br><span class="line">SHOW INDEX FROM award;</span><br></pre></td></tr></table></figure>
<ul>
<li>删除索引</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP INDEX IndexName ON `TableName`;</span><br></pre></td></tr></table></figure>
<h1 id="使用索引的优点"><a href="#使用索引的优点" class="headerlink" title="使用索引的优点"></a>使用索引的优点</h1><p>1）可以通过建立唯一索引或者主键索引，保证数据库表中每一行数据的唯一性</p>
<p>2）建立索引可以大大提高检索的数据，以及减少表的检索行数</p>
<p>3）在表连接的连接条件，可以加速表与表直接的相连</p>
<p>4）在分组和排序字句进行数据检索，可以减少查询时间中 分组 和 排序 所消耗的时间（数据库的记录会重新排序）</p>
<p>5）建立索引，在查询中使用索引，可以提高性能</p>
<h1 id="使用索引的缺点"><a href="#使用索引的缺点" class="headerlink" title="使用索引的缺点"></a>使用索引的缺点</h1><p>1）创建索引和维护索引会消耗时间，随着数据量的增加而增加</p>
<p>2）索引文件会占用物理空间，除了数据表需要占用物理空间之外，每一个索引还会占用一定的物理空间</p>
<p>3）当对表的数据进行 INSERT,UPDATE,DELETE 的时候,索引也要动态的维护,这样就会降低数据的维护速度,(建立索引会占用磁盘空间的索引文件。一般情况这个问题不太严重，但如果你在一个大表上创建了多种组合索引，索引文件的会膨胀很快)。</p>
<h1 id="使用索引需要注意的地方"><a href="#使用索引需要注意的地方" class="headerlink" title="使用索引需要注意的地方"></a>使用索引需要注意的地方</h1><p>在建立索引的时候应该考虑索引该建立在数据库表中的某些列上，哪一些索引需要建立，哪一些索引是多余的，一般来说：</p>
<p>1）在经常需要搜索的列上,可以加快索引的速度</p>
<p>2）主键列上可以确保列的唯一性</p>
<p>3）在表与表的连接条件上加上索引,可以加快连接查询的速度</p>
<p>4）在经常需要排序 (order by) ,分组 (group by) 和的 distinct 列上加索引 可以加快排序查询的时间, (单独order by 用不了索引，索引考虑加where 或加limit)</p>
<p>5）在一些 where 之后的 &lt; &lt;= &gt; &gt;= BETWEEN IN 以及某个情况下的like 建立字段的索引(B-TREE)</p>
<p>6）like语句，前导模糊查询 like “%XXX” 不能使用索引，而非前导模糊查询 like “XXX%” 则可以</p>
<p>7）索引不会包含 NULL 列,如果列中包含 NULL 值都将不会被包含在索引中,复合索引中如果有一列含有NULL值那么这个组合索引都将失效,一般需要给默认值0或者 ‘ ‘ 字符串</p>
<p>8）使用短索引,如果你的一个字段是 Char(32) 或者 int(32) ,在创建索引的时候指定前缀长度 比如前10个字符 (前提是多数值是唯一的..)那么短索引可以提高查询速度,并且可以减少磁盘的空间,也可以减少I/0操作.</p>
<p>9）不要在列上进行运算,这样会使得mysql索引失效,也会进行全表扫描</p>
<p>10）选择越小的数据类型越好,因为通常越小的数据类型通常在磁盘,内存,cpu,缓存中 占用的空间很少,处理起来更快</p>
<h1 id="不创建索引的情况"><a href="#不创建索引的情况" class="headerlink" title="不创建索引的情况"></a>不创建索引的情况</h1><p>1）查询中很少使用到的列不应该创建索引,如果建立了索引然而还会降低mysql的性能和增大了空间需求.</p>
<p>2）很少数据的列也不应该建立索引,比如 一个性别字段 0或者1,在查询中,结果集的数据占了表中数据行的比例比较大,mysql需要扫描的行数很多,增加索引,并不能提高效率</p>
<p>3）定义为 text 和 image 和 bit 数据类型的列不应该增加索引</p>
<p>4）当表的修改(UPDATE,INSERT,DELETE)操作远远大于检索(SELECT)操作时不应该创建索引,这两个操作是互斥的关系</p>
<h1 id="MySQL的索引优化"><a href="#MySQL的索引优化" class="headerlink" title="MySQL的索引优化"></a>MySQL的索引优化</h1><ul>
<li>负向条件不能使用索引</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from order where status!=0 and status!=1</span><br><span class="line"></span><br><span class="line">not in/not exists # 都不是好习惯</span><br></pre></td></tr></table></figure>
<p>可以优化为 in 查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from order where status in(2,3)</span><br></pre></td></tr></table></figure>
<ul>
<li>前导模糊查询不能使用索引</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from order where desc like &#x27;%XX&#x27;</span><br></pre></td></tr></table></figure>
<p>而非前导模糊查询则可以：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from order where desc like &#x27;XX%&#x27;</span><br></pre></td></tr></table></figure>
<ul>
<li>数据区分度不大的字段不宜使用索引</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from user where sex=1</span><br></pre></td></tr></table></figure>
<p>原因：性别只有男，女，每次过滤掉的数据很少，不宜使用索引。</p>
<p>经验上，能过滤80%数据时就可以使用索引。对于订单状态，如果状态值很少，不宜使用索引，如果状态值很多，能够过滤大量数据，则应该建立索引。</p>
<ul>
<li>在属性上进行计算不能命中索引</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from order_ where YEAR(date) &lt;= &#x27;2017&#x27;</span><br></pre></td></tr></table></figure>
<p>即使 date 上建立了索引，也会全表扫描，可优化为值计算：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from order_ where date &lt;= CURDATE()</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from order_ where date &lt; = &#x27;2017-01-01&#x27;</span><br></pre></td></tr></table></figure>
<p><strong>并非周知的 SQL 实践</strong></p>
<ul>
<li>如果业务大部分是单条查询，使用     Hash 索引性能更好，例如用户中心</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from `user` where uid = ?</span><br><span class="line"> select from user where login_name=?</span><br></pre></td></tr></table></figure>
<p>原因：B-Tree索引的时间复杂度是 O(log(n))；Hash 索引的时间复杂度是 O(1)</p>
<ul>
<li>允许 null的列，查询有潜在大坑</li>
</ul>
<p>单列索引不存 null 值，复合索引不存全为 null 的值，如果列允许为 null，可能会得到“不符合预期”的结果集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from user where name != &#x27;shenjian&#x27;</span><br></pre></td></tr></table></figure>
<p>如果 name 允许为 null，索引不存储null值，结果集中不会包含这些记录。所以，请使用 not null 约束以及默认值。</p>
<ul>
<li>复合索引最左前缀，并不是指 SQL     语句的 where顺序要和符合索引一致。</li>
</ul>
<p>用户中心建立了 (login_name, password) 的符合索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from user where login_name=? and passwd=?</span><br><span class="line"> select from user where passwd=? and login_name=?</span><br></pre></td></tr></table></figure>
<p>都能够命中索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from user where login_name=?</span><br></pre></td></tr></table></figure>
<p>也能命中索引，满足符合索引最左前缀</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from user where passwd=?</span><br></pre></td></tr></table></figure>
<p>不能命中索引，不满足符合索引最左前缀。</p>
<ul>
<li>使用 ENUM 而不是字符串</li>
</ul>
<p>ENUM 保存的是 TINYINT，别在枚举中搞一些“中国”“北京”“技术部”这样的字符串，字符串空间又大，效率又低。</p>
<p><strong>小众但有用的 SQL 实践</strong></p>
<ul>
<li>如果明确知道只有一条结果返回，limit     1 能够提高效率</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from user where login_name=?</span><br></pre></td></tr></table></figure>
<p>可以优化为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from user where login_name=? limit 1</span><br></pre></td></tr></table></figure>
<p>原因：你知道只有一条结果，但数据库并不知道，明确告诉它，让它主动停止游标移动</p>
<ul>
<li>把计算放到业务层而不是数据库层，除了节省数据的     CPU，还有意想不到的查询缓存优化效果</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from order where date &lt; = CURDATE()</span><br></pre></td></tr></table></figure>
<p>这不是一个号的 SQL 实践，应该优化为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$curDate = date(&#x27;Y-m-d&#x27;);</span><br><span class="line"> $res = mysqlquery(&#x27;select from order where date &lt; = $curDate&#x27;);</span><br></pre></td></tr></table></figure>
<p>原因：释放了数据库的 CPU，多次调用，传入的SQL相同，才可以利用查询缓存</p>
<ul>
<li>强制类型转换会全表扫描</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select from user where phone=13800001234</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>请教我学操作系统（二）IO多路复用技术</title>
    <url>/posts/3e93542c.html</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><font size=3>

<ol>
<li><p>服务器端编程经常需要构造高性能的IO模型，常见的IO模型有四种：</p>
<p>（1）同步阻塞IO（Blocking IO）：即传统的IO模型。</p>
<p>（2）同步非阻塞IO（Non-blocking IO）：默认创建的socket都是阻塞的，非阻塞IO要求socket被设置为NONBLOCK。注意这里所说的NIO并非Java的NIO（New IO）库。</p>
<p>（3）IO多路复用（IO Multiplexing）：即经典的Reactor设计模式，有时也称为异步阻塞IO，Java中的Selector和Linux中的epoll都是这种模型。</p>
<p>（4）异步IO（Asynchronous IO）：即经典的Proactor设计模式，也称为异步非阻塞IO。</p>
</li>
</ol>
<p>   <strong>同步和异步</strong>的概念描述的是用户线程与内核的交互方式：同步是指<strong>用户线程发起IO请求后需要等待或者轮询内核IO操作完成后才能继续执行</strong>；而异步是指用户线程发起IO请求后仍继续执行，当内核IO操作完成后会通知用户线程，或者调用用户线程注册的回调函数。</p>
<p>   <strong>阻塞和非阻塞</strong>的概念描述的是用户线程调用内核IO操作的方式：<strong>阻塞是指IO操作需要彻底完成后才返回到用户空间</strong>；而非阻塞是指IO操作被调用后立即返回给用户一个状态值，无需等到IO操作彻底完成。</p>
<h1 id="同步阻塞"><a href="#同步阻塞" class="headerlink" title="同步阻塞"></a>同步阻塞</h1><p>同步阻塞IO模型是最简单的IO模型，用户线程在内核进行IO操作时被阻塞。</p>
<p> <img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210404095213.png" alt=""></p>
<h1 id="同步非阻塞IO"><a href="#同步非阻塞IO" class="headerlink" title="同步非阻塞IO"></a>同步非阻塞IO</h1><p>同步非阻塞IO是在同步阻塞IO的基础上，将socket设置为NONBLOCK。这样做用户线程可以在发起IO请求后可以立即返回。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210404095300.png" alt=""></p>
<p>整个IO请求的过程中，虽然用户线程每次发起IO请求后可以立即返回，但是为了等到数据，仍需要<strong>不断地轮询、重复请求</strong>，消耗了大量的CPU的资源。一般很少直接使用这种模型，而是在其他IO模型中使用非阻塞IO这一特性。</p>
<h1 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h1><p>流程上来看，使用select函数进行IO请求和同步阻塞模型没有太大的区别，甚至还多了添加监视socket，以及调用select函数的额外操作，效率更差。但是，使用select以后最大的优势是用户可以在一个线程内同时处理多个socket的IO请求。用户可以注册多个socket，然后不断地调用select读取被激活的socket，即可达到在同<strong>一个线程内同时处理多个IO请求的目的</strong>。而在同步阻塞模型中，必须通过多线程的方式才能达到这个目的。</p>
<p> <img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210404095402.png" alt=""></p>
<p>通过Reactor的方式，可以将用户线程轮询IO操作状态的工作统一交给handle_events事件循环进行处理。用户线程注册事件处理器之后可以继续执行做其他的工作（异步），而<strong>Reactor线程负责调用内核的select函数检查socket状态</strong>。当有socket被激活时，则通知相应的用户线程（或执行用户线程的回调函数），执行handle_event进行数据读取、处理的工作。由于select函数是阻塞的，因此多路IO复用模型也被称为异步阻塞IO模型。注意，这里的所说的阻塞是指select函数执行时线程被阻塞，而不是指socket。一般在使用IO多路复用模型时，socket都是设置为NONBLOCK的，不过这并不会产生影响，因为用户发起IO请求时，数据已经到达了，用户线程一定不会被阻塞。</p>
<h1 id="异步IO"><a href="#异步IO" class="headerlink" title="异步IO"></a>异步IO</h1><p>“真正”的异步IO需要操作系统更强的支持。在IO多路复用模型中，事件循环将文件句柄的状态事件通知给用户线程，由用户线程自行读取数据、处理数据。而在异步IO模型中，当用户线程收到通知时，数据已经被内核读取完毕，并放在了用户线程指定的缓冲区内，内核在IO完成后通知用户线程直接使用即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210404095443.png" alt=""></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>IO</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>请教我学操作系统（一）进线程与内存管理</title>
    <url>/posts/d5d6861e.html</url>
    <content><![CDATA[<h2 id="什么是操作系统"><a href="#什么是操作系统" class="headerlink" title="什么是操作系统"></a>什么是操作系统</h2><ol>
<li><p>操作系统是管理计算机软硬件资源的程序，是计算机的基石。</p>
</li>
<li><p>本质上是一个应用程序。</p>
</li>
<li><p>操作系统的存在屏蔽了硬件设备的复杂性，由操作系统统一管理和分配。</p>
</li>
<li><p>内核是操作系统的核心部分。负责系统的内存管理，硬件设备管理，文件系统管理和应用程序管理。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210327105916.png" alt=""></p>
</li>
</ol>
<h1 id="什么是系统调用"><a href="#什么是系统调用" class="headerlink" title="什么是系统调用"></a>什么是系统调用</h1><p>用户态：该状态运行的进程可以直接读取用户程序的数据。</p>
<p>系统态：该状态运行的进程或程序可以访问计算机任意资源。</p>
<p>程序运行在用户态时想要调用操作系统提供的系统态子功能时需要进行系统调用。</p>
<p>系统调用按功能大致分为：</p>
<p><strong>设备管理</strong>。完成设备的请求或释放，以及设备启动等功能。</p>
<p><strong>⽂件管理</strong>。完成⽂件的读、写、创建及删除等功能。</p>
<p><strong>进程控制</strong>。完成进程的创建、撤销、阻塞及唤醒等功能。</p>
<p><strong>进程通信</strong>。完成进程之间的消息传递或信号传递等功能。</p>
<p><strong>内存管理</strong>。完成内存的分配、回收以及获取作业占⽤内存区⼤⼩及地址等功能。</p>
<h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><ol>
<li>区别：线程时进程划分成的更小的运行单位。进程之间基本相互独立，而线程之间可能相互影响。线程执行开销小，但不利于资源的管理和保护，而进程则相反。</li>
</ol>
<ol>
<li><p>进程的状态：</p>
<p>创建状态<strong>(new)</strong> ：进程正在被创建，尚未到就绪状态。</p>
<p>就绪状态<strong>(ready)</strong> ：进程已处于准备运⾏状态，即进程获得了除了处理器之外的⼀切所需资</p>
<p>源，⼀旦得到处理器资源(处理器分配的时间⽚)即可运⾏。</p>
<p>运⾏状态<strong>(running)</strong> ：进程正在处理器上上运⾏(单核 CPU 下任意时刻只有⼀个进程处于运</p>
<p>⾏状态)。</p>
<p>阻塞状态<strong>(waiting)</strong> ：⼜称为等待状态，进程正在等待某⼀事件⽽暂停运⾏如等待某资源为</p>
<p>可⽤或等待 IO 操作完成。即使处理器空闲，该进程也不能运⾏。</p>
<p>结束状态<strong>(terminated)</strong> ：进程正在从系统中消失。可能是进程正常结束或其他原因中断退出运⾏。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210327110050.png" alt=""></p>
</li>
<li><p>进程间的通信方式：</p>
<p>（1）管道（匿名管道）：用于有情缘关系的进程。</p>
<p>（2）有名管道： 任意进程，先进先出。</p>
<p>（3） 信号： 通知接收进程某个事件已经发生。</p>
<p>（4） 消息队列： 存放在内核中。克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限的缺陷。</p>
<p>（5） 信号量：计数器，多进程对共享数据的访问。进程间同步。</p>
<p>（6） 共享内存： 多个进程访问同一快内存空间</p>
<p>（7）套接字：用于客户端和服务器之间通过网络进行通信。</p>
</li>
</ol>
<ol>
<li><p>线程间的同步方式：</p>
<p>（1） 互斥量</p>
<p>（2） 信号量：允许同⼀时刻多个线程访问同⼀资源，但是需要控制同⼀时刻访问此资源的最⼤线程数量</p>
<p>（3） 事件：通过通知操作的⽅式来保持多线程同步，还可以⽅便的实现多线程优先级的⽐较操做</p>
</li>
</ol>
<ol>
<li><p>进程的调度算法：</p>
<p>（1） 先到先服务（FCFS）</p>
<p>（2） 短作业优先（SJF）</p>
<p>（3） 时间片轮转</p>
<p>（4） 多级反馈队列调度算法：多级反馈队列调度算法既能使⾼优先级的作业得到响应⼜能使短作业（进程）迅速完成。，因⽽它是⽬前被公认的⼀种较好的进程调度算法</p>
<p>（5）优先级调度：同一优先级采用FCFS调度</p>
</li>
</ol>
<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><h2 id="常见的内存管理机制"><a href="#常见的内存管理机制" class="headerlink" title="常见的内存管理机制"></a>常见的内存管理机制</h2><ol>
<li><p>连续分配管理方式：为⼀个⽤户程序分配⼀个连续的内存空间 </p>
<p>（1）块式管理：在每个块中未被利⽤的空间，我们称之为碎⽚ </p>
</li>
<li><p>非连续分配管理方式：允许⼀个程序使⽤的内存分布在离散或者说不相邻的内存中 </p>
<p>（1）页式管理：主存分为⼤⼩相等且固定的⼀⻚⼀⻚的形式 ，通过⻚表对应逻辑地址和物理地址</p>
<p>（2）段式管理：段式管理把主存分为⼀段段的，每⼀段的空间⼜要⽐⼀⻚的空间⼩很多 。段式管理通过段表对应逻辑地址和物理地址 。</p>
<p>（3）段页式管理：结合了段式管理和⻚式管理的优点。简单来说段⻚式管理机制就是把主存先分成若⼲段，每个段⼜分成若⼲⻚，也就是说 段⻚式管理机制 中段与段之间以及段的内部的都是离散的 </p>
</li>
</ol>
<h2 id="快表和多级页表"><a href="#快表和多级页表" class="headerlink" title="快表和多级页表"></a>快表和多级页表</h2><p>在分⻚内存管理中，很重要的两点是：</p>
<ol>
<li><p>虚拟地址到物理地址的转换要快。</p>
</li>
<li><p>解决虚拟地址空间⼤，⻚表也会很⼤的问题。</p>
</li>
</ol>
<p>快表：把快表理解为⼀种特殊的⾼速缓冲存储器（Cache），其中的内容是⻚表的⼀部分或者全部内容。 采⽤⻚表做地址转换，读写内存数据时 CPU 要访问两次主存。有了快表，有时只要访问⼀次⾼速缓冲存储器，⼀次主存，这样可加速查找并提⾼指令执⾏速度 。</p>
<p>快表的地址转换流程：</p>
<ol>
<li><p>根据虚拟地址中的⻚号查快表；</p>
</li>
<li><p>如果该⻚在快表中，直接从快表中读取相应的物理地址；</p>
</li>
<li><p>如果该⻚不在快表中，就访问内存中的⻚表，再从⻚表中得到物理地址，同时将⻚表中的该</p>
</li>
</ol>
<p>映射表项添加到快表中；</p>
<ol>
<li>当快表填满后，⼜要登记新⻚时，就按照⼀定的淘汰策略淘汰掉快表中的⼀个⻚。</li>
</ol>
<p>多级页表：引⼊多级⻚表的主要⽬的是为了避免把全部⻚表⼀直放在内存中占⽤过多空间，特别是那些根本就不需要的⻚表就不需要保留在内存中。多级⻚表属于时间换空间的典型场景。 </p>
<h2 id="分页机制和分段机制的异同"><a href="#分页机制和分段机制的异同" class="headerlink" title="分页机制和分段机制的异同"></a>分页机制和分段机制的异同</h2><ol>
<li><p>共同点：</p>
<p>（1）分⻚机制和分段机制都是为了提⾼内存利⽤率，减少内存碎⽚。</p>
<p>（2）⻚和段都是离散存储的，所以两者都是离散分配内存的⽅式。但是，每个⻚和段中的内存是连续的 </p>
</li>
<li><p>不同点：</p>
<p>（1）⻚的⼤⼩是固定的，由操作系统决定；⽽段的⼤⼩不固定，取决于我们当前运⾏程序。</p>
<p>（2）分⻚仅仅是为了满⾜操作系统内存管理的需求，⽽段是逻辑信息的单位，在程序中可以体现为代码段，数据段，能够更好满⾜⽤户的需要。 </p>
</li>
</ol>
<h2 id="逻辑（虚拟地址）和物理地址"><a href="#逻辑（虚拟地址）和物理地址" class="headerlink" title="逻辑（虚拟地址）和物理地址"></a>逻辑（虚拟地址）和物理地址</h2><p>   指针⾥⾯存储的数值就可以理解成为内存⾥的⼀个地址，这个地址也就是我们说的逻辑地址，逻辑地址由操作系统决定。物理地址指的是真实物理内存中地址，更具体⼀点来说就是内存地址寄存器中的地址。物理地址是内存单元真正的地址。</p>
<h2 id="CPU寻址，为什么需要虚拟地址空间"><a href="#CPU寻址，为什么需要虚拟地址空间" class="headerlink" title="CPU寻址，为什么需要虚拟地址空间"></a>CPU寻址，为什么需要虚拟地址空间</h2><p>使⽤虚拟寻址， <strong>CPU</strong>需要将<strong>虚拟地址翻译成物理地址**</strong>（由<strong><strong>CPU</strong></strong>中内存管理单元硬件完成）**，这样才能访问到真实的物理内存。 </p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210327110407.png" alt=""></p>
<p>为什么要有虚拟地址空间：没有时，程序直接访问操作物理内存。可能造成操作系统崩溃，运行多个程序特别困难。</p>
<p><strong>通过虚拟地址访问内存有以下优势：</strong></p>
<p>程序可以使⽤⼀系列<strong>相邻的虚拟地址</strong>来访问<strong>物理内存中不相邻</strong>的⼤内存缓冲区。</p>
<p>程序可以使⽤⼀系列虚拟地址来访问<strong>⼤于可⽤物理内存的内存缓冲区</strong>。当物理内存的供应量变⼩时，内存管理器会将物理内存⻚（通常⼤⼩为 4 KB）保存到磁盘⽂件。数据或代码⻚会根据需要在物理内存与磁盘之间移动。</p>
<p>不同进程使⽤的<strong>虚拟地址彼此隔离</strong>。⼀个进程中的代码⽆法更改正在由另⼀进程或操作系统使⽤的物理内存。</p>
<h2 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h2><h3 id="什么是虚拟内存"><a href="#什么是虚拟内存" class="headerlink" title="什么是虚拟内存"></a>什么是虚拟内存</h3><p>虚拟内存 可以让程序可以拥有超过系统物理内存⼤⼩的可⽤内存空间。另外， 虚拟内存为每个进程提供了⼀个⼀致的、私有的地址空间，它让每个进程产⽣了⼀种⾃⼰在独享主存的错觉（每个进程拥有⼀⽚连续完整的内存空间） 。 </p>
<p>虚拟内存的重要意义是它定义了⼀个连续的虚拟地址空间，并且 把内存扩展到硬盘空间。 </p>
<h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><p>虚拟内存技术的基础，正是因为程序运⾏具有局部性原理，才可以只装⼊部分程序到内存就开始运⾏。 </p>
<ol>
<li>时间局部性 ：如果程序中的某条指令⼀旦执⾏，不久以后该指令可能再次执⾏；如果某数据被访问过，不久以后该数据可能再次被访问。产⽣时间局部性的典型原因，是由于在程序中存在着⼤量的循环操作。</li>
<li>空间局部性 ：⼀旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问，即程序在⼀段时间内所访问的地址，可能集中在⼀定的范围之内，这是因为指令通常是顺序存放、顺序执⾏的，数据也⼀般是以向量、数组、表等形式簇聚存储的。     </li>
</ol>
<p>时间局部性是通过将近来使⽤的指令和数据保存到⾼速缓存存储器中，并使⽤⾼速缓存的层次结构实现。空间局部性通常是使⽤较⼤的⾼速缓存，并将预取机制集成到⾼速缓存控制逻辑中实现。虚拟内存技术实际上就是建⽴了 “内存⼀外存”的两级存储器的结构，利⽤局部性原理实现髙速缓存。 </p>
<h3 id="虚拟内存的技术实现"><a href="#虚拟内存的技术实现" class="headerlink" title="虚拟内存的技术实现"></a>虚拟内存的技术实现</h3><p>建⽴在离散分配的内存管理⽅式的基础上 </p>
<ol>
<li><p>请求分⻚存储管理 ：建⽴在分⻚管理之上，为了⽀持虚拟存储器功能⽽增加了请求调⻚功能和⻚⾯置换功能。 </p>
</li>
<li><p>请求分段存储管理 ：建⽴在分段存储管理之上，增加了请求调段功能、分段置换功能。 </p>
</li>
<li>请求段⻚式存储管理     </li>
</ol>
<p>补充：</p>
<p>缺⻚中断：如果需执⾏的指令或访问的数据尚未在内存 称为缺⻚或缺段），则由处理器通</p>
<p>知操作系统将相应的⻚⾯或段调⼊到内存，然后继续执⾏程序 。</p>
<h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><p>⻚⾯置换算法的作⽤<strong>?</strong>常⻅的⻚⾯置换算法有哪些 ？</p>
<p>当发⽣缺⻚中断时，如果当前内存中并没有空闲的⻚⾯，操作系统就必须在内存选择⼀个⻚⾯将其移出内存，以便为即将调⼊的⻚⾯让出空间。 </p>
<ol>
<li>OPT（最佳页面置换算法）：换出后续永不会再用到的页面，只在理论上存在。</li>
<li>FIFO</li>
<li>LRU（最近最久未使用页面置换算法）</li>
<li>LFU（最少使用页面置换算法）</li>
</ol>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>线程</tag>
        <tag>进程</tag>
        <tag>虚拟内存</tag>
        <tag>内存管理</tag>
      </tags>
  </entry>
  <entry>
    <title>请教我学设计模式（一）单例模式的常用实现方法</title>
    <url>/posts/b2ef857.html</url>
    <content><![CDATA[<h1 id="单例模式是什么？"><a href="#单例模式是什么？" class="headerlink" title="单例模式是什么？"></a>单例模式是什么？</h1><font size = 3>

<p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时<strong>确保只有单个对象被创建</strong>。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
<h1 id="单例模式实现方式"><a href="#单例模式实现方式" class="headerlink" title="单例模式实现方式"></a>单例模式实现方式</h1><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p>类加载的时候就创建了实例<br>优点：类加载的时候创建一次实例，避免了多线程同步问题</p>
<p>缺点：即使单例没被用到也会创建，浪费内存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><h3 id="非线程安全"><a href="#非线程安全" class="headerlink" title="非线程安全"></a>非线程安全</h3><p>优点：需要时才去创建<br>缺点：没有考虑线程安全问题，多个线程并发调用getInstance，可能会创建多个实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>缺点：性能问题，添加了synchronized的函数比一般方法慢得多，若多次调用getInstance，则累积的性能损耗特别大。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Synchronized Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双重校验锁"><a href="#双重校验锁" class="headerlink" title="双重校验锁"></a>双重校验锁</h2><p>大部分情况下，同步代码块都不会执行到，提高了程序的性能。</p>
<p>有一种情况，两个线程ThreadA，ThreadB，如果threadA执行到了第一个if条件判断，instance = null；ThreadB也执行到了if条件判断instance = null，所以A和B会依次执行同步代码块里的代码。为了避免创建两个实例，因此又在同步代码块里添加了if条件进行二重检验。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>隐患：</p>
<p>1、此处涉及Java的指令重排优化。指令重排优化是指在不改变原语义的情况下，通过调整指令的执行顺序让程序运行地更快。</p>
<p>2、JVM中没有规定编译器优化的相关内容，也即JVM可以自由地进行指令重排序的优化。</p>
<p>3、此问题的关键在于由于指令重排序优化的存在，导致初始化Singleton和将对象地址赋给instance字段的顺序是不确定的。</p>
<p>4、在某个线程创建单例对象时，在构造函数被调用前，就为该对象分配了内存空间并将对象的字段设置为默认值。此时就可以将分配的内存地址赋值给instance字段了，然而该对象可能还没初始化。若紧接着另一个线程来调用getInstance，获取到的就是状态不正确的对象，程序出错。</p>
<p>JDK5的修正：以上是双重校验锁失效的原因，不过在JDK1.5之后的版本添加了volatile关键字。</p>
<p>1、volatile的一个语义是禁止指令重排序优化，也就保证了instance变量被赋值的时候对象已经是初始化过的，从而避免了上述问题。</p>
<p>2、Java中的volatile变量是什么？</p>
<p>（1）关键字的作用有两个：</p>
<p>​      ①多线程主要围绕可见性和原子性两个特性展开，使用volatile关键字修饰的变量，保证了其在多线程之间的可见性，即每次读取到的volatile变量，一定是最新的数据。</p>
<p>​     ②代码底层执行的顺序是Java代码—&gt;字节码—&gt;根据字节码执行对应的C/C++代码—&gt;C/C++代码被编译成汇编语言—&gt;和硬件电路交互。实际中，为了获取更好的性能，JVM可能会对指令进行重排序，多线程下可能会出现一些意想不到的问题。使用volatile则会禁止语义重排序，也一定程度上降低了代码执行效率。实践角度而言，volatile的一个重要作用就是和CAS结合，保证了原子性。</p>
<p>   （2）volatile是一个特殊的修饰符，只有成员变量才能使用它。在Java并发程序缺少同步类的情况下，多线程对成员变量的操作对其他线程是透明的。volatile变量可以保证下一个读取操作会在前一个写操作之后发生。<br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> instance; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>单例</tag>
      </tags>
  </entry>
  <entry>
    <title>请教我学MySQL（一）乐观锁vs悲观锁</title>
    <url>/posts/688743a7.html</url>
    <content><![CDATA[<h1 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h1><font size = 3>

<p>当要对数据库中的一条数据进行修改的时候，为了避免同时被其他人修改，最好的办法就是直接对该数据进行加锁以防止并发。这种借助数据库锁机制，在修改数据之前先锁定，再修改的方式被称之为悲观并发控制【Pessimistic Concurrency Control，缩写“PCC”，又名“悲观锁”】。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210330102059.png" alt=""></p>
<p>之所以叫做悲观锁，是因为这是一种对数据的修改持有悲观态度的并发控制方式。总是<strong>假设最坏的情况</strong>，每次读取数据的时候都默认其他线程会更改数据，因此需要进行加锁操作，当其他线程想要访问数据时，都需要阻塞挂起。悲观锁的实现：</p>
<ol>
<li>传统的关系型数据库使用这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</li>
<li>Java 里面的同步 synchronized]关键字的实现。</li>
</ol>
<p><strong>悲观锁分为共享（读）锁和排他（写）锁</strong></p>
<p><strong>共享锁</strong>【shared locks】又称为读锁，简称S锁。顾名思义，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。</p>
<p><strong>排他锁</strong>【exclusive locks】又称为写锁，简称X锁。顾名思义，排他锁就是不能与其他锁并存，如果一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据行读取和修改。</p>
<h1 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h1><p>乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况下不会造成冲突，所以在<strong>数据进行提交更新的时候，才会正式对数据的冲突与否进行检测</strong>，如果发现冲突了，则返回给用户错误的信息，让用户决定如何去做。乐观锁适用于读操作多的场景，这样可以提高程序的吞吐量。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210330102206.png" alt=""></p>
<p>乐观锁机制采取了更加宽松的加锁机制。乐观锁是相对悲观锁而言，也是为了避免数据库幻读、业务处理时间过长等原因引起数据处理错误的一种机制，但乐观锁不会刻意使用数据库本身的锁机制，而是依据数据本身来保证数据的正确性。乐观锁的实现：</p>
<ol>
<li>CAS 实现：Java 中java.util.concurrent.atomic包下面的原子变量使用了乐观锁的一种 CAS 实现方式。</li>
<li>版本号控制：一般是在数据表中加上一个数据版本号 version 字段，表示数据被修改的次数。当数据被修改时，version 值会+1。当线程A要更新数据值时，在读取数据的同时也会读取 version 值，在提交更新时，若刚才读取到的 version 值与当前数据库中的 version 值相等时才更新，否则重试更新操作，直到更新成功。</li>
</ol>
<p> 乐观并发控制相信事务之间的数据竞争(data race)的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁和死锁。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring(一)简介与IOC</title>
    <url>/posts/d2becbdd.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>分布的Java SE/EE应用full-stack<strong>轻量级</strong>开源框架，以<strong>IOC**</strong>（<strong><strong>Inverse of control</strong></strong>反转控制）<strong>和</strong>AOP<strong><strong>（</strong></strong>Aspect oriented programming<strong>**面向切片编程）</strong>为内核。</p>
<h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><p>（1） 方便解耦，简化开发</p>
<p>（2）AOP编程的支持</p>
<p>（3）声明式事务的支持</p>
<p>（4）方便程序的测试</p>
<p>（5）方便集成各种优秀框架</p>
<p>（6）降低Java EE中API的使用难度</p>
<h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519104709.png" alt=""></p>
<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="Spring程序开发步骤"><a href="#Spring程序开发步骤" class="headerlink" title="Spring程序开发步骤"></a>Spring程序开发步骤</h2><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519104749.png" alt=""></p>
<p>（1）导入Spring开发的基本包坐标</p>
<p>（2）编写Dao接口和实现类</p>
<p>（3）创建Spring核心配置文件</p>
<p>（4）在Spring配置文件中配置UserDaoImpl</p>
<p>（5）使用Spring中的API获得Bean实例</p>
<h1 id="Spring配置文件"><a href="#Spring配置文件" class="headerlink" title="Spring配置文件"></a>Spring配置文件</h1><h2 id="Bean标签基本配置"><a href="#Bean标签基本配置" class="headerlink" title="Bean标签基本配置"></a>Bean标签基本配置</h2><p>用于配置对象交由<strong>Spring</strong>来创建</p>
<p>默认情况下它调用的是类中的<strong>无参构造函数</strong>，如果没有无参构造函数则不能创建成功。</p>
<p>基本属性：</p>
<p>（1）<strong>id</strong>：Bean实例在Spring容器中的唯一标识</p>
<p>（2）<strong>class</strong>：Bean的全限定名称</p>
<h2 id="Bean标签范围配置"><a href="#Bean标签范围配置" class="headerlink" title="Bean标签范围配置"></a>Bean标签范围配置</h2><p>scope：对象的作用范围，取值如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519104843.png" alt=""></p>
<p>当范围取值不同时，<strong>对象创建的时机</strong>也不同</p>
<ol>
<li>当scope的取值为<strong>singleton</strong>时（<strong>加载配置文件时创建</strong>）</li>
</ol>
<ul>
<li>Bean的实例化个数:1个</li>
<li>Bean的实例化时机:当Spring核心文件被加载时，实例化配置的Bean实例Bean的生命周期:</li>
<li>对象创建:当应用加载，创建容器时，对象就被创建了对象运行:只要容器在，对象一直活着</li>
<li>对象销毁:当应用卸载。销毁容器时，对象就被销毁了</li>
</ul>
<ol>
<li>当scope的取值为<strong>prototype</strong>时（<strong>使用对象时创建，**</strong>getBean<strong>**时</strong>）</li>
</ol>
<ul>
<li>Bean的实例化个数:多个</li>
<li>Bean的实例化时机:当调用getBean)方法时实例化Bean</li>
<li>对象创建:当使用对象时，创建新的对象实例对象运行:只要对象在使用中，就一直活着</li>
<li>对象销毁:当对象长时间不用时，被Java的垃圾回收器回收了</li>
</ul>
<ol>
<li><p>Bean生命周期配置</p>
<p>Init-method:指定类中的初始化方法名称</p>
<p>Destroy-method:指定类中销毁方法名称</p>
</li>
<li><p>Bean实例化三种方式</p>
<p>（1）无参<strong>构造</strong>方法实例化</p>
<p>（2）工厂<strong>静态</strong>方法实例化</p>
<p>（3）工厂<strong>实例</strong>方法实例化（非static方法不能，不使用对象直接调用，需要先创建工厂对象，再通过对象调用getXXXDao方法获取最终对象）</p>
</li>
<li><p>Bean的依赖注入分析</p>
<p>（1）依赖注入是什么</p>
<p>依赖注入（Dependency Injection）:是Spring框架核心IOC的具体实现。</p>
<p>在编写程序时，通过<strong>控制反转</strong>，把对象的创建交给了Spring，,但是代码中不可能出现没有依赖的情况。IOC解耦只是<strong>降低他们的依赖关系</strong>，<strong>但不会消除</strong>。例如:业务层仍会调用持久层的方法。</p>
<p>那这种业务层和持久层的依赖关系，在使用Spring之后，就让Spring来维护了。简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。</p>
<p>（2）Bean的依赖注入方式</p>
<p>怎么将UserDao注入到UserService内部呢？</p>
</li>
</ol>
<ul>
<li><p><strong>构造方法</strong></p>
<p>有参构造</p>
</li>
<li><p><strong>set**</strong>方法**</p>
<p>①简化方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519105134.png" alt=""></p>
<p>②在需要注入的Bean中增加新标签<property name="" ref=""></p>
<p>（3）Bean依赖注入的数据类型</p>
<p>上面的操作，都是注入的引用Bean，处了对象的引阿以注入，普通数据类型，集合等都可以在容器中进行注入。</p>
<p>注入数据的三种数据类型：</p>
<ul>
<li>普通数据类型</li>
<li>引用数据类型</li>
<li>集合数据类型</li>
</ul>
<p>（4）引入其他配置文件（分模块开发）</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519105213.png" alt=""></p>
</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519105238.png" alt=""></p>
<h1 id="Spring相应api"><a href="#Spring相应api" class="headerlink" title="Spring相应api"></a>Spring相应api</h1><ol>
<li><p>ApplicationContext的实现类</p>
<p>（1）ClassPathXmlApplicationContext</p>
<p>​    根据从类的根路径下加载配置文件，推荐使用这种</p>
<p>(2) FileSystemXmlApplicationContext</p>
<p>​    它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p>
<p>(3) AnnotationConfigApplicationContext</p>
<p>​    当使用注解配置容器对象时，需要使用此类来创建spring容器。它用来读取注解。</p>
</li>
<li><p>getBean()方法使用</p>
<p>根据id创建可以创建多个相同类型对象。</p>
<p>只存在一个可以使用通过类型创建。</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519105321.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519105337.png" alt=""></p>
<h1 id="Spring配置数据源"><a href="#Spring配置数据源" class="headerlink" title="Spring配置数据源"></a>Spring配置数据源</h1><ol>
<li><p>数据源（连接池）的作用</p>
</li>
<li><ul>
<li>提高程序性能</li>
<li>事先实例化数据源，初始化部分连接资源</li>
<li>使用连接资源时从数据源中获取</li>
<li>使用完毕后将连接资源归还给数据源</li>
<li>常见数据源（连接池）：DBCP、C3PO、BoneCP、Druid等</li>
</ul>
</li>
<li><p>抽取jdbc配置文件</p>
</li>
</ol>
<h1 id="Spring注解开发"><a href="#Spring注解开发" class="headerlink" title="Spring注解开发"></a>Spring注解开发</h1><ol>
<li><p>Spring原始注解</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519105419.png" alt=""></p>
</li>
</ol>
<p><strong>注意**</strong>:**</p>
<p>使用注解进行开发时，需要在<strong>applicationContext.xml**</strong>中配置组件扫描**，作用是指定哪个包及其子包下的Bean需要进行扫描以便识别使用注解配置的类、字段和方法。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519105439.png" alt=""></p>
<ol>
<li><p>Spring新注解</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519105502.png" alt=""></p>
</li>
</ol>
<h1 id="Spring整合Junit"><a href="#Spring整合Junit" class="headerlink" title="Spring整合Junit"></a>Spring整合Junit</h1><p>​    Spring集成Junit步骤</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519105545.png" alt=""></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring(三)JDBC与事务控制</title>
    <url>/posts/91b8dde3.html</url>
    <content><![CDATA[<h1 id="Spring-JdbcTemplate基本使用"><a href="#Spring-JdbcTemplate基本使用" class="headerlink" title="Spring JdbcTemplate基本使用"></a>Spring JdbcTemplate基本使用</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​    它是spring框架中提供的一个对象，是对原始繁琐的JdbcAPI对象的简单封装。spring框架为我们提供了很多的操作模板类。例如:操作关系型数据的JdbcTemplate和bernateTemplate，操作nosql数据库的RedisTemplate，操作消息队列的JmsTemplate等等。</p>
<h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><p>（1）导入Spring-jdbc和spring-tx（transaction事务）坐标</p>
<p>（2）创建数据库表和实体</p>
<p>（3）创建JdbcTemplate对象</p>
<p>（4）执行数据库操作</p>
<h2 id="Spring产生JdbcTemplate对象"><a href="#Spring产生JdbcTemplate对象" class="headerlink" title="Spring产生JdbcTemplate对象"></a>Spring产生JdbcTemplate对象</h2><p>​    可以将JdbcTemplate的创建权交给Spring，将DataSource的创建权也交给Spring，在Spring</p>
<p>容器内部将数据源DataSource注入到JdbcTemplate模版对象中，配置如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519111426.png" alt=""></p>
<h2 id="知识要点"><a href="#知识要点" class="headerlink" title="知识要点"></a>知识要点</h2><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519111454.png" alt=""></p>
<h1 id="Spring的事务控制"><a href="#Spring的事务控制" class="headerlink" title="Spring的事务控制"></a>Spring的事务控制</h1><h2 id="编程式事务控制相关对象（了解）"><a href="#编程式事务控制相关对象（了解）" class="headerlink" title="编程式事务控制相关对象（了解）"></a>编程式事务控制相关对象（了解）</h2><ol>
<li>PlateformTransactionManager（接口，封装事务行为）</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519111530.png" alt=""></p>
<ol>
<li><p>TransactionDefinition（封装事务参数）</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519111552.png" alt=""></p>
</li>
<li><p>TransactionStatus（封装事务状态信息）</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519111614.png" alt=""></p>
<h2 id="基于XML的声明式事务控制"><a href="#基于XML的声明式事务控制" class="headerlink" title="基于XML的声明式事务控制"></a>基于XML的声明式事务控制</h2><ol>
<li><p>什么是声明式事务控制</p>
<p>Spring的声明式事务顾名思义就是<strong>采用声明的方式来处理事务</strong>。这里所说的声明，就是指在配置文件中声明，</p>
<p>用在Spring配置文件中声明式的处理事务来代替代码式的处理事务。</p>
<p>Spring声明式事务控制底层就是AOP</p>
</li>
<li><p>声明式事务控制明确事项：</p>
<p>（1）谁是切点</p>
<p>（2）谁是通知</p>
<p>（3）配置切面</p>
</li>
<li><p>配置要点</p>
<p>（1）平台事务管理器配置</p>
<p>（2）事务通知配置</p>
<p>（3）事务aop织入配置</p>
</li>
</ol>
<h2 id="基于注解的声明式事务控制"><a href="#基于注解的声明式事务控制" class="headerlink" title="基于注解的声明式事务控制"></a>基于注解的声明式事务控制</h2><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519111724.png" alt=""></p>
<h1 id="Spring集成web环境"><a href="#Spring集成web环境" class="headerlink" title="Spring集成web环境"></a>Spring集成web环境</h1><h2 id="ApplicationContext应用上下文获取方式"><a href="#ApplicationContext应用上下文获取方式" class="headerlink" title="ApplicationContext应用上下文获取方式"></a>ApplicationContext应用上下文获取方式</h2><p>​    应用上下文对象是通过new ClasspathXmIApplicationContext(spring配置文件)方式获取的，但是每次从容器中获得Bean时都要编写new ClasspathXmIApplicationContext(spring配置文件)，这样的弊端是配置文件加载多次，应用上下文对象创建多次。</p>
<p>​    在Web项目中，可以使用ServletContextListener监听Web应用的启动，我们可以在Web应用启动时，就加载Spring的配置文件，创建应用上下文对象ApplicationContext，在将其存储到最大的域servletContext域中，这样就可以在任意位置从域中获得应用上下文ApplicationContext对象了。</p>
<h2 id="Spring提供获取应用上下文的工具"><a href="#Spring提供获取应用上下文的工具" class="headerlink" title="Spring提供获取应用上下文的工具"></a>Spring提供获取应用上下文的工具</h2><p>​    上面的分析不用手动实现，Spring提供了一个监听器ContextLoaderListener就是对上述功能的封装，该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到ServletContext域中，提供了一个客户端工具WebApplicationContextUtils供使用者获得应用上下文对象。</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>（1）在web.xml中配置ContextLoaderListener监听器(导入spring-web坐标)</p>
<p>（2）使用WebApplicationContextUtils获得应用上下文对象ApplicationContext</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring(二)AOP简介与实现</title>
    <url>/posts/d2e352f8.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>​    动态代理通过反射实现，是OOP（面向对象编程）的延伸。</p>
<p>​    可以对业务逻辑的各个部分进行隔离，从而实现解耦合。</p>
<h2 id="作用及优势"><a href="#作用及优势" class="headerlink" title="作用及优势"></a>作用及优势</h2><p>​    作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强</p>
<p>​    优势：减少重复代码，提高开发效率，并且便于维护</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519110109.png" alt=""></p>
<p>​    对单一功能进行增强，附加其它功能的思维。例如对于user的操作，不需要在每一个功能中</p>
<p>​    写上日志控制功能，只需要在运行时将额外的日志控制功能附加到当前所运行功能上就可以了。从而实现了解耦。</p>
<h2 id="AOP的底层实现"><a href="#AOP的底层实现" class="headerlink" title="AOP的底层实现"></a>AOP的底层实现</h2><p>​    实际上，AOP的底层是通过Spring提供的的<strong>动态代理技术</strong>实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成<strong>功能的增强</strong>。</p>
<p>​    AOP动态代理技术：</p>
<ul>
<li><p>JDK代理：基于接口的动态代理技术</p>
</li>
<li><p>cglib代理：基于父类的动态代理技术<img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519110200.png" alt=""></p>
<p>（1）JDK动态代理示例</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519110228.png" alt=""></p>
<p>（2）cglib的动态代理</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519110246.png" alt=""></p>
</li>
</ul>
<h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>Target(目标对象)∶代理的目标对象</li>
<li>Proxy(代理):一个类被AOP织入增强后，就产生一个结果代理类</li>
<li>Joinpoint(连接点)｛简单记：可以被增强的方法称为连接点｝︰所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法，因为spring只支持方法类型的连接点</li>
<li>Pointcut(切入点)｛简单记：确定被增强的连接点｝︰所谓切入点是指我们要对哪些Joinpoint进行拦截的定义</li>
</ul>
<p>简单理解：我们都是学生，都有机会拿国奖，所以我们都可以看成是连接点，而最终实际拿到国奖的学生才是切入点。</p>
<ul>
<li>Advice (通知/增强)︰所谓通知是指拦截到Joinpoint之后所要做的事情就是通知</li>
<li>Aspect(切面):是切入点和通知(引介)的结合</li>
<li>Weaving (织入)∶是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而Aspect采用编译期织入和类装载期织入</li>
</ul>
<h2 id="AOP开发过程中需要明确的事项"><a href="#AOP开发过程中需要明确的事项" class="headerlink" title="AOP开发过程中需要明确的事项"></a>AOP开发过程中需要明确的事项</h2><p>（1）需要编写的内容</p>
<p>​    编写核心业务代码(目标类的目标方法)</p>
<p>​    编写切面类，切面类中有通知(增强功能方法)</p>
<p>​    在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结答</p>
<p>（2）AOP技术实现的内容</p>
<p>​    Spring框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p>
<p>（3）AOP底层使用哪种代理方式</p>
<p>​    在spring中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p>
<h2 id="知识要点与总结"><a href="#知识要点与总结" class="headerlink" title="知识要点与总结"></a>知识要点与总结</h2><ul>
<li><p>aop:面向切面编程</p>
</li>
<li><p>aop底层实现:基于JDK的动态代理和基于Cglib的动态代理</p>
</li>
<li><p>aop的重点概念:</p>
<p>Pointcut(切入点)∶被增强的方法</p>
<p>Advice (通知/增强)∶封装增强业务逻辑的方法Aspect (切面)︰切点+通知</p>
<p>Weaving (织入)︰将切点与通知结合的过程</p>
</li>
<li><p>开发明确事项:</p>
<p>谁是切点(切点表达式配置)</p>
<p>谁是通知(切面类中的增强方法)</p>
<p>将切点和通知进行织入配置</p>
</li>
</ul>
<h1 id="三、基于XML的AOP开发"><a href="#三、基于XML的AOP开发" class="headerlink" title="三、基于XML的AOP开发"></a>三、基于XML的AOP开发</h1><ol>
<li>快速入门（开发步骤）</li>
</ol>
<p>（1）导入AOP相关坐标</p>
<p>（2）创建目标接口和目标类(内部有切点)</p>
<p>（3）创建切面类(内部有增强方法)</p>
<p>（4）将目标类和切面类的对象创建权交给spring</p>
<p>（5）在applicationContext.xml中配置织入关系</p>
<p>（6）测试代码</p>
<ol>
<li>XML配置AOP详解</li>
</ol>
<p>（1）切点表达式的写法</p>
<p>​    语法：</p>
<p>​    execution（[修饰符] 返回值类型 包名.类名.方法名(参数)）</p>
<p>​    特殊标志：* . ..</p>
<p>（2）通知种类：</p>
<p>​    <aop:before>切入点方法之前执行</p>
<p>​    <aop:after-returning>之后执行</p>
<p>​    <aop:around>之前和之后都执行</p>
<p>&lt;    aop:throwing&gt;出现异常时执行</p>
<p>​    <aop:after>无论是否有异常都执行</p>
<h1 id="基于注解的AOP开发"><a href="#基于注解的AOP开发" class="headerlink" title="基于注解的AOP开发"></a>基于注解的AOP开发</h1><h2 id="快速入门（开发步骤）"><a href="#快速入门（开发步骤）" class="headerlink" title="快速入门（开发步骤）"></a>快速入门（开发步骤）</h2><p>（1）创建目标接口和目标类(内部有切点)</p>
<p>（2）创建切面类(内部有增强方法)</p>
<p>（3）将目标类和切面类的对象创建权交给spring</p>
<p>（4）在切面类中使用注解配置织入关系</p>
<p>（5）在配置文件中开启组件扫描和AOP的自动代理测试</p>
<p>（6）测试</p>
<h2 id="注解通知类型"><a href="#注解通知类型" class="headerlink" title="注解通知类型"></a>注解通知类型</h2><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519111225.png" alt=""></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang(一)特性与使用场景</title>
    <url>/posts/47f6b3ff.html</url>
    <content><![CDATA[<h1 id="Golang的学习方向"><a href="#Golang的学习方向" class="headerlink" title="Golang的学习方向"></a>Golang的学习方向</h1><p>当前使用的领域主要是在：</p>
<ol>
<li>区块链研发工程师</li>
<li>Go服务器端 / 游戏软件工程师</li>
<li>Go分布式 / 云计算软件工程师</li>
</ol>
<p>特性就是 既能够达到动态编译语言所具有的速度和性能，又能够达到动态编译语言在开发过程中的高效率</p>
<p>在学习一门语言时，需要思考的细节包括：</p>
<ol>
<li>怎么使用更规范</li>
<li>使用陷阱</li>
<li>需要使用时，应该注意些什么</li>
</ol>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC（一）简介</title>
    <url>/posts/678e6659.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ssm: mybatis + spring + springMVC</p>
<p>ssm = JavaWeb做项目</p>
<p><strong>Spring：IOC和AOP【重要】</strong></p>
<p><strong>SpringMVC的执行流程【重要】</strong></p>
<h1 id="回顾MVC模式"><a href="#回顾MVC模式" class="headerlink" title="回顾MVC模式"></a>回顾MVC模式</h1><p>模型（dao，service） 视图（jsp） 控制器（servlet）</p>
<p><strong>jsp：本质就是一个servlet</strong></p>
<h1 id="什么是SpringMVC"><a href="#什么是SpringMVC" class="headerlink" title="什么是SpringMVC"></a>什么是SpringMVC</h1><p>Spring MVC是Spring Framework的一部分，是基于java实现MVC的轻量级Web框架。</p>
<p>特点：</p>
<p>1.轻量级，简单易学</p>
<p>2.高效，基于请求响应的MVC框架</p>
<p>3.与Spring兼容性好，无缝结合</p>
<p><strong>4.约定大于配置</strong></p>
<p>5.功能强大：RESTful、数据验证、格式化、本地化、主题等</p>
<p>6.简洁灵活</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​    <strong>SpringMVC</strong>是一种基于Java实现的<strong>MVC**</strong>设计模式<strong>的请求驱动类型的轻量级</strong>Web<strong>**框架</strong>，</p>
<p>属于S<strong>pringFrameWork</strong>的后续产品，已经融合在SpringWebFlow中。</p>
<p>概述：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519111931.png" alt=""></p>
<p>流程图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519111950.png" alt=""></p>
<h1 id="组件解析"><a href="#组件解析" class="headerlink" title="组件解析"></a>组件解析</h1><p>1）SpringMVC执行流程</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519112016.png" alt=""></p>
<p>2）SpringMVC注解解析</p>
<p>@RequestMapping</p>
<p>作用：用于建立请求URL和处理请求方法之间的对应关系</p>
<p>位置：</p>
<ul>
<li>类上：请求URL的第一级访问目录，不写相当于应用的根目录</li>
<li>方法上：请求URL的第二级访问目录，与类上的使用@RequeMapping标注的一级目录一起组成访问虚拟路径</li>
</ul>
<p>属性：</p>
<ul>
<li>value：用于指定请求的URL，和path属性的作用一样</li>
<li>method：指定请求的方式</li>
<li>params：指定新案子请求参数的条件。支持简单的表达式，要求请求参数的key和value必须和配置一模一样。例如</li>
<li>params=｛“accountName”｝</li>
<li>params=｛“money！100”｝</li>
</ul>
<h1 id="SpringMVC数据响应"><a href="#SpringMVC数据响应" class="headerlink" title="SpringMVC数据响应"></a>SpringMVC数据响应</h1><p>（1）数据响应方式</p>
<p>​        ①页面跳转：</p>
<p>​            直接返回字符串</p>
<p>​            通过ModelAndView对象返回</p>
<p>​        ②回写数据：</p>
<p>​            直接返回字符串</p>
<p>​            返回对象或集合</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20210519112220.png" alt=""></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Little eagle - git学习笔记</title>
    <url>/posts/aeb37ff2.html</url>
    <content><![CDATA[<p>​     </p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://blog.csdn.net/qq_41328247/article/details/81868247">git、svn和cvs的主要区别</a>在于git是<strong>分布式</strong>版本控制系统，而svn和cvs则是<strong>集中式</strong>版本控制系统。集中式版本控制系统所有文件系统存放在中央服务器上，工作模式更像是一个C/S模式，本地用户通过安装客户端来与服务器进行版本的获取与更新操作。问题是当服务器处于脱机状态时，所有用户都要停止工作。</p>
<p>为了解决该问题，git则抛弃了这种机制，用户将所有文件包括版本信息下载到本地，提交和修改可以在本地执行，在修改确定后再与远程服务器保持同步。</p>
<p>简单理解git是什么？</p>
<p>git是一种<strong>开源</strong>的 <strong>分布式</strong> <strong>版本控制</strong> 工具</p>
<h1 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h1><h2 id="Linux下安装git"><a href="#Linux下安装git" class="headerlink" title="Linux下安装git"></a>Linux下安装git</h2><p>Ubuntu10.10及以上版本、Debain squeeze及以上版本使用以下命令：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ sudo aptitude install git</span><br><span class="line">$ sudo aptitude install git-doc git-svn git-email gitk //安装单独的软件依赖包</span><br></pre></td></tr></table></figure>
<p>RHEL、Fedora、Centos等系统下的安装：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ yum install git</span><br><span class="line">$ yum install git-svn git-email gitk //安装单独的软件依赖包</span><br></pre></td></tr></table></figure>
<h2 id="Windows下安装git"><a href="#Windows下安装git" class="headerlink" title="Windows下安装git"></a>Windows下安装git</h2><p><a href="https://git-scm.com/">git官网</a>下载对应位数安装包按指引安装即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220321143735.png" alt=""></p>
<p>此外推荐一款Windows下git图形化操作界面软件<a href="https://tortoisegit.org/download/">TortoiseGit</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220321143619.png" alt=""></p>
<h2 id="git基本配置"><a href="#git基本配置" class="headerlink" title="git基本配置"></a>git基本配置</h2><h3 id="配置个人身份"><a href="#配置个人身份" class="headerlink" title="配置个人身份"></a>配置个人身份</h3><p>用于表示git提交记录中的个人信息,表明该提交操作人是谁</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;youname&quot;</span><br><span class="line">git config --global user.email youremail</span><br></pre></td></tr></table></figure>
<h3 id="服务器的认证配置"><a href="#服务器的认证配置" class="headerlink" title="服务器的认证配置"></a>服务器的认证配置</h3><p>以下两种方式任选其一（推荐ssh协议认证方式）：</p>
<p>（1）ssh协议认证方式</p>
<p>以下配置以部署到github为例</p>
<p>首先生成公钥（yue），一路回车即可</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<p>在默认路径下找到C:\Users\UserName\.ssh\id_rsa.pub，以记事本方式打开，复制全部文本。</p>
<p>打开github，如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220321145626.png" alt=""></p>
<p>title命名随意（能够让你想起来是哪台电脑的备注即可），将之前复制的全部文本粘贴到Key文本框中，点击绿色按钮Add SSH key！搞定！</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220321145858.png" alt=""></p>
<p>（2）http/ https协议认证方式</p>
<p>设置口令缓存</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>
<p>添加https证书信任</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config http.sslverify false</span><br></pre></td></tr></table></figure>
<h1 id="git基本命令"><a href="#git基本命令" class="headerlink" title="git基本命令"></a>git基本命令</h1><h2 id="工作区与文件状态"><a href="#工作区与文件状态" class="headerlink" title="工作区与文件状态"></a>工作区与文件状态</h2><p>要理解git命令的作用，前提是搞懂<a href="https://www.cnblogs.com/qdhxhz/p/9757390.html">git工作区域的概念</a>，git一共有四个工作区域，工作区域之间的关系及指令如下:</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220321153000.png" alt=""></p>
<p>此外，还要对git文件的四种状态有初步理解，分别是：</p>
<p>Untracked：文件为加入git库，不参与版本控制，通过git add转为Staged</p>
<p>Unmodify：已入库未修改。有两种转变方式，git rm移除版本库转为Untrackded 或者被修改转为Modified</p>
<p>Modified：已修改。该状态下也有两种转变方式，git add进入暂存Staged状态，git check丢弃修改进入Unmodify状态</p>
<p>Staged：暂存状态。git commit同步到库中，此时远程和本地文件一直，文件变为Unmodify状态。而如果是git reset filename取消暂存，则变为Modified状态。</p>
<p>直观的四种状态的转变如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220321212738.png" alt=""></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h4 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line"> git init</span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">git init [project-name]</span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">git clone [url]</span><br></pre></td></tr></table></figure>
<h4 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#查看指定文件状态</span><br><span class="line">git status [filename]</span><br><span class="line">#查看所有文件状态</span><br><span class="line">git status</span><br></pre></td></tr></table></figure>
<h4 id="工作区-lt-—-gt-暂存区"><a href="#工作区-lt-—-gt-暂存区" class="headerlink" title="工作区&lt;—&gt;暂存区"></a>工作区&lt;—&gt;暂存区</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">git add [file1] [file2] ...</span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">git add [<span class="built_in">dir</span>]</span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">git add .</span><br><span class="line">#当我们需要删除暂存区或分支上的文件, 同时工作区也不需要这个文件了, 可以使用</span><br><span class="line">git rm file_path</span><br><span class="line">#当我们需要删除暂存区或分支上的文件, 但本地又需要使用, 这个时候直接push那边这个文件就没有，如果push之前重新add那么还是会有。</span><br><span class="line">git rm --cached file_path</span><br><span class="line">#直接加文件名   从暂存区将文件恢复到工作区，如果工作区已经有该文件，则会选择覆盖</span><br><span class="line">#加了【分支名】 +文件名  则表示从分支名为所写的分支名中拉取文件 并覆盖工作区里的文件</span><br><span class="line">git checkout</span><br></pre></td></tr></table></figure>
<h4 id="工作区-lt-—-gt-资源库（版本库）"><a href="#工作区-lt-—-gt-资源库（版本库）" class="headerlink" title="工作区&lt;—&gt;资源库（版本库）"></a>工作区&lt;—&gt;资源库（版本库）</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">#将暂存区--&gt;资源库（版本库）</span><br><span class="line">git commit -m &#x27;该次提交说明&#x27;</span><br><span class="line">#如果出现:将不必要的文件commit 或者 上次提交觉得是错的  或者 不想改变暂存区内容，只是想调整提交的信息</span><br><span class="line">#移除不必要的添加到暂存区的文件</span><br><span class="line">git reset HEAD 文件名</span><br><span class="line">#去掉上一次的提交（会直接变成add之前状态）   </span><br><span class="line">git reset HEAD^ </span><br><span class="line">#去掉上一次的提交（变成add之后，commit之前状态） </span><br><span class="line">git reset --soft  HEAD^ </span><br></pre></td></tr></table></figure>
<h4 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">git pull</span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<h4 id="其它常用命令"><a href="#其它常用命令" class="headerlink" title="其它常用命令"></a>其它常用命令</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">git config --list</span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">git config -e [--global]</span><br><span class="line">#初次commit之前，需要配置用户邮箱及用户名，使用以下命令：</span><br><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">#调出Git的帮助文档</span><br><span class="line">git --<span class="built_in">help</span></span><br><span class="line">#查看某个具体命令的帮助文档</span><br><span class="line">git +命令 --<span class="built_in">help</span></span><br><span class="line">#查看git的版本</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Little eagle</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Little eagle - SpringBoot实战管理系统(一)</title>
    <url>/posts/1094.html</url>
    <content><![CDATA[<h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><p>记录狂神大佬的<a href="https://www.bilibili.com/video/BV1PE411i7CV?p=28">SpringBoot练手项目</a>，建议有空跟着视频kao一遍，笔记记录大体项目编写流程，并记录一些自身练习过程中碰到的疑难点、对相关技术原理进行拓展。</p>
<p>项目涉及到的模块功能、技术点请移步 左侧 一级标题</p>
<p>文章（一）基于map结构模拟数据库进行数据的增删改查</p>
<p>文章（二）接入真实数据库</p>
<p>项目环境：</p>
<p>​    Jdk：v.1.8</p>
<p>完整项目地址（未接入数据库）：<a href="https://github.com/codersliu/springboot03-manasys">https://github.com/codersliu/springboot03-manasys</a></p>
<p>静态资源自取↑</p>
<p>tips：方法变量命名啥的有自己的命名习惯，所以会稍有不同，但大体上是保持一致的，请放心食用~</p>
<h1 id="SpringBoot自动装配机制详解"><a href="#SpringBoot自动装配机制详解" class="headerlink" title="SpringBoot自动装配机制详解"></a>SpringBoot自动装配机制详解</h1><p>为了写出优秀的。。。crud？程序，首先就要弄懂SpringBoot的<a href="https://www.jianshu.com/p/88eafeb3f351">自动装配机制</a>以便于理解后续的整体编程逻辑。</p>
<p>SpringBoot的特征<strong>约定大于配置</strong>，其核心是<strong>自动装配</strong>，尽可能以简单配置达到早期SSM开发中的繁琐配置，简化开发流程。</p>
<p>启动类注解@SpringBootApplication，被该注解修饰的类会被识别为启动类，程序启动时在该启动类下执行main函数。剖析源码就能发现@SpringBootApplication也是由多个其它注解组合而成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123;</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">        @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor(annotation = EnableAutoConfiguration.class)</span></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="meta">@AliasFor(annotation = EnableAutoConfiguration.class)</span></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">//根据包路径扫描</span></span><br><span class="line">    <span class="meta">@AliasFor(annotation = ComponentScan.class, attribute = &quot;basePackages&quot;)</span></span><br><span class="line">    String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">//直接根据class类扫描</span></span><br><span class="line">    <span class="meta">@AliasFor(annotation = ComponentScan.class, attribute = &quot;basePackageClasses&quot;)</span></span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中三个核心注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootConfiguration(代表一个配置类，相当于beans.xml文件，beans.xml中一个类对应一个Bean)</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(自动扫描并加载符合条件的组件或bean定义，并加载到容器中去)</span></span><br></pre></td></tr></table></figure>
<p>展开说说@EnableAutoConfiguration注解，该注解用于开启SpringBoot的自动装配。深入剖析源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"><span class="comment">//按类型排序不需要自动装配的类</span></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"><span class="comment">//按名称排除不需要自动装配的类</span></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>源码中@Important下引入了选择器AutoConfigurationImportSelector.class，@EnableAutoConfiguratoin通过该选择器将所有符合调价的@SpringBootConfiguration配置加载到IoC容器中，并借助工具类SpringFactoriesLoader实现自动配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从这里可以看出该类实现很多的xxxAware和DeferredImportSelector，所有的aware都优先于selectImports</span></span><br><span class="line"><span class="comment">//方法执行，也就是说selectImports方法最后执行，那么在它执行的时候所有需要的资源都已经获取到了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoConfigurationImportSelector</span> <span class="keyword">implements</span> <span class="title class_">DeferredImportSelector</span>, BeanClassLoaderAware, ResourceLoaderAware, BeanFactoryAware, EnvironmentAware, Ordered &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">            <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//1加载META-INF/spring-autoconfigure-metadata.properties文件</span></span><br><span class="line">            <span class="type">AutoConfigurationMetadata</span> <span class="variable">autoConfigurationMetadata</span> <span class="operator">=</span> AutoConfigurationMetadataLoader.loadMetadata(<span class="built_in">this</span>.beanClassLoader);</span><br><span class="line"><span class="comment">//2获取注解的属性及其值（PS：注解指的是@EnableAutoConfiguration注解）</span></span><br><span class="line">            <span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> <span class="built_in">this</span>.getAttributes(annotationMetadata);</span><br><span class="line"><span class="comment">//3.在classpath下所有的META-INF/spring.factories文件中查找org.springframework.boot.autoconfigure.EnableAutoConfiguration的值，并将其封装到一个List中返回</span></span><br><span class="line">            List&lt;String&gt; configurations = <span class="built_in">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line"><span class="comment">//4.对上一步返回的List中的元素去重、排序</span></span><br><span class="line">            configurations = <span class="built_in">this</span>.removeDuplicates(configurations);</span><br><span class="line"><span class="comment">//5.依据第2步中获取的属性值排除一些特定的类</span></span><br><span class="line">            Set&lt;String&gt; exclusions = <span class="built_in">this</span>.getExclusions(annotationMetadata, attributes);</span><br><span class="line"><span class="comment">//6对上一步中所得到的List进行过滤，过滤的依据是条件匹配。这里用到的过滤器是</span></span><br><span class="line"><span class="comment">//org.springframework.boot.autoconfigure.condition.OnClassCondition最终返回的是一个ConditionOutcome[]</span></span><br><span class="line"><span class="comment">//数组。（PS：很多类都是依赖于其它的类的，当有某个类时才会装配，所以这次过滤的就是根据是否有某个</span></span><br><span class="line"><span class="comment">//class进而决定是否装配的。这些类所依赖的类都写在META-INF/spring-autoconfigure-metadata.properties文件里）</span></span><br><span class="line">            <span class="built_in">this</span>.checkExcludedClasses(configurations, exclusions);</span><br><span class="line">            configurations.removeAll(exclusions);</span><br><span class="line">            configurations = <span class="built_in">this</span>.filter(configurations, autoConfigurationMetadata);</span><br><span class="line">            <span class="built_in">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">            <span class="keyword">return</span> StringUtils.toStringArray(configurations);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class="line">        List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="built_in">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="built_in">this</span>.getBeanClassLoader());</span><br><span class="line">        Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> configurations;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SpringFactoriesLoader从指定的配置文件META-INF/spring.factores加载配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SpringFactoriesLoader</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FACTORIES_RESOURCE_LOCATION</span> <span class="operator">=</span> <span class="string">&quot;META-INF/spring.factories&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; <span class="title function_">loadSpringFactories</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span> &#123;</span><br><span class="line">        MultiValueMap&lt;String, String&gt; result = cache.get(classLoader);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Enumeration&lt;URL&gt; urls = (classLoader != <span class="literal">null</span> ?</span><br><span class="line">                    classLoader.getResources(FACTORIES_RESOURCE_LOCATION) :</span><br><span class="line">                    ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">            result = <span class="keyword">new</span> <span class="title class_">LinkedMultiValueMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">                <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> urls.nextElement();</span><br><span class="line">                <span class="type">UrlResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlResource</span>(url);</span><br><span class="line">                <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">                <span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">                    List&lt;String&gt; factoryClassNames = Arrays.asList(</span><br><span class="line">                            StringUtils.commaDelimitedListToStringArray((String) entry.getValue()));</span><br><span class="line">                    result.addAll((String) entry.getKey(), factoryClassNames);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cache.put(classLoader, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unable to load factories from location [&quot;</span> +</span><br><span class="line">                    FACTORIES_RESOURCE_LOCATION + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>以上源码分析可知，SpringBoot整体的自动装配流程是：</p>
<p>（1）从classpath中查找META-INF/spring.factories配置文件，获取EnableAutoConfiguration指定的值</p>
<p>（2）并将其中的org.springframework.boot.autoconfigure.EnableutoConfiguration对应配置项通过<strong>反射</strong>实例化为标注了@Configuration的JavaConfig形式的IoC容器配置类，并加载到容器中，自动配置类就生效了，帮助我们完成自动配置工作。</p>
<p>（3）J2EE的整体解决方案和自动配置在Springboot-autoconfigure的jar包中.</p>
<p>（4）它给容器中导入大量自动配置类xxxAutoConfiguration，即将场景所需组件导入容器，并进行配置。最终完成自动配置，免去了开发人员手动编写配置注入功能组件的工作。</p>
<p>注解关系大体如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220330171344.png" alt=""></p>
<h1 id="准备工作-仿真数据"><a href="#准备工作-仿真数据" class="headerlink" title="准备工作-仿真数据"></a>准备工作-仿真数据</h1><p>okk，有了以上先验知识后就可以开始项目了，新建一个Spring项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220330172017.png" alt=""></p>
<p>员工管理系统包括两个数据结构:员工(Employee)&amp;部门（Department）。经典MVC模式，将类包装在pojo层，包结构如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220330195339.png" alt=""></p>
<p>引入@lombok注解标准化类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<p>新建类Employee和Department：</p>
<p>其中Employee下生日自动生成，不添加@AllArgsConstructor注释而自定义有参构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot03manasys2.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer sex;</span><br><span class="line">    <span class="keyword">private</span> Department department;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(Integer id, String name, String email, Integer sex, Department department)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.department = department;</span><br><span class="line">        <span class="built_in">this</span>.birth = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot03manasys2.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义了要访问的两个对象，为了模拟数据库，通过在dao层下定义静态代码块对map<Integer, Department/Student>结构的数据模拟数据初始化，并将相应的查询全部员工信息、通过id查询员工信息、新增员工信息、删除员工信息、查询全部部门信息、通过id查询部门信息的业务代码封装在employeeDao和departmentDao中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot03manasys.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot03manasys.pojo.Department;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot03manasys.pojo.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">employeeDao</span> &#123;</span><br><span class="line"><span class="comment">//    模拟数据库员工信息表</span></span><br><span class="line">    <span class="keyword">static</span> Map&lt;Integer, Employee&gt; employeeMap = <span class="literal">null</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> departmentDao departmentDao;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        employeeMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        employeeMap.put(<span class="number">1001</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;jacksliu&quot;</span>, <span class="string">&quot;19689624@qq.com&quot;</span>, <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">101</span>, <span class="string">&quot;教学部&quot;</span>)));</span><br><span class="line">        employeeMap.put(<span class="number">1002</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;happy&quot;</span>, <span class="string">&quot;19689624@qq.com&quot;</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">102</span>, <span class="string">&quot;生活部&quot;</span>)));</span><br><span class="line">        employeeMap.put(<span class="number">1003</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>, <span class="string">&quot;hodoow&quot;</span>, <span class="string">&quot;19689624@qq.com&quot;</span>, <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">103</span>, <span class="string">&quot;财务部&quot;</span>)));</span><br><span class="line">        employeeMap.put(<span class="number">1004</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1004</span>, <span class="string">&quot;marry&quot;</span>, <span class="string">&quot;19689624@qq.com&quot;</span>, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">104</span>, <span class="string">&quot;后勤部&quot;</span>)));</span><br><span class="line">        employeeMap.put(<span class="number">1005</span>, <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1005</span>, <span class="string">&quot;candy&quot;</span>, <span class="string">&quot;19689624@qq.com&quot;</span>, <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">105</span>, <span class="string">&quot;保卫部&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    添加新员工信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(employee.getId() == <span class="literal">null</span>)&#123;</span><br><span class="line">            employee.setId(initId++);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        employee.setDepartment(departmentDao.getDepartmentById(employee.getDepartment().getId()));</span><br><span class="line">        employeeMap.put(employee.getId(), employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    获取全部员工信息</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Employee&gt; <span class="title function_">getAllEmployee</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMap.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    通过id获取员工信息</span></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">getEmployeeById</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    通过id删除员工信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteEmp</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        employeeMap.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot03manasys2.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot03manasys2.pojo.Department;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">departmentDao</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;Integer, Department&gt; departmentMap;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        departmentMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        departmentMap.put(<span class="number">101</span>, <span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">101</span>, <span class="string">&quot;教学部&quot;</span>));</span><br><span class="line">        departmentMap.put(<span class="number">102</span>, <span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">102</span>, <span class="string">&quot;生活部&quot;</span>));</span><br><span class="line">        departmentMap.put(<span class="number">103</span>, <span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">103</span>, <span class="string">&quot;财务部&quot;</span>));</span><br><span class="line">        departmentMap.put(<span class="number">104</span>, <span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">104</span>, <span class="string">&quot;后勤部&quot;</span>));</span><br><span class="line">        departmentMap.put(<span class="number">105</span>, <span class="keyword">new</span> <span class="title class_">Department</span>(<span class="number">105</span>, <span class="string">&quot;保卫部&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;Department&gt; <span class="title function_">getAllDepartment</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentMap.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Department <span class="title function_">getDepartmentById</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="首页实现与国际化"><a href="#首页实现与国际化" class="headerlink" title="首页实现与国际化"></a>首页实现与国际化</h1><h2 id="首页实现"><a href="#首页实现" class="headerlink" title="首页实现"></a>首页实现</h2><p>导入静态资源/resources/templates文件，拷贝到项目对应目录下，由于使用thymeleaf实现前后端交互，在application.properties中关闭模版引擎缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关闭模版引擎缓存</span></span><br><span class="line">spring.thymeleaf.cache=<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>为了在用户输入localhost://8080/index.html类似链接时访问到主页，在启动类下绑定视图</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220330203144.png" alt=""></p>
<p>我们在项目文件下新建了一个config/myMvcConfig类，并实现了WebMvcConfigurer接口，Override其中的addViewControllers方法，为什么呢？</p>
<p>简单来说通过该方法就能实现一个请求映射为视图，实现无业务逻辑跳转，具体实现方案戳</p>
<p><a href="https://blog.csdn.net/huangjhai/article/details/104203415">Spring Boot中使用addViewController实现实现无业务逻辑跳转</a></p>
<p>首页效果↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220330204133.png" alt=""></p>
<h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><p>该模块功能通过点击中文和English实现中英文页面的切换。效果图↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220330204447.png" alt=""></p>
<p>首先检查项目编码是否为’utf-8’，防止乱码</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220330204823.png" alt=""></p>
<p>resources下新建文件i18n/login.properties         i18n/login_en_US.properties    i18n/login_zh_CN.properties 三个文件夹，并安装IDEA的resource bundle editor组件进行图形化配置，配置信息如↓：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220330210321.png" alt=""></p>
<p>其它四个字段类似</p>
<p>对index.html页面信息进行修改（以下部分涉及到部分前端知识，看看大体框架就好）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220330210558.png" alt=""></p>
<p>其中要需要关注的是在底部两个按钮中除了进行页面跳转，还在url中附带了相应的编码字段zh_CN或en_US</p>
<p>通过附带的参数实现页面编码格式的转换，为了覆盖默认编码，通过在config文件下新建MyLocalResolver类来实现编码自定义，该类继承了LocaleResolve类并Override了该类下的resolveLocale方法，<strong>重写方法后的逻辑请看↓</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot03manasys.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.jni.Local;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLocalResolver</span> <span class="keyword">implements</span> <span class="title class_">LocaleResolver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Locale <span class="title function_">resolveLocale</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">language</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">        <span class="type">Locale</span> <span class="variable">locale</span> <span class="operator">=</span> Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(language))&#123;</span><br><span class="line">            String[] split = language.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> <span class="title class_">Locale</span>(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时，在MyMvcConfig类中添加↓加载到容器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    自定义国际化组件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> LocaleResolver <span class="title function_">localeResolver</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyLocalResolver</span>();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>最后在application.properties添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.messages.basename=i18n.login</span><br></pre></td></tr></table></figure>
<h1 id="登陆与拦截器"><a href="#登陆与拦截器" class="headerlink" title="登陆与拦截器"></a>登陆与拦截器</h1><h2 id="登陆功能"><a href="#登陆功能" class="headerlink" title="登陆功能"></a>登陆功能</h2><p>查看前端页面登陆按钮绑定的url为/user/login</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220330212326.png" alt=""></p>
<p>新建controller/LoginController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot03manasys2.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot03manasys2.dao.employeeDao;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot03manasys2.pojo.Employee;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.glassfish.gmbal.ParameterNames;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="type">employeeDao</span> <span class="variable">employeeDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">employeeDao</span>();</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="meta">@ParameterNames</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password, Model model)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!username.isEmpty()&amp;&amp;password.equals(<span class="string">&quot;123456&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>登陆成功后重定向到的页面为什么是main.html呢，这里是为了避免跳转后的url附带用户名和密码导致信息泄漏，所以在MyMvcConfig类下addViewControllers方法中自定义映射关系:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">registry.addViewController(<span class="string">&quot;/main.html&quot;</span>).setViewName(<span class="string">&quot;dashboard&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>最终效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220330214128.png" alt=""></p>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>当前实现的登陆功能，仍然存在数据不安全的问题。用户在不登陆情况下输入url/main.html就能够直接访问到后台页面，所以要对用户的登陆状态进行校验，避免以上情况。</p>
<p>拦截器+Session就是一个很好的解决方案，大体设计方案如下：</p>
<p>当登陆成功时通过Session记录当前用户的username，当要访问拦截器所拦截的页面时对Session进行校验，Session不为Null放行，否则进行拦截并返回首页。</p>
<p>具体实现↓</p>
<p>修改LoginController类下login方法，在登陆成功时设置Session</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="type">employeeDao</span> <span class="variable">employeeDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">employeeDao</span>();</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="meta">@ParameterNames</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span> String password, Model model, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!username.isEmpty()&amp;&amp;password.equals(<span class="string">&quot;123456&quot;</span>))&#123;</span><br><span class="line">            session.setAttribute(<span class="string">&quot;loginUser&quot;</span>, username);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/main.html&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建config/LoginHandlerInterceprot类，实现HandlerInterceprot接口，并Override    preHandle方法，以自定义拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot03manasys2.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginHandlerInterceprot</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">loginUser</span> <span class="operator">=</span> request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(loginUser==<span class="literal">null</span>)&#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;没有权限，请登录&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并配置到MyMvcConfig中，同时设置要过滤的页面和白名单。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginHandlerInterceprot</span>()).</span><br><span class="line">            addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/index.html&quot;</span>,<span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/img/**&quot;</span>, <span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/user/login&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220330220329.png" alt=""></p>
<h2 id="注销功能"><a href="#注销功能" class="headerlink" title="注销功能"></a>注销功能</h2><p>注销功能通过清除Session信息并跳转首页即可实现，逻辑简单，不具体分析</p>
<p>LoginController下添加以下方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/signout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">signout</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">    session.invalidate();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/index.html&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="添加员工与删除员工"><a href="#添加员工与删除员工" class="headerlink" title="添加员工与删除员工"></a>添加员工与删除员工</h1><h2 id="添加员工"><a href="#添加员工" class="headerlink" title="添加员工"></a>添加员工</h2><p>先看看最终效果再确定设计思路</p>
<p>首先当我们登陆成功后，点击员工管理选项跳转员工信息页面，员工信息页面如↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220331104954.png" alt=""></p>
<p>点击添加员工按钮跳转添加页面</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220331104938.png" alt=""></p>
<p>输入信息点击添加按钮，并返回到员工信息页面</p>
<p>新建一个controller/EmployeeController类</p>
<p>逐步实现以上功能：</p>
<p>（1）点击员工管理选项跳转员工信息页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot03manasys2.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot03manasys2.dao.departmentDao;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot03manasys2.dao.employeeDao;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot03manasys2.pojo.Employee;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    employeeDao employeedao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    departmentDao departmentdao;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;emps&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        Collection&lt;Employee&gt; employees = employeedao.getAllEmployee();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;emps&quot;</span>, employees);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;emp/list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>以下通过<a href="https://www.cnblogs.com/guanghe/p/7686343.html">RestFul风格按get/post</a>不同请求方式实现对应功能</strong>（get请求用于获取/查询资源信息，post用于更新资源，不过并没有明确规定必须用哪种请求方式实现何种功能，只是一种公认的编程规范）</p>
<p>（2）点击添加员工按钮跳转添加页面（get请求）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@GetMapping(&quot;/emp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toAddPage</span><span class="params">(Model model)</span>&#123;</span><br><span class="line"><span class="comment">//        查出所有部门信息</span></span><br><span class="line">        Collection&lt;Department&gt; departments = departmentDao.getAllDepartment();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;departments&quot;</span>, departments);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;emp/add&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>（3）添加员工信息并返回员工信息页面（post请求）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@PostMapping(&quot;/emp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addEmp</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line"><span class="comment">//        添加员工操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;save==&gt;&quot;</span>+employee);</span><br><span class="line"><span class="comment">//        调用底层业务添加员工信息</span></span><br><span class="line">        employeedao.add(employee);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/emps&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="删除员工信息"><a href="#删除员工信息" class="headerlink" title="删除员工信息"></a>删除员工信息</h2><p>理解了添加操作，删除员工信息的设计就简单很多了，在点击删除按钮时只需要根据传入的userid在map中remove掉对应的键值对，并返回到员工信息页面就可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    删除员工信息</span></span><br><span class="line"><span class="meta">@GetMapping</span> (<span class="string">&quot;/deleEmp/&#123;id&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleEmp</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span><span class="type">int</span> id)</span>&#123;</span><br><span class="line">    employeedao.deleteEmp(id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/emps&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="修改员工信息与404处理"><a href="#修改员工信息与404处理" class="headerlink" title="修改员工信息与404处理"></a>修改员工信息与404处理</h1><h2 id="修改员工信息"><a href="#修改员工信息" class="headerlink" title="修改员工信息"></a>修改员工信息</h2><p>修改员工信息这里复用了employeeDao中的add()方法，重新插入一个员工，由于HashMap的键是唯一的，所以总能够重新插入成功（实际上这里与实际接入数据库的情况不一样，数据库中只能通过update去更新用户信息，用insert插入会导致主键冲突，这里在后续接入数据库后有相应的解决方案，请移步本文第2part）</p>
<p>这里有一个问题，看看添加新员工信息的业务源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    添加新员工信息</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Integer</span> <span class="variable">initId</span> <span class="operator">=</span> <span class="number">1006</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(employee.getId()==<span class="literal">null</span>)&#123;</span><br><span class="line">        employee.setId(initId);</span><br><span class="line">    &#125;</span><br><span class="line">    employee.setDepartment(departmentDao.getDepartmentById(employee.getDepartment().getId()));</span><br><span class="line">    employeeMap.put(employee.getId(), employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是我们在添加一个Employee对象时，employee id是自增形式的。而我们在更新用户信息时采用的也是add()方法，所以会导致并不能完成更新，而且会诡异的发现在每次更新都在不断插入一个新的Employee对象。怎么解决？</p>
<p>这里通过在前端页面中使用隐藏域携带employee id到页面中比对修改解决该问题。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220331104859.png" alt="image-20220331103837744"></p>
<p>修改信息业务代码如↓</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    员工信息修改</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/updateEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateEmp</span><span class="params">(Employee employee)</span>&#123;</span><br><span class="line">        employeedao.add(employee);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/emps&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h2><p>在resources/templates下放入404.html</p>
<p>okkk仿数据库的增删改查搞定！</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/QQ20220331104633.gif" alt=""></p>
]]></content>
      <categories>
        <category>Little eagle</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Little eagle - SpringBoot实战管理系统(三)</title>
    <url>/posts/21568.html</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>上一part中掌握了如何使用常用数据源，jdbc、druid和mybatis</p>
<p>在part1中为了防止用户在未登陆用户下访问到员工管理页面，用过滤器的方式实现了对该类请求的拦截。在本part中整合常用安全框架，以简单配置代替编码实现拦截器等其它安全功能。</p>
<p>整合框架及所实现功能移步左侧一级标题</p>
<p>项目地址(源码自取↓)：</p>
<p>整合SpringSecurity:<a href="https://github.com/codersliu/springboot06-springsecurity">https://github.com/codersliu/springboot06-springsecurity</a></p>
<p>整合Shiro:<a href="https://github.com/codersliu/springboot08-shiro">https://github.com/codersliu/springboot08-shiro</a></p>
<h1 id="整合SpringSecurity"><a href="#整合SpringSecurity" class="headerlink" title="整合SpringSecurity"></a>整合SpringSecurity</h1><p>新建项目，导入以下依赖↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430113933.png" alt=""></p>
<p>导入resources/static/qinjiang和resources/templates下的静态资源</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430113919.png" alt=""></p>
<p>application.properties下关闭thymeleaf缓存</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure>
<p>新建controller/RouteController实现页面跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot06springsecurity.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RouteController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;, &quot;/index&quot;, &quot;/index.html&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toLogin</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level1/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">level1</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level1/&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level2/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">level2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level2/&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/level3/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">level3</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;views/level3/&quot;</span>+id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试时要注释掉pom.xml下SpringSecurity依赖，引入依赖会自动实现用户登录状态的过滤。</p>
<p>最终页面如↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430113902.png" alt=""></p>
<p>测试完成后取取消SpringSecurity依赖注释</p>
<h2 id="授权和认证"><a href="#授权和认证" class="headerlink" title="授权和认证"></a>授权和认证</h2><p>新建config/SecurityConfig类，实现WebSecurity</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot06springsecurity.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AOP原理实现拦截器</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   链式编程</span></span><br><span class="line"><span class="comment">//    授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//设置首页所有人可见，level页面对应权限可见</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>).permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level1/**&quot;</span>).hasRole(<span class="string">&quot;vip1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level2/**&quot;</span>).hasRole(<span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/level3/**&quot;</span>).hasRole(<span class="string">&quot;vip3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//没有权限默认跳转登陆页面</span></span><br><span class="line">        http.formLogin();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        仿照数据库数据，真实应用场景下应从数据库读入</span></span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;sliu&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>).roles(<span class="string">&quot;vip1&quot;</span>, <span class="string">&quot;vip2&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>).roles(<span class="string">&quot;vip1&quot;</span>, <span class="string">&quot;vip2&quot;</span>, <span class="string">&quot;vip3&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;guest&quot;</span>).password(<span class="string">&quot;&#123;noop&#125;123456&quot;</span>).roles(<span class="string">&quot;vip1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430113845.png" alt=""></p>
<h2 id="注销和权限控制"><a href="#注销和权限控制" class="headerlink" title="注销和权限控制"></a>注销和权限控制</h2><p>该模块涉及前端知识角度，快速过一遍</p>
<p>config/SecurityConfig下开启注销功能（configure方法下添加）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注销成功返回首页</span></span><br><span class="line">http.logout().logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>index.html中登陆按钮下添加注销按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注销搞定！</p>
<p>接下来完成在对应权限登陆后，仅现实当前vip权限能够访问的资源，例如：sliu权限为vip1和vip2，那么在登陆完成后，主页不应该显示level3相关可操作项。</p>
<p>pom.xml下导入thymeleaf-springSecurity整合包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改index.html实现</p>
<p>在用户未登陆时仅显示登陆按钮，用户已登录显示用户名、注销按钮</p>
<p>导入命名空间</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>html下主要两处修改</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> <span class="attr">xmlns:sec</span>=<span class="string">&quot;https://www.thymeleaf.org/thymeleaf-extras-springsecurity5&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--semantic-ui--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/qinjiang/css/qinstyle.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--主容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span> <span class="attr">id</span>=<span class="string">&quot;index-header-nav&quot;</span> <span class="attr">th:fragment</span>=<span class="string">&quot;nav-menu&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui secondary menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>  <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--修改1--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--登录注销--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right menu&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--               未登陆显示登陆按钮--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;!isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 登录</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                登陆成功显示用户名与注销按钮--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/logout&#125;&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;address card icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 注销</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;isAuthenticated()&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                        用户名:<span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                        角色:&lt;span sec:authentication=&quot;principal.getAuthorities()&quot;&gt;&lt;/span&gt;--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--已登录</span></span><br><span class="line"><span class="comment">                &lt;a th:href=&quot;@&#123;/usr/toUserCenter&#125;&quot;&gt;</span></span><br><span class="line"><span class="comment">                    &lt;i class=&quot;address card icon&quot;&gt;&lt;/i&gt; admin</span></span><br><span class="line"><span class="comment">                &lt;/a&gt;</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui segment&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Spring Security Study by 秦疆<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui three column stackable grid&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--修改2--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip1&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level1/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-1-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip2&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level2/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-2-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">sec:authorize</span>=<span class="string">&quot;hasRole(&#x27;vip3&#x27;)&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui raised segment&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ui&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Level 3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/1&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/2&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/level3/3&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;bullhorn icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> Level-3-3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/qinjiang/js/jquery-3.1.1.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/qinjiang/js/semantic.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>SecurityConfig下config方法中开启防止网站攻击</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        防止网站攻击：get&amp;post，登陆失败可能存在的原因</span></span><br><span class="line">        http.csrf().disable();</span><br></pre></td></tr></table></figure>
<p>最终效果图↓：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430113825.png" alt=""></p>
<h2 id="记住我和首页定制"><a href="#记住我和首页定制" class="headerlink" title="记住我和首页定制"></a>记住我和首页定制</h2><p>开启remember me功能，通过cookie保存登陆状态，浏览器关闭后，下次访问无需再次登陆。</p>
<p>SecurityConfig类下config函数内添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        开启记住我，Cookie默认保存两周，同时为了整合自定义的首页，接收前端参数，用于判断remenber me功能在哪里触发</span></span><br><span class="line">        http.rememberMe().rememberMeParameter(<span class="string">&quot;remember&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>首页定制在config函数下添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//没有权限默认跳转登陆页面</span></span><br><span class="line"><span class="comment">//        自定义登录页</span></span><br><span class="line">        http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>).usernameParameter(<span class="string">&quot;user&quot;</span>).passwordParameter(<span class="string">&quot;pwd&quot;</span>).loginProcessingUrl(<span class="string">&quot;/login&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="整合shiro"><a href="#整合shiro" class="headerlink" title="整合shiro"></a>整合shiro</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><a href="https://shiro.apache.org/">shiro官网</a>下载安装包</p>
<p>以下三个概念对于理解shiro如何运行非常重要：</p>
<p>（1）Subject 用户</p>
<p>（2）SecurityManager 管理所有用户</p>
<p>（3）Realm 连接数据</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430113806.png" alt=""></p>
<p>1.导入shiro核心依赖</p>
<p>pom.xml中导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>新建src/main/java/com.xxx.shirospringboot/config/ShiroConfig.java用于配置shiro</p>
<p>2.编写shiro核心配置</p>
<p>该类核心框架如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.shirospringboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ShiroFilterFactoryBean</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//DefaultWebSecurityManager</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建realm对象，需要自定义类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>依次从下向上实现对应模块</p>
<p>（1）创建realm对象</p>
<p>新建config/UserRealm.java自定义Realm</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.shirospringboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义的UserRealm，继承AuthorizingRealm</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了授权======&gt;doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了认证权======&gt;doGetAuthenticationInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2)ShiroConfig中将自定义UserRealm放入容器Bean中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.shirospringboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ShiroFilterFactoryBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span>&#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DefaultWebSecurityManager</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">defaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//关联UserRealm</span></span><br><span class="line">        securityManager.setRealm(userRealm());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建realm对象，需要自定义类</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;userRealm&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Shiro登陆拦截"><a href="#Shiro登陆拦截" class="headerlink" title="Shiro登陆拦截"></a>Shiro登陆拦截</h2><p>要实现对用户的登陆拦截，避免未认证用户进入系统，shiro中需要对自定义配置ShiroConfig中的getShiroFilterFactoryBean中进行过滤器的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ShiroFilterFactoryBean</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span>&#123;</span><br><span class="line">    <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">    <span class="comment">//设置安全管理器</span></span><br><span class="line">    bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加shiro内置过滤器</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    anon: 无需认证即可访问</span></span><br><span class="line"><span class="comment">    authc: 必须认证才能访问</span></span><br><span class="line"><span class="comment">    user: 必须配置记住我 功能才能用</span></span><br><span class="line"><span class="comment">    perms: 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">    role: 拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置user下的资源必须认证才能访问</span></span><br><span class="line">    filterMap.put(<span class="string">&quot;/user/*&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">    bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置认证失败，登陆请求</span></span><br><span class="line">    bean.setLoginUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Shiro用户认证"><a href="#Shiro用户认证" class="headerlink" title="Shiro用户认证"></a>Shiro用户认证</h2><p>MyController.java内引入常规登陆规范检查</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password, Model model)</span>&#123;</span><br><span class="line">    <span class="comment">//获取当前用户</span></span><br><span class="line">    <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装用户登录数据</span></span><br><span class="line">    <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行登陆方法，没有异常就ok了</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        subject.login(token);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (UnknownAccountException e)&#123;<span class="comment">//用户名不存在</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义UserRealm中配置认证</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//认证</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;执行了认证======&gt;doGetAuthenticationInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名，密码 从数据库中取</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">UsernamePasswordToken</span> <span class="variable">userToken</span> <span class="operator">=</span> (UsernamePasswordToken) token;</span><br><span class="line">    <span class="keyword">if</span>(!userToken.getUsername().equals(name))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">//抛出异常 UnkonwnAccountException</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码认证，shiro实现</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(<span class="string">&quot;&quot;</span>,password,<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430113743.png" alt=""></p>
<h2 id="整合mybatis"><a href="#整合mybatis" class="headerlink" title="整合mybatis"></a>整合mybatis</h2><p>pom.xml中引入连接数据库依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>新建application.yml配置数据源</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/company?useUnicode=true&amp;characterEnconding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="comment"># 下面为连接池的补充设置，应用到上面所有数据源中</span></span><br><span class="line">    <span class="comment"># 初始化大小，最小，最大</span></span><br><span class="line">    <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">    <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line">    <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">    <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">    <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 打开PSCache，并且指定每个连接上PSCache的大小</span></span><br><span class="line">    <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">    <span class="comment"># 配置监控统计拦截的 Filter，去掉后监控界面 SQL 无法统计，wall 用于防火墙  日志 log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span>  <span class="comment">#导入了log4j</span></span><br><span class="line">    <span class="attr">use-global-data-source-stat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">    <span class="attr">connect-properties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span></span><br></pre></td></tr></table></figure>
<p>application.properties下配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.sliu.shirospringboot.pojo</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>
<p>新建pojo/User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.shirospringboot.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建com.sliu.shirospringboot/mapper/UserMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.shirospringboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.shirospringboot.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByName</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建resources/mapper/UserMappper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sliu.shirospringboot.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">       select * from user where username =#&#123;username&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>新建service/userService接口和实现类service/UserServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.shirospringboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.shirospringboot.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.shirospringboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.shirospringboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.sliu.shirospringboot.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryUserByName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改自定义UserRealm下认证为数据库获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.shirospringboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.shirospringboot.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.sliu.shirospringboot.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义的UserRealm，继承AuthorizingRealm</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了授权======&gt;doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了认证======&gt;doGetAuthenticationInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户名，密码 从数据库中取</span></span><br><span class="line"><span class="comment">//        String name = &quot;root&quot;;</span></span><br><span class="line"><span class="comment">//        String password = &quot;123456&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">userToken</span> <span class="operator">=</span> (UsernamePasswordToken) token;</span><br><span class="line"><span class="comment">//        if(!userToken.getUsername().equals(name))&#123;</span></span><br><span class="line"><span class="comment">//            return null; //抛出异常 UnkonwnAccountException</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码认证，shiro实现</span></span><br><span class="line"><span class="comment">//        return new SimpleAuthenticationInfo(&quot;&quot;,password,&quot;&quot;);</span></span><br><span class="line">        <span class="comment">//真实数据库获取账号密码并核验正确性</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByName(userToken.getUsername());</span><br><span class="line">        <span class="comment">//用户不存在</span></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//UnknownAccountException</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码认证，code无明文密码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(<span class="string">&quot;&quot;</span>,user.getPassword(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Shiro请求授权"><a href="#Shiro请求授权" class="headerlink" title="Shiro请求授权"></a>Shiro请求授权</h2><p>（1）设置权限</p>
<p>添加认证信息</p>
<p>这里需要留意的点在于以下两个授权的先后顺序，写反了导致所有用户都能访问到/user/add，调bug一小时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">filterMap.put(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置user下的资源必须认证才能访问</span></span><br><span class="line">filterMap.put(<span class="string">&quot;/user/*&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.shirospringboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ShiroFilterFactoryBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span>&#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        bean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加shiro内置过滤器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        anon: 无需认证即可访问</span></span><br><span class="line"><span class="comment">        authc: 必须认证才能访问</span></span><br><span class="line"><span class="comment">        user: 必须配置记住我 功能才能用</span></span><br><span class="line"><span class="comment">        perms: 拥有对某个资源的权限才能访问</span></span><br><span class="line"><span class="comment">        role: 拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//设置授权，正常情况下，未授权跳转到未授权页面</span></span><br><span class="line">        <span class="comment">//只有拥有user:add权限的用户才能访问/user/add资源</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>, <span class="string">&quot;perms[user:update]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置user下的资源必须认证才能访问</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/*&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置认证失败，登陆请求</span></span><br><span class="line">        bean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置未授权跳转页面</span></span><br><span class="line">        bean.setUnauthorizedUrl(<span class="string">&quot;/unauthor&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DefaultWebSecurityManager</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">defaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span>&#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//关联UserRealm</span></span><br><span class="line">        securityManager.setRealm(userRealm());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建realm对象，需要自定义类</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;userRealm&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430113643.png" alt=""></p>
<p>（2）授予用户权限</p>
<p>为了方便权限管理，修改数据库user表，添加一个perm字段用于存储用户权限信息，表结构如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430113625.png" alt=""></p>
<p>修改pojo/User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.shirospringboot.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String perm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自定义UserRealm通过获取当前Subject附带的User对象获取当前用户权限perm信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.shirospringboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.shirospringboot.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.sliu.shirospringboot.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义的UserRealm，继承AuthorizingRealm</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了授权======&gt;doGetAuthorizationInfo&quot;</span>);</span><br><span class="line">        <span class="comment">//SimpleAuthorizationInfo</span></span><br><span class="line">        <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前登陆的对象Subject</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">User</span> <span class="variable">currentUser</span> <span class="operator">=</span> (User) subject.getPrincipal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前用户权限</span></span><br><span class="line">        info.addStringPermission(currentUser.getPerm());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回info</span></span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了认证======&gt;doGetAuthenticationInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户名，密码 从数据库中取</span></span><br><span class="line"><span class="comment">//        String name = &quot;root&quot;;</span></span><br><span class="line"><span class="comment">//        String password = &quot;123456&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">userToken</span> <span class="operator">=</span> (UsernamePasswordToken) token;</span><br><span class="line"><span class="comment">//        if(!userToken.getUsername().equals(name))&#123;</span></span><br><span class="line"><span class="comment">//            return null; //抛出异常 UnkonwnAccountException</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码认证，shiro实现</span></span><br><span class="line"><span class="comment">//        return new SimpleAuthenticationInfo(&quot;&quot;,password,&quot;&quot;);</span></span><br><span class="line">        <span class="comment">//真实数据库获取账号密码并核验正确性</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByName(userToken.getUsername());</span><br><span class="line">        <span class="comment">//用户不存在</span></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//UnknownAccountException</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//支持加密</span></span><br><span class="line">        <span class="comment">//密码认证，code无明文密码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(user, user.getPassword(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Shiro整合Thymeleaf"><a href="#Shiro整合Thymeleaf" class="headerlink" title="Shiro整合Thymeleaf"></a>Shiro整合Thymeleaf</h2><p>该部分功能实现对应权限仅显示对于功能页（即如果sliu仅拥有add权限，登陆主页后，应仅显示add操作按钮，而隐藏update操作按钮）</p>
<p>pom.xml中导入shiro-thymeleaf整合依赖包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>ShiroConfig中进行配置整合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//整合ShiroDialect 用来整合Shiro Thymeleaf</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ShiroDialect <span class="title function_">getShiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>！！！以下为部分前端知识</p>
<p>修改主页html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.thymeleaf.org/thymeleaf-extras-shiro&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>实现效果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430113525.png" alt=""></p>
<p>当前在登陆上存在的问题是，登陆成功后仍然显示登陆按钮。通过在登陆认证时设置当前用户的Session，前端判断Session为空时才显示登陆按钮</p>
<p>自定义UserRealm类下添加认证时设置Session</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了认证======&gt;doGetAuthenticationInfo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户名，密码 从数据库中取</span></span><br><span class="line"><span class="comment">//        String name = &quot;root&quot;;</span></span><br><span class="line"><span class="comment">//        String password = &quot;123456&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">userToken</span> <span class="operator">=</span> (UsernamePasswordToken) token;</span><br><span class="line"><span class="comment">//        if(!userToken.getUsername().equals(name))&#123;</span></span><br><span class="line"><span class="comment">//            return null; //抛出异常 UnkonwnAccountException</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码认证，shiro实现</span></span><br><span class="line"><span class="comment">//        return new SimpleAuthenticationInfo(&quot;&quot;,password,&quot;&quot;);</span></span><br><span class="line">        <span class="comment">//真实数据库获取账号密码并核验正确性</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByName(userToken.getUsername());</span><br><span class="line">        <span class="comment">//用户不存在</span></span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//UnknownAccountException</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Subject</span> <span class="variable">currentSubject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> currentSubject.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;loginUser&quot;</span>, user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//支持加密</span></span><br><span class="line">        <span class="comment">//密码认证，code无明文密码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(user, user.getPassword(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>index.html下添加判断session是否为空</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser==null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span>登陆<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>成功登陆后不再显示登陆按钮</p>
<p> <img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430113358.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本part中整合了常用安全框架SpringSecurity和Shiro，介绍了两种框架下如何实现用户的授权和认证</p>
<p>认证授权搞定√</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/QQ20220331104633.gif" alt=""></p>
]]></content>
      <categories>
        <category>Little eagle</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Little eagle - SpringBoot实战管理系统(二)</title>
    <url>/posts/50402.html</url>
    <content><![CDATA[<h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><p>part1中利用HashMap模拟数据库实现了对数据的增删改查操作，对SpringBoot的特性和使用有了一定了解。</p>
<p>part2整合各类主流的DataSource和数据库组件。</p>
<p>涉及到的数据库源和相关技术点移步左侧一级标题。</p>
<p>环境：jdk v.1.8.0</p>
<p>项目地址：</p>
<p>整合jdbc&amp;druid</p>
<p><a href="https://github.com/codersliu/springboot04-jdbcLearning">https://github.com/codersliu/springboot04-jdbcLearning</a></p>
<p>整合mybatis</p>
<p><a href="https://github.com/codersliu/springboot05-mybatis/tree/master">https://github.com/codersliu/springboot05-mybatis/tree/master</a></p>
<p>资源自取↑</p>
<h1 id="整合JDBC"><a href="#整合JDBC" class="headerlink" title="整合JDBC"></a>整合JDBC</h1><p>创建项目时勾选web和JDBC相关依赖↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/image-20220405100520648.png" alt=""></p>
<p>新建resources/application.yml代替原application.properties配置数据源</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/company?useUnicode=true&amp;characterEnconding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
<p>新建controller/jdbcController逐步实现对数据库的增删改查，这里mysql下新建了一个数据源company，新建了一个user表，数据库操作在该表中实现，表结构↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/image-20220405100958950.png" alt=""></p>
<p>tips：controller文件夹文件结构一定要正确（project/src/main/java/com.xxxxxxx/controller），刚开始编写时错放在project/src/main/java/controller下，导致无法访问到资源，找bug找了1h，麻中麻。</p>
<p>crud开始！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot04jdbclearning.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.glassfish.gmbal.ParameterNames;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbcController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有user信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/jdbcSelect&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">jdbcSelect</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入新user信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/jdbcInsert&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jdbcInsert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into company.user(id, username, password) values (6, &#x27;junjw&#x27;, &#x27;4545456&#x27;)&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;message==&gt;insert ok!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据传入id修改user信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/jdbcUpdate/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jdbcUpdate</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update company.user set username=?, password=? where id=&quot;</span>+id;</span><br><span class="line">        Object[] newUser = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">2</span>];</span><br><span class="line">        newUser[<span class="number">0</span>] = <span class="string">&quot;yaoww&quot;</span>;</span><br><span class="line">        newUser[<span class="number">1</span>] = <span class="string">&quot;112233&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, newUser);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;message==&gt;update ok!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据传入id删除user信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;jdbcDelete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jdbcDelete</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;delete from company.user where id=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql, id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;message==&gt;delete ok!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/image-20220405102549408.png" alt=""></p>
<h1 id="整合Druid"><a href="#整合Druid" class="headerlink" title="整合Druid"></a>整合Druid</h1><p><a href="https://github.com/alibaba/druid/wiki/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">Druid-alibaba官方文档</a></p>
<p>pom.xml中导入druid和log4j依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>application.yaml中对druid连接池等参数进行配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/company?useUnicode=true&amp;characterEnconding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">      <span class="comment"># 下面为连接池的补充设置，应用到上面所有数据源中</span></span><br><span class="line">      <span class="comment"># 初始化大小，最小，最大</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 打开PSCache，并且指定每个连接上PSCache的大小</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">        <span class="comment"># 配置监控统计拦截的 Filter，去掉后监控界面 SQL 无法统计，wall 用于防火墙  日志 log4j</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span>  <span class="comment">#导入了log4j</span></span><br><span class="line">      <span class="attr">use-global-data-source-stat:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">      <span class="attr">connect-properties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span></span><br></pre></td></tr></table></figure>
<p>整合Druid关键在于开启管理页面</p>
<p>新建config/DruidConfig，配置ServletRegistrationBean和FilterRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot04jdbclearning.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidConfig</span> &#123;</span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    后台监控：web.xml， ServletRegistrationBean</span></span><br><span class="line">    <span class="comment">//SpringBoot内置servlet容器，没有web.xml，使用替代类ServletRegistrationBean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">statViewServlet</span><span class="params">()</span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">StatViewServlet</span>(), <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置后台登陆账号密码</span></span><br><span class="line">        HashMap&lt;String, String&gt; initParameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        initParameters.put(<span class="string">&quot;loginUsername&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        initParameters.put(<span class="string">&quot;loginPassword&quot;</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置白名单，允许访问的对象</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;allow&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置黑名单</span></span><br><span class="line"><span class="comment">//        initParameters.put(&quot;sliu&quot;, &quot;192.168.11.12&quot;);</span></span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//filter 配置过滤器</span></span><br><span class="line">    <span class="comment">//和拦截器过滤可访问资源不同</span></span><br><span class="line">    <span class="comment">//该过滤器用于过滤哪些资源可以被druid监测到</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">webStatFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> <span class="title class_">WebStatFilter</span>());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; initParameters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不进行监控的资源</span></span><br><span class="line">        initParameters.put(<span class="string">&quot;exclusions&quot;</span>, <span class="string">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bean.setInitParameters(initParameters);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/image-20220405152216615.png" alt=""></p>
<h1 id="整合mybatis"><a href="#整合mybatis" class="headerlink" title="整合mybatis"></a>整合mybatis</h1><p>新建项目，导入以下依赖</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/image-20220405155015878.png" alt=""></p>
<p>pom.xml下手动导入mybatis依赖和lombok依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>新建resources/application.yml配置数据源</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/company?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>
<p>新建实体类/pojo/User.java封装数据库company下的user表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot05mybatis.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建接口mapper/UserMapper.java作为dao层封装对数据库的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot05mybatis.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springboot05mybatis.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">getUserById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">addUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建resources/mybatis/mapper/UserMapper.xml完成mapper绑定</p>
<p><a href="https://mybatis.org/mybatis-3/zh/getting-started.html">mybatis官方中文文档</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.springboot05mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAllUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        insert into user (id, username, password) values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        update user set uesrname=#&#123;username&#125;,password=#&#123;password&#125;, where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>application.yml下整合mybatis</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#整合mybatis</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.springboot05mybatis.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure>
<p>新建controller/UserController封装业务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springboot05mybatis.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.springboot05mybatis.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.springboot05mybatis.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getAllUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUser</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; allUser = userMapper.getAllUser();</span><br><span class="line">        <span class="keyword">for</span> (User user : allUser) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> allUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUserById/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.getUserById(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userMapper.addUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">5</span>, <span class="string">&quot;jojo&quot;</span>, <span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;message==&gt;addUser ok!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateUser</span><span class="params">()</span>&#123;</span><br><span class="line">        userMapper.updateUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">5</span>, <span class="string">&quot;marry&quot;</span>, <span class="string">&quot;29934&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;message==&gt;updateUser ok!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;deleteUser/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line">        userMapper.deleteUser(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;message==&gt;deleteUser ok!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里get到一个疑问，为什么在写业务层时都使用@RestController而不是@Controller？</p>
<p><a href="https://www.cnblogs.com/east7/p/10462279.html">@RestController和@Controller区别在于</a>前者无法返回指定页面，需要配合视图解析器InternalResourceViewResolver;而后者无法返回json等内容，需要配合@ResponseBody实现。</p>
<p>整合mybatis最终效果如↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/image-20220405193523893.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本节内容整合了常用数据源JDBC、Druid和Mybatis，完成了真实数据库下的编码。</p>
<p>第3part中整合安全环境SpringSecurity和Shiro实现用户认证和授权等模块。</p>
<p>数据库搞定！</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/QQ20220331104633.gif" alt=""></p>
]]></content>
      <categories>
        <category>Little eagle</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Little eagle - SpringBoot实战管理系统(五)redis</title>
    <url>/posts/35413.html</url>
    <content><![CDATA[<p>项目<strong>源码</strong>自取↓：</p>
<p>异步、邮件与定时任务：</p>
<p><a href="https://github.com/codersliu/springtest">https://github.com/codersliu/springtest</a></p>
<p>springboot整合redis:</p>
<p><a href="https://github.com/codersliu/springboot10-redisTest">https://github.com/codersliu/springboot10-redisTest</a></p>
<h1 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h1><p>在开发环境中，对于不能实时返回用户数据的处理过程，应当在处理前通知用户，并在计算完成后返回计算结果。即通过异步任务，在数据开始处理时通知用户当前信息正在处理，处理完毕后返回结果。</p>
<p>通过一个example理解什么是异步任务</p>
<p>新建AsynService用于暂停程序执行，模拟在异步任务中，数据处理过程中的计算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springtest.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsynService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;processing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建AsynController用于模拟开始计算及返回计算结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springtest.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springtest.service.AsynService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsynController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AsynService asynService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        asynService.hello();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问localhost://8080/hello后，暂停三秒返回“OK！”信息，控制台打印“processing”</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220501212939.png" alt=""></p>
<p>为了实现异步任务而手动编写多线程，阻碍了开发的便利</p>
<p>而spring框架提供操作简便的异步任务注解  解决了该问题</p>
<p>在AsynService上添加@Async注解，指示该服务为一个异步任务</p>
<p>同时在Application上添加@EnableAsync开启异步任务</p>
<p>此时，访问/hello能够得到的结果是，浏览器立即返回“OK！”，而控制台在3s后打印“processing”。不同于手动编写线程实现暂停的过程，该方案下，返回信息不需要等待AsynService中hello()方法执行完毕再开始下一步，而是异步地完成自身任务。</p>
<h1 id="邮箱任务"><a href="#邮箱任务" class="headerlink" title="邮箱任务"></a>邮箱任务</h1><p>pom.xml下导入spring-boot-starter-mail依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>application.properties下配置邮件信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.mail.username</span>=<span class="string">1653698757@qq.com</span></span><br><span class="line"><span class="attr">spring.mail.password</span>=<span class="string">jkyhvjgypfppghae</span></span><br><span class="line"><span class="attr">spring.mail.host</span>=<span class="string">smtp.qq.com</span></span><br><span class="line"><span class="comment">#开启加密验证</span></span><br><span class="line"><span class="attr">spring.mail.properties.mail.smtp.ssl.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
<p>其中邮箱为了避免密码外泄，qq邮箱使用了令牌代替，在设置中开启pop3/smtp服务并生成授权码即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220501212911.png" alt=""></p>
<p>配置完成，准备测试发送邮件</p>
<p>1.发送简单邮件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JavaMailSenderImpl mailSender;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">simEmail</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">SimpleMailMessage</span> <span class="variable">mailMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">    <span class="comment">//邮件主题</span></span><br><span class="line">    mailMessage.setSubject(<span class="string">&quot;简单邮件测试-codersliu&quot;</span>);</span><br><span class="line">    <span class="comment">//邮件正文</span></span><br><span class="line">    mailMessage.setText(<span class="string">&quot;你好啊，csusliu，万事胜意！&quot;</span>);</span><br><span class="line">    <span class="comment">//邮件接收方</span></span><br><span class="line">    mailMessage.setTo(<span class="string">&quot;shunliu@csu.edu.cn&quot;</span>);</span><br><span class="line">    <span class="comment">//邮件发送方</span></span><br><span class="line">    mailMessage.setFrom(<span class="string">&quot;1653698757@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mailSender.send(mailMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>收发成功↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220501212854.png" alt=""></p>
<p>2.发送复杂邮件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">compEmail</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">    <span class="comment">//复杂邮件</span></span><br><span class="line">    <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> mailSender.createMimeMessage();</span><br><span class="line">    <span class="comment">//组装,开启多附件上传</span></span><br><span class="line">    <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正文</span></span><br><span class="line">    helper.setSubject(<span class="string">&quot;复杂邮件测试-codersliu&quot;</span>);</span><br><span class="line">    <span class="comment">//开启html格式</span></span><br><span class="line">    helper.setText(<span class="string">&quot;&lt;p style=&#x27;color:red&#x27;&gt;你好啊，csusliu，万事胜意~&lt;/p&gt;&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//附件，开启了多附件上传</span></span><br><span class="line">    helper.addAttachment(<span class="string">&quot;1109233.jpg&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Pictures\\1109233.jpg&quot;</span>));</span><br><span class="line">    helper.addAttachment(<span class="string">&quot;CHNN.vsdx&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\Users\\Administrator\\Desktop\\CHNN.vsdx&quot;</span>));</span><br><span class="line"></span><br><span class="line">    helper.setTo(<span class="string">&quot;shunliu@csu.edu.cn&quot;</span>);</span><br><span class="line">    helper.setFrom(<span class="string">&quot;1653698757@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">    mailSender.send(mimeMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试收发成功↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220501212840.png" alt=""></p>
<h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><p>如何指定一个任务按照提前规划的时间执行？</p>
<p>Application下开启Scheduled</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span>   <span class="comment">//开启定时任务的注解</span></span><br></pre></td></tr></table></figure>
<p>新建service/ScheduleService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springtest.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        30 10 11 * * ?      每天11:30:11执行一次</span></span><br><span class="line"><span class="comment">        30 0/5 10,18 * * ?  每天10和18点，每隔五分钟执行一次</span></span><br><span class="line"><span class="comment">        0 15 10 ? * 1-6     每个月周1-6，10:15:00执行一次</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;50 16 11 * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了====&gt;Schedule指定的hello！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试通过↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220501212822.png" alt=""></p>
<h1 id="SpringBoot集成Redis"><a href="#SpringBoot集成Redis" class="headerlink" title="SpringBoot集成Redis"></a>SpringBoot集成Redis</h1><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>新建项目，导入以下依赖</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220501212804.png" alt=""></p>
<p>application.properties下配置Redis服务</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置Redis</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure>
<p>添加测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">redisTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//  redisTemplate   操作不同数据类型，api和指令一致</span></span><br><span class="line">        <span class="comment">//  opsForValue     操作字符串   类似String</span></span><br><span class="line">        <span class="comment">//  opsForList      操纵List    类似List</span></span><br><span class="line">        <span class="comment">//  opsForSet</span></span><br><span class="line">        <span class="comment">//  opsForHash</span></span><br><span class="line">        <span class="comment">//  opsForZSet</span></span><br><span class="line">        <span class="comment">//  opsForGeo</span></span><br><span class="line">        <span class="comment">//  opsForHyperLogLog</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  除了基本操作，常用方法直接通过redisTemplate操作，比如事务和基本CRUD</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  获取redis连接对象</span></span><br><span class="line"><span class="comment">//        RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line"><span class="comment">//        connection.flushDb();</span></span><br><span class="line"><span class="comment">//        connection.flushAll();</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;mykey&quot;</span>,<span class="string">&quot;sliu&#x27;s redis test&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;mykey&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>运行测试类，运行前需要开启redis服务。在redis安装目录下，执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220501212751.png" alt=""></p>
<h2 id="自定义redisTemplate"><a href="#自定义redisTemplate" class="headerlink" title="自定义redisTemplate"></a>自定义redisTemplate</h2><p>以上测试过程中，对于set的redis键值对，查询结果为乱码，这是由于在插入键值对时未对其进行序列化，需要通过自定义redisTemplate解决该问题</p>
<p>新建config/RedisConfig自定义RedisTemplate并指定序列化方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot10redistest.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义RedisTemplate</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span>&#123;</span><br><span class="line">        <span class="comment">//为了便于开发，一般直接使用&lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//json序列化配置</span></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String的序列化</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">//hash的key也采用String的序列号方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">//value采用jackson序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//hash的value采用jackson序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试方法中替换自动注入的template为上面自定义模版</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;redisTemplate&quot;)</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">redisTest</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//  redisTemplate   操作不同数据类型，api和指令一致</span></span><br><span class="line">        <span class="comment">//  opsForValue     操作字符串   类似String</span></span><br><span class="line">        <span class="comment">//  opsForList      操纵List    类似List</span></span><br><span class="line">        <span class="comment">//  opsForSet</span></span><br><span class="line">        <span class="comment">//  opsForHash</span></span><br><span class="line">        <span class="comment">//  opsForZSet</span></span><br><span class="line">        <span class="comment">//  opsForGeo</span></span><br><span class="line">        <span class="comment">//  opsForHyperLogLog</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  除了基本操作，常用方法直接通过redisTemplate操作，比如事务和基本CRUD</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  获取redis连接对象</span></span><br><span class="line"><span class="comment">//        RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line"><span class="comment">//        connection.flushDb();</span></span><br><span class="line"><span class="comment">//        connection.flushAll();</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;mykey&quot;</span>,<span class="string">&quot;sliu&#x27;s redis test&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;mykey&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>运行后再次在redis-cli中进行查询，不再有乱码</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220501212729.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本part后理解了如何开发带有定时任务、异步任务的需求，同时掌握了如何发送邮件。并对如何集成redis、键值对的序列化有了初步了解。</p>
<p>bye~</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/QQ20220331104633.gif" alt=""></p>
]]></content>
      <categories>
        <category>Little eagle</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Little eagle - SpringBoot实战管理系统(六)分布式</title>
    <url>/posts/19843.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本部分所涉及到的分布式系统理论和RPC的概念这块较干，尽量以通熟易懂的例子为引子展开表述。便于理解~</p>
<h1 id="分布式系统理论"><a href="#分布式系统理论" class="headerlink" title="分布式系统理论"></a>分布式系统理论</h1><p>分布式可以理解通过多个计算性能弱的服务器来完成计算资源需求大的计算任务</p>
<p>分布式和集群的概念很容易混淆</p>
<p>弹幕看到一个浅显易懂的例子可以帮助理解什么是分布式↓</p>
<p><em>小饭店原来只有一个厨师，切菜洗菜备料炒菜全干。后来客人多了，厨房一个厨师忙不过来，又请了个厨师，两个厨师都能<strong>炒一样的菜</strong>，这两个厨师的关系是<strong>集群</strong>。</em></p>
<p><em>为了让厨师专心炒菜，把菜做到极致，又请了个配菜师负责切菜，备菜，备料，<strong>厨师和配菜师</strong>的关系是<strong>分布式</strong>，一个配菜师也忙不过来了，又请了个配菜师，两个配菜师关系是集群</em></p>
<p>简单理解，分布式是一个系统，而集群是一个模块</p>
<p>分布式系统<strong>概念</strong>：建立在网络上的软件系统。由一组通过网络进行通信，为了完成共同的任务而协调工作的计算机节点组成的系统，利用廉价、普通机器完成单个计算机无法完成的计算存储任务。其目的是利用更多的机器，处理更多的数据。</p>
<h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><p><a href="https://zhuanlan.zhihu.com/p/36427583">什么是RPC（remote procedure call）</a>中一个例子很好的诠释了什么是远程调用：</p>
<p><em>一个阳光明媚的早晨，老婆又在翻看我订阅的技术杂志。</em></p>
<p><em>“老公，什么是RPC呀，为什么你们程序员那么多黑话！”，老婆还是一如既往的好奇。</em><br><em>“RPC，就是<strong>Remote Procedure Call</strong>的简称呀，翻译成中文就是<strong>远程过程调用</strong>嘛”，我一边看着书，一边漫不经心的回答着。</em><br><em>“啥？你在说啥？谁不知道翻译成中文是什么意思？你个废柴，快给我滚去洗碗！”</em><br><em>“我去。。。”，我如梦初醒，我对面坐着的可不是一个程序员，为了不去洗碗，我瞬间调动起全部脑细胞，星辰大海在我脑中汇聚，灵感涌现……</em></p>
<p><em>“是这样，远程过程调用，自然是相对于本地过程调用来说的嘛。”</em><br><em>“嗯哼，那先给老娘讲讲，本地过程调用是啥子？”</em><br><em>“本地过程调用，就好比你现在在家里，你要想洗碗，那你直接把碗放进洗碗机，打开洗碗机开关就可以洗了。这就叫本地过程调用。”</em></p>
<p><em>“哎呦，我可不干，那啥是远程过程调用？”</em><br><em>“远程嘛，那就是你现在不在家，跟姐妹们浪去了，突然发现碗还没洗，打了个电话过来，叫我去洗碗，这就是远程过程调用啦”，多么通俗易懂的解释，我真是天才！</em></p>
<p><em>“哦！我明白了”，说着，老婆开始收拾包包。</em><br><em>“你这是干啥去哦”</em><br><em>“我？我要出门浪去呀，待会记得接收我的远程调用哦，哦不，咱们要专业点，应该说，待会记得接收我的RPC哦！”</em><br><em>……</em></p>
<p>RPC远程方法调用，首先要理解什么是<strong>远程方法调用</strong>，区分于本地方法调用。</p>
<p>例如在本地程序中A方法中调用了B方法为本地方法调用。</p>
<p>而如果要调用的B方法在另一台机器上呢，这时<strong>跨机器</strong>的方法调用即为远程方法调用。</p>
<p>而跨机器的方法调用依赖于网络实现，所以相比于本地方法调用，远程方法调用的难点就在于<strong>网络不可靠</strong></p>
<p>okok，带着以上对远程方法调用的初步理解，来看看RPC的定义：</p>
<p>RPC是指远程过程调用，是一种进程间通信方式，RPC是一种技术思想，而不是一种硬性规范，其实现方式具有一定的灵活性。RPC允许程序调用另一个地址空间（通常是共享网络上的另一台机器）上的过程或函数。对于编程人员来说，无论调用本地还是远程函数，应该是不可感知的，即调用代码基本相同。不用显式编码远程调用细节</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220503201137.png" alt=""></p>
<p>步骤解析：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220503201113.png" alt=""></p>
<p>RPC的两个<strong>核心模块：</strong></p>
<ul>
<li><strong>通讯</strong></li>
<li><strong>序列化</strong>(用于机器间的对象传输)</li>
</ul>
<h1 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>RPC介绍中了解到其为一种思想，而Dubbo即为该思想的一个具体实现，Dubbo是一种高可用的RPC框架。</p>
<p><a href="https://dubbo.apache.org/zh/index.html">Dubbo官网</a></p>
<p>什么是Dubbo？Apache Dubbo是一款高性能、轻量级的开源Java RPC框架，其三大核心能力：</p>
<ul>
<li>面向接口的远程方法调用</li>
<li>智能容错和负载均衡</li>
<li>服务自动注册和发现</li>
</ul>
<p>其整体框架如↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220503201057.png" alt=""></p>
<p>框架表明仅invoke为同步操作</p>
<p><strong>Provider：暴露服务的服务提供方，服务提供方在启动时，向注册中心注册自身所提供的服务</strong></p>
<p>Consumer：调用服务的消费方，启动时向注册中心订阅服务，Provider从地址列表中，基于软负载均衡算法，选一个Provider调用，如调用失败切换一台继续调用</p>
<p><strong>Registry：注册中心返回Provider列表给Consumer，如有变动，注册中心将基于长连接推送变更数据给Consumer</strong></p>
<p><strong>Monitor：Consumer和Provider，在内存中累计调用次数和时间，定时每分钟发送一次统计数据到Monitor</strong></p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="zookeeper-控制中心"><a href="#zookeeper-控制中心" class="headerlink" title="zookeeper-控制中心"></a>zookeeper-控制中心</h3><p>利用<strong>zookeeper</strong>提供服务注册与发现（即Registry）</p>
<p><a href="https://dlcdn.apache.org/zookeeper/zookeeper-3.8.0/apache-zookeeper-3.8.0-bin.tar.gz">下载zookeeper</a>并解压，以<strong>管理员身份</strong>！！！运行bin目录下的zkserver.cmd启动服务（如遇闪退，出门右拐：<a href="https://blog.csdn.net/qq279862451/article/details/79083522">Windows下Zookeeper启动zkServer.cmd闪退问题的解决方案</a>）</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220503201041.png" alt=""></p>
<p>运行zkcli.cmd客户端（需要先运行zkserver.cmd开启服务才能连接成功）</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220503201015.png" alt=""></p>
<h3 id="安装dubbo-admin"><a href="#安装dubbo-admin" class="headerlink" title="安装dubbo-admin"></a>安装dubbo-admin</h3><p>dubbo-admin是一个监控管理后台，能够查看注册了哪些服务以及哪些服务被消费了，配置过程如下</p>
<ol>
<li><p>下载并解压<a href="https://github.com/apache/dubbo-admin/tree/master-0.2.0">dubbo-admin项目包</a></p>
</li>
<li><p>修改dubbo-admin-master-0.2.0\dubbo-admin\src\main\resources\application.properties指定zookeeper地址</p>
</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">7001</span></span><br><span class="line"><span class="attr">spring.velocity.cache</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">spring.velocity.charset</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="attr">spring.velocity.layout-url</span>=<span class="string">/templates/default.vm</span></span><br><span class="line"><span class="attr">spring.messages.fallback-to-system-locale</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">spring.messages.basename</span>=<span class="string">i18n/message</span></span><br><span class="line"><span class="attr">spring.root.password</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.guest.password</span>=<span class="string">guest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ol>
<li><p>项目目录下打包dubbo-admin</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mvn clean <span class="keyword">package</span> -D maven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>如提示mvn不是内部或外部命令，查看<a href="https://www.runoob.com/maven/maven-setup.html">Maven环境配置及介绍</a></p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220503200959.png" alt=""></p>
<p>打包完成后在dubbo-admin-master-0.2.0\dubbo-admin\target下构建了dubbo-admin-0.0.1-SNAPSHOT.jar包，将其放入zookeeper根目录下方便后续使用。双击启动jar包</p>
<p>访问localhost:7071</p>
<p>默认账号root密码root</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220503200943.png" alt=""></p>
<p>登陆成功↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220503200928.png" alt=""></p>
<h1 id="服务注册发现实战"><a href="#服务注册发现实战" class="headerlink" title="服务注册发现实战"></a>服务注册发现实战</h1><p>新建一个empty项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220503200915.png" alt=""></p>
<p>project-server项目下新建一个spring initalizr模块provider-server</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220503200857.png" alt=""></p>
<p>模拟一个买票服务，新建service/TicketService及其实现类TicketServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.providerserver.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TicketService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTicket</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.providerserver.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//  项目启动时将该服务注册到注册中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">TicketService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTicket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;《程序员评测室》&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>服务端搞定，注册中心要注册的服务即为TicketService</p>
<p>新建一个客户端spring initalizr模块consumer-server</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220503200843.png" alt=""></p>
<p>分别在两个模块的application.properties下设置端口号，consumer-server设置为8001，provider-server设置为8002</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//consumer-server</span></span><br><span class="line">server.port=<span class="number">8001</span></span><br><span class="line"><span class="comment">//provider-server</span></span><br><span class="line">server.port=<span class="number">8002</span></span><br></pre></td></tr></table></figure>
<p><strong>provider-server</strong>下pom.xml下导入dubbo&amp;zookeeper依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        导入dubbo和zookeeper依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            排除这个slf4j-log4j12--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>application.properties下对dubbo进行配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8002</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#服务应用名字</span></span><br><span class="line"><span class="attr">dubbo.application.name</span>=<span class="string">provider-server</span></span><br><span class="line"><span class="comment">#注册中心地址</span></span><br><span class="line"><span class="attr">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="comment">#哪些路径下的服务被注册</span></span><br><span class="line"><span class="attr">dubbo.scan.base-packages</span>=<span class="string">com.sliu.providerserver.service</span></span><br></pre></td></tr></table></figure>
<p>配置完成后开启ProviderServerApplication，启动后自动注册provicerserver</p>
<p><a href="http://localhost:7001/governance/providers">http://localhost:7001/governance/providers</a>    下可以观察到注册服务列表</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220503200826.png" alt=""></p>
<p>该服务详细信息↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220503200813.png" alt=""></p>
<p>OK！到此服务注册完毕，provider端配置完成。</p>
<p>接下来编码Consumer端</p>
<p>pom.xml下导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        导入dubbo和zookeeper依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            排除这个slf4j-log4j12--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>新建service/UserService用于获取provider提供的ticket</p>
<p>为了实现服务请求，需要将provider-server模块下service/TicketService拷贝到consumer-server模块下service目录下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.consumerserver.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.nashorn.internal.ir.annotations.Reference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>    <span class="comment">//放到容器中，区别于dubbo包下的service用于标识注册到服务中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">//拿到Provider-server提供的Ticket</span></span><br><span class="line">    <span class="meta">@Reference</span>  <span class="comment">//引用，   pom坐标，可以定义路径相同的接口名</span></span><br><span class="line">    TicketServiceImpl ticketService;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyTicket</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ticket</span> <span class="operator">=</span> ticketService.getTicket();</span><br><span class="line">        System.out.println(<span class="string">&quot;注册中心获取=====&gt;&quot;</span>+ticket);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.consumerserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.consumerserver.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConsumerServerApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.buyTicket();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行test下contextLoads方法，搞定！</p>
<p>梳理一下服务注册与发现流程，大体如下：</p>
<p><strong>前提</strong>：zookeeper服务已开启</p>
<ol>
<li>provider提供服务<ul>
<li>导入依赖</li>
<li>配置注册中心信息</li>
<li>要注册的服务上添加注解@Service</li>
</ul>
</li>
<li>consumer消费<ul>
<li>导入依赖</li>
<li>配置注册中心信息</li>
<li>从远程注入服务@Reference</li>
</ul>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>该part后，狂神springboot练手项目告一段落</p>
<p>撒花完结！</p>
<p>Dubbo+ZooKeeper源码自取：</p>
<p><a href="https://github.com/codersliu/project-server">https://github.com/codersliu/project-server</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/QQ20220331104633.gif" alt=""></p>
]]></content>
      <categories>
        <category>Little eagle</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>Dubbo</tag>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>Little eagle - SpringBoot实战管理系统(四)Swagger</title>
    <url>/posts/48572.html</url>
    <content><![CDATA[<h1 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h1><p>当前开发中<strong>前后端分离</strong>通过API实现，前端页面封装数据在json文件中模拟pojo中的实体类信息，后端与前端交互时通过接口获取的信息替换json中的模拟数据，实现前后端的分离。该开发模式中前后端分离程度高，甚至可以将前后端部署在不同服务器上。</p>
<p>存在的问题是<strong>前后端集成联调</strong>的过程中<strong>信息不同步</strong>会导致开发受阻（例如对于前端需求，后端开发了对应的接口，而此时需求变更，前端需要添加一个信息字段。后端就需要对数据库、接口等进行编码）。因而如何让需求变更在前后端开发人员之前保持实时同步，对于避免此类开发危机至关重要。</p>
<p>早期的解决方案中，前端使用postman进行后端返回的接口测试。而后端负责提供接口，而关键就在于<strong>后端需要保证接口信息变动的实时同步</strong>，提前制定Schema。</p>
<p>为了解决后端实时同步接口变动信息，Swagger应运而生。</p>
<p>Swagger特性：</p>
<ul>
<li>RestFul风格的API文档在线自动生成工具=&gt;<strong>Api文档与Api定义同步更新</strong></li>
<li>直接运行，在线测试Api接口</li>
<li>支持多种语言</li>
</ul>
<p><a href="https://swagger.io/">Swagger官网</a></p>
<p>使用Swagger需要导入springbox    jar包，包括：</p>
<ul>
<li>swagger2</li>
<li>ui</li>
</ul>
<p><strong>项目源码</strong>自取↓：</p>
<p><a href="https://github.com/codersliu/springboot09-swagger">https://github.com/codersliu/springboot09-swagger</a></p>
<h1 id="SpringBoot集成Swagger"><a href="#SpringBoot集成Swagger" class="headerlink" title="SpringBoot集成Swagger"></a>SpringBoot集成Swagger</h1><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>新建项目，pom.xml下引入springfox-swagger依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        swagger--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>新建Swagger/controller/HelloController.java用于测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot09swagger.swagger.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Swagger&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建swagger/config/SwaggerConfig开启Swagger2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot09swagger.swagger.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span>  <span class="comment">//开启Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动项目出现兼容性问题，错误提示：空指针异常。降低springboot版本为2.5.5</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>搞定，访问<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p>
<p>进入管理页面</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430215346.png" alt=""></p>
<h2 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h2><p>上一节中访问页面swagger-ui.html中，修改部分自定义信息，由于ApiInfo未提供get，set方法，通过有参构造实现。修改SwaggerConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot09swagger.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot09swagger.config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:SwaggerConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/4/30 16:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span>     <span class="comment">//开启Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    配置Swagger的Docket的Bean实例</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Swagger信息apiInfo</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(</span><br><span class="line">                <span class="string">&quot;sliu&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://shunliu.xyz&quot;</span>,</span><br><span class="line">                <span class="string">&quot;shunliu@csu.edu.cn&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfo</span>(<span class="string">&quot;sliu的SwaggerAPI主页&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Please teach me coding&quot;</span>,</span><br><span class="line">                <span class="string">&quot;v.1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://shunliu.xyz&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://www.apache/org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayList</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改后页面↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430215330.png" alt=""></p>
<h2 id="配置扫描接口和开关"><a href="#配置扫描接口和开关" class="headerlink" title="配置扫描接口和开关"></a>配置扫描接口和开关</h2><p>SwaggerConfig中配置扫描接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot09swagger.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot09swagger.config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:SwaggerConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/4/30 16:27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span>     <span class="comment">//开启Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    配置Swagger的Docket的Bean实例</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//RequestHandlerSelectors配置要扫描接口的方式</span></span><br><span class="line">                <span class="comment">//basePackage:指定要扫描的包，最常用方式</span></span><br><span class="line">                <span class="comment">//any():全部扫描</span></span><br><span class="line">                <span class="comment">//none():全不扫描</span></span><br><span class="line">                <span class="comment">//withClassAnnotation:扫描类上的注解，参数为注解反射对象</span></span><br><span class="line">                <span class="comment">//withMethodAnnotation:扫描方法上的注解</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sliu.springboot09swagger.contorller&quot;</span>))</span><br><span class="line">                <span class="comment">//paths()配置过滤白名单</span></span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;/hello&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Swagger信息apiInfo</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Contact</span> <span class="variable">contact</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Contact</span>(</span><br><span class="line">                <span class="string">&quot;sliu&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://shunliu.xyz&quot;</span>,</span><br><span class="line">                <span class="string">&quot;shunliu@csu.edu.cn&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfo</span>(<span class="string">&quot;sliu的SwaggerAPI主页&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Please teach me coding&quot;</span>,</span><br><span class="line">                <span class="string">&quot;v.1.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;https://shunliu.xyz&quot;</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">&quot;Apache 2.0&quot;</span>,</span><br><span class="line">                <span class="string">&quot;http://www.apache/org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayList</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完成后不再扫描/error请求，仅扫描com.sliu.xxx.controller包下/hello请求</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430215312.png" alt=""></p>
<p>为了实现在开发环境下开启Swagger，而实际部署时关闭，采用以下方案实现：</p>
<ul>
<li>判断是不是生产环境flag=false</li>
<li>注入enable(flag)</li>
</ul>
<p>(即开发中的多环境配置过程，通常采用不同的配置文件properties实现)</p>
<p>新建dev环境配置resources/application-dev.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8081</span></span><br></pre></td></tr></table></figure>
<p>新建pro生成环境配置resources/application-pro.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8082</span></span><br></pre></td></tr></table></figure>
<p>系统配置application.properties下开启dev环境</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br></pre></td></tr></table></figure>
<p>SwaggerConfig下添加判断当前环境逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    配置Swagger的Docket的Bean实例</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">(Environment environment)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置要显示的Swagger环境</span></span><br><span class="line">        <span class="type">Profiles</span> <span class="variable">profiles</span> <span class="operator">=</span> Profiles.of(<span class="string">&quot;dev&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过environment.acceptsProfiles判断是否处于所设定的环境中</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> environment.acceptsProfiles(profiles);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                <span class="comment">//enable是否开启Swagger</span></span><br><span class="line">                .enable(flag)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//RequestHandlerSelectors配置要扫描接口的方式</span></span><br><span class="line">                <span class="comment">//basePackage:指定要扫描的包，最常用方式</span></span><br><span class="line">                <span class="comment">//any():全部扫描</span></span><br><span class="line">                <span class="comment">//none():全不扫描</span></span><br><span class="line">                <span class="comment">//withClassAnnotation:扫描类上的注解，参数为注解反射对象</span></span><br><span class="line">                <span class="comment">//withMethodAnnotation:扫描方法上的注解</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sliu.springboot09swagger.contorller&quot;</span>))</span><br><span class="line">                <span class="comment">//paths()配置过滤白名单</span></span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;/hello&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>配置完成后，dev环境下swagger开启，pro环境下关闭↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430215253.png" alt=""></p>
<h2 id="API文档分组-amp-接口注释"><a href="#API文档分组-amp-接口注释" class="headerlink" title="API文档分组&amp;接口注释"></a>API文档分组&amp;接口注释</h2><p>SwaggerConfig中配置多个Docket分组，并将之前创建的Docket设置分组名为”sliu”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span>     <span class="comment">//开启Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket3</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    配置Swagger的Docket的Bean实例</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">(Environment environment)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置要显示的Swagger环境</span></span><br><span class="line">        <span class="type">Profiles</span> <span class="variable">profiles</span> <span class="operator">=</span> Profiles.of(<span class="string">&quot;dev&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过environment.acceptsProfiles判断是否处于所设定的环境中</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> environment.acceptsProfiles(profiles);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .groupName(<span class="string">&quot;sliu&quot;</span>)</span><br><span class="line">                <span class="comment">//enable是否开启Swagger</span></span><br><span class="line">                .enable(flag)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//RequestHandlerSelectors配置要扫描接口的方式</span></span><br><span class="line">                <span class="comment">//basePackage:指定要扫描的包，最常用方式</span></span><br><span class="line">                <span class="comment">//any():全部扫描</span></span><br><span class="line">                <span class="comment">//none():全不扫描</span></span><br><span class="line">                <span class="comment">//withClassAnnotation:扫描类上的注解，参数为注解反射对象</span></span><br><span class="line">                <span class="comment">//withMethodAnnotation:扫描方法上的注解</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sliu.springboot09swagger.contorller&quot;</span>))</span><br><span class="line">                <span class="comment">//paths()配置过滤白名单</span></span><br><span class="line">                .paths(PathSelectors.ant(<span class="string">&quot;/hello&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>配置完成后管理页面依据分组划分管理↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430215236.png" alt=""></p>
<p>接下来对swagger下的model块中实体类进行配置</p>
<p>新建实体类pojo/User.java用于测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot09swagger.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>controller/HelloController下添加返回User实体类请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot09swagger.contorller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot09swagger.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Swagger&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//只要接口返回值中有实体类，就能够被Swagger扫描到</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完成后能够扫描到model信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430215219.png" alt=""></p>
<p>为了便于理解，通过注解为实体类添加在swagger中的注释信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiModel(&quot;用户实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>添加后↓（由于在User类中各属性为private修饰，并且未添加get&amp;set方法，未展示属性信息）</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220430215159.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本part中详细介绍了如何集成和使用swagger，实现了文档实时更新和接口的在线测试。</p>
<p>要注意的是，在<strong>正式发布时请关闭Swagger</strong>，避免暴露接口信息</p>
<p>Swagger，搞定！</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/QQ20220331104633.gif" alt=""></p>
]]></content>
      <categories>
        <category>Little eagle</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>Boom LeetCode入门（四）链表</title>
    <url>/posts/61441.html</url>
    <content><![CDATA[<h1 id="常用链表结构"><a href="#常用链表结构" class="headerlink" title="常用链表结构"></a>常用链表结构</h1><p>基本的链表结构，例如单向链表、双向链表的使用较为常见，不再介绍</p>
<p>而对于几种集合结构：HashSet、HashMap以及TreeMap</p>
<p>其中HashSet和HashMap均为<strong>无序集合</strong>，HashSet中仅存储Key信息，而HashMap中则以Key-Value键值对的方式存储。TreeMap同样存储键值对信息，但是对键按照<strong>有序</strong>进行存储，因而，对于TreeMap中传入的键信息为对象时，应当传入对应的比较器以便于排序，否则会报错</p>
<p>对于链表的回顾主要关注于以下一些常见算法题</p>
<h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220512104804.png" alt=""></p>
<h2 id="反转单向链表"><a href="#反转单向链表" class="headerlink" title="反转单向链表"></a>反转单向链表</h2><p><a href="https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/">反转单向链表-leetcode</a></p>
<p><a href="https://www.nowcoder.com/practice/75e878df47f24fdc9dc3e400ec6058ca?tpId=295&amp;tqId=23286&amp;ru=/exam/oj&amp;qru=/ta/format-top101/question-ranking&amp;sourceUrl=%2Fexam%2Foj">反转单向链表-牛客</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>){</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">        <span class="comment">// return recu(head, null);</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">//     public ListNode recu(ListNode cur, ListNode pre){</span></span><br><span class="line"><span class="comment">//         if(cur == null) return pre;</span></span><br><span class="line"><span class="comment">//         ListNode res = recu(cur.next, cur);</span></span><br><span class="line"><span class="comment">//         cur.next = pre;</span></span><br><span class="line"><span class="comment">//         return res;</span></span><br><span class="line"><span class="comment">//     }</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="反转双向链表"><a href="#反转双向链表" class="headerlink" title="反转双向链表"></a>反转双向链表</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p4.list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReverseDouList</span> {</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>{</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        Node next;</span><br><span class="line">        Node pre;</span><br><span class="line">        Node(<span class="type">int</span> val){</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">5</span>);</span><br><span class="line">        node1.next = node2;</span><br><span class="line">        node2.next = node3;</span><br><span class="line">        node3.next = node4;</span><br><span class="line">        node4.next = node5;</span><br><span class="line">        node5.next = <span class="literal">null</span>;</span><br><span class="line">        node1.pre = <span class="literal">null</span>;</span><br><span class="line">        node2.pre = node1;</span><br><span class="line">        node3.pre = node2;</span><br><span class="line">        node4.pre = node3;</span><br><span class="line">        node5.pre = node4;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> reverse(node1);</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">null</span>){</span><br><span class="line">            System.out.println(head.val);</span><br><span class="line">            head = head.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">Node</span> <span class="variable">tail</span> <span class="operator">=</span> node1;</span><br><span class="line">        <span class="keyword">while</span>(tail != <span class="literal">null</span>){</span><br><span class="line">            System.out.println(tail.val);</span><br><span class="line">            tail = tail.pre;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Node <span class="title function_">reverse</span><span class="params">(Node head)</span> {</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>){</span><br><span class="line">            <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = prev;</span><br><span class="line">            cur.pre = temp;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="打印有序链表公共部分"><a href="#打印有序链表公共部分" class="headerlink" title="打印有序链表公共部分"></a>打印有序链表公共部分</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220512104828.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p4.list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintCommonPart</span> {</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span>{</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        Node next;</span><br><span class="line">        Node(<span class="type">int</span> val){</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printCommonPart</span><span class="params">(Node l1, Node l2)</span>{</span><br><span class="line">        <span class="keyword">if</span>(l1 == <span class="literal">null</span> || l2 == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">if</span>(l1.val == l2.val){</span><br><span class="line">                System.out.println(l1.val);</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            }<span class="keyword">else</span> <span class="keyword">if</span>(l1.val &lt; l2.val){</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="判断链表回文结构"><a href="#判断链表回文结构" class="headerlink" title="判断链表回文结构"></a>判断链表回文结构</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220512104842.png" alt=""></p>
<p><a href="https://www.nowcoder.com/practice/3fed228444e740c8be66232ce8b87c2f?tpId=295&amp;tqId=1008769&amp;ru=/exam/oj&amp;qru=/ta/format-top101/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3D%25E7%25AE%2597%25E6%25B3%2595%25E7%25AF%2587%26topicId%3D295">BM13   判断一个链表是否为回文结构</a></p>
<p>对于如何判断回文结构，追求时间复杂度时，利用栈实现。第一次遍历将所有数入栈，第二次遍历，边遍历边出栈比对</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *   int val;</span></span><br><span class="line"><span class="comment"> *   ListNode next = null;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head ListNode类 the head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPail</span> <span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>){</span><br><span class="line">            stack.push(cur.val);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line">        cur = head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">if</span>(cur.val == stack.pop()){</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();  </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>而在追求空间复杂度时，利用快慢指针找到链表中间节点，反转后半部分链表进行比对，这样不用另外开辟栈空间即可完成回文结构的判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *   int val;</span></span><br><span class="line"><span class="comment"> *   ListNode next = null;</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head ListNode类 the head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPail</span> <span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(fast.next != <span class="literal">null</span> &amp;&amp; fast.next.next != <span class="literal">null</span>){</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tail</span> <span class="operator">=</span> reverse(slow);</span><br><span class="line">        <span class="keyword">while</span>(pre != tail &amp;&amp; pre != <span class="literal">null</span> &amp;&amp; tail != <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">if</span>(pre.val != tail.val){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            tail = tail.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode head)</span>{</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>){</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="链表值划分"><a href="#链表值划分" class="headerlink" title="链表值划分"></a>链表值划分</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220512104858.png" alt=""></p>
<p>链表值的划分可以看作是快速排序的某一阶段在链表中的实现，具体实现流程是，在遍历过程中以6个指针记录大于x的头结点、大于x的尾节点、等于x的头节点、等于x的尾节点、小于x的头结点、小于x的尾部节点</p>
<p>一次遍历完成后，将大于x的尾节点指向等于x的头节点，等于x的尾节点指向大于x的头结点  完成值的划分，需要留意的是在拼接过程中可能存在头尾节点为空的情况，需要逐一判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p4.list;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.toolkit.ctx.HeadTail;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/11 9:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code03_SplitList</span> {</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ListNode</span>{</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode(<span class="type">int</span> val){</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">2</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">3</span>);</span><br><span class="line">        node1.next = node2;</span><br><span class="line">        node2.next = node3;</span><br><span class="line">        node3.next = node4;</span><br><span class="line">        node4.next = node5;</span><br><span class="line">        node5.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head</span> <span class="operator">=</span> splitList(node1,<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">null</span>){</span><br><span class="line">            System.out.println(head.val);</span><br><span class="line">            head = head.next;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">splitList</span><span class="params">(ListNode head, <span class="type">int</span> num)</span>{</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//6个ListNode分别记录，小于、等于、大于num的左右边界</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">minHead</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">minTail</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">equalHead</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">equalTail</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">maxHead</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">maxTail</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">if</span>(cur.val == num){</span><br><span class="line">                <span class="keyword">if</span>(equalHead == <span class="literal">null</span>){</span><br><span class="line">                    equalHead = cur;</span><br><span class="line">                    equalTail = cur;</span><br><span class="line">                }</span><br><span class="line">                temp = cur.next;</span><br><span class="line">                equalTail.next = cur;</span><br><span class="line">                equalTail = cur;</span><br><span class="line">                cur = temp;</span><br><span class="line">            }<span class="keyword">else</span> <span class="keyword">if</span>(cur.val &lt; num){</span><br><span class="line">                <span class="keyword">if</span>(minHead == <span class="literal">null</span>){</span><br><span class="line">                    minHead = cur;</span><br><span class="line">                    minTail = cur;</span><br><span class="line">                }</span><br><span class="line">                temp = cur.next;</span><br><span class="line">                minTail.next = cur;</span><br><span class="line">                minTail = cur;</span><br><span class="line">                cur  = temp;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">if</span>(maxHead == <span class="literal">null</span>){</span><br><span class="line">                    maxHead = cur;</span><br><span class="line">                    maxTail = cur;</span><br><span class="line">                }</span><br><span class="line">                temp = cur.next;</span><br><span class="line">                maxTail.next = cur;</span><br><span class="line">                maxTail = cur;</span><br><span class="line">                cur = temp;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        minTail.next = <span class="literal">null</span>;</span><br><span class="line">        equalTail.next = <span class="literal">null</span>;</span><br><span class="line">        maxTail.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(minHead == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">if</span>(equalHead == <span class="literal">null</span>){</span><br><span class="line">                <span class="keyword">return</span> maxHead;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">if</span>(maxHead != <span class="literal">null</span>){</span><br><span class="line">                    equalHead.next = maxHead;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> equalHead;</span><br><span class="line">            }</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">if</span>(equalHead == <span class="literal">null</span>){</span><br><span class="line">                <span class="keyword">if</span>(maxHead != <span class="literal">null</span>){</span><br><span class="line">                    minTail.next = maxHead;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> minHead;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                minTail.next = equalHead;</span><br><span class="line">                <span class="keyword">if</span>(maxHead != <span class="literal">null</span>){</span><br><span class="line">                    equalTail.next = maxHead;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> minHead;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="复制含有随机指针节点的链表"><a href="#复制含有随机指针节点的链表" class="headerlink" title="复制含有随机指针节点的链表"></a>复制含有随机指针节点的链表</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220512104915.png" alt=""></p>
<p><a href="https://www.nowcoder.com/practice/f836b2c43afc4b35ad6adc41ec941dba?tpId=196&amp;tqId=39711&amp;rp=1&amp;ru=/exam/oj&amp;qru=/exam/oj&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26pageSize%3D50%26search%3D%25E5%25A4%258D%25E5%2588%25B6%26tab%3D%25E7%25AE%2597%25E6%25B3%2595%25E7%25AF%2587%26topicId%3D196&amp;difficulty=undefined&amp;judgeStatus=undefined&amp;tags=&amp;title=%E5%A4%8D%E5%88%B6">复杂链表复制</a></p>
<p>借用<strong>map结构</strong>存储所有的拷贝节点，例如遍历时，将node1节点拷贝node1’并将其存入map中{node1, node1’}这样，遍历一次后，所有节点都在map中有对应的拷贝项，再次遍历原数组，对于原数组中的next和random指针，从map中取出拷贝项一一对应即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class RandomListNode {</span></span><br><span class="line"><span class="comment">    int label;</span></span><br><span class="line"><span class="comment">    RandomListNode next = null;</span></span><br><span class="line"><span class="comment">    RandomListNode random = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    RandomListNode(int label) {</span></span><br><span class="line"><span class="comment">        this.label = label;</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">   <span class="keyword">public</span> RandomListNode <span class="title function_">Clone</span><span class="params">(RandomListNode pHead)</span> {</span><br><span class="line">            <span class="keyword">if</span> (pHead == <span class="literal">null</span>) {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            }</span><br><span class="line">            HashMap&lt;RandomListNode, RandomListNode&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="type">RandomListNode</span> <span class="variable">cur</span> <span class="operator">=</span> pHead;</span><br><span class="line">            <span class="keyword">while</span> (cur != <span class="literal">null</span>) {</span><br><span class="line">                map.put(cur, <span class="keyword">new</span> <span class="title class_">RandomListNode</span>(cur.label));</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            }</span><br><span class="line">            cur = pHead;</span><br><span class="line">            <span class="keyword">while</span> (cur != <span class="literal">null</span>) {</span><br><span class="line">                map.get(cur).next = map.get(cur.next);</span><br><span class="line">                map.get(cur).random = map.get(cur.random);</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> map.get(pHead);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>该方法中借助HashMap完成拷贝，因而所使用的空间较大，空间复杂度大，如何降低空间的使用呢</p>
<p>核心思想是一致的，保存每一个节点的拷贝项到该节点的映射关系，是解决该问题的关键</p>
<p>不使用HashMap保持映射关系，那么可以通过node1→node1‘→node2→node2’→……..链表形式进行映射，映射完成后修改链表节点next指针完成最终拷贝</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class RandomListNode {</span></span><br><span class="line"><span class="comment">    int label;</span></span><br><span class="line"><span class="comment">    RandomListNode next = null;</span></span><br><span class="line"><span class="comment">    RandomListNode random = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    RandomListNode(int label) {</span></span><br><span class="line"><span class="comment">        this.label = label;</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">   <span class="keyword">public</span> RandomListNode <span class="title function_">Clone</span><span class="params">(RandomListNode pHead)</span> {</span><br><span class="line">       <span class="keyword">if</span> (pHead == <span class="literal">null</span>) {</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       }</span><br><span class="line">       <span class="type">RandomListNode</span> <span class="variable">cur</span> <span class="operator">=</span> pHead;</span><br><span class="line">       <span class="type">RandomListNode</span> <span class="variable">head</span> <span class="operator">=</span> pHead.next;</span><br><span class="line">       <span class="keyword">while</span>(cur != <span class="literal">null</span>){</span><br><span class="line">           <span class="type">RandomListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomListNode</span>(cur.label);</span><br><span class="line">           temp.next = cur.next;</span><br><span class="line">           cur.next = temp;</span><br><span class="line">           cur = temp.next;</span><br><span class="line">       }</span><br><span class="line">       cur = pHead;</span><br><span class="line">       head = pHead.next;</span><br><span class="line">       <span class="type">RandomListNode</span> <span class="variable">res</span> <span class="operator">=</span> pHead.next;</span><br><span class="line">       <span class="keyword">while</span>(cur != <span class="literal">null</span>){</span><br><span class="line">           res.random = cur.random == <span class="literal">null</span> ? <span class="literal">null</span> : cur.random.next;</span><br><span class="line">           cur = cur.next.next;</span><br><span class="line">           <span class="keyword">if</span>(res.next != <span class="literal">null</span>){</span><br><span class="line">               res = res.next.next;</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">       cur = pHead;</span><br><span class="line">       res = pHead.next;</span><br><span class="line">       <span class="keyword">while</span>(cur != <span class="literal">null</span>){</span><br><span class="line">           cur.next = cur.next.next;</span><br><span class="line">           cur = cur.next;</span><br><span class="line">           <span class="keyword">if</span>(res.next != <span class="literal">null</span>){</span><br><span class="line">               res.next = res.next.next;</span><br><span class="line">               res = res.next;</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> head;</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="单链表相交"><a href="#单链表相交" class="headerlink" title="单链表相交"></a>单链表相交</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220512104931.png" alt=""></p>
<p>要解决该问题，首先要判断所给出的两个链表是否有环，有无环以及哪一个链表有环，不同情形下求相交节点的方式不同</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220512104140.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220512104222.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220512104301.png" alt=""></p>
<p>因此，首先要解决的问题就是如何判断链表是否有环</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220512104357.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220512104424.png" alt=""></p>
<h2 id="判断链表是否有环"><a href="#判断链表是否有环" class="headerlink" title="判断链表是否有环"></a>判断链表是否有环</h2><p><a href="https://leetcode.cn/problems/linked-list-cycle/">环形链表</a></p>
<p>（1）借助HashSet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) {</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        HashSet&lt;ListNode&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(head!=<span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">if</span>(set.contains(head)){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">            set.add(head);</span><br><span class="line">            head = head.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>（2）快慢指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) {</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>){</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="环的入口"><a href="#环的入口" class="headerlink" title="环的入口"></a>环的入口</h2><p>当链表有环时，还需要拿到环的入口，才能返回两个链表的交点</p>
<p><a href="https://leetcode.cn/problems/c32eOV/">剑指 Offer II 022. 链表中环的入口节点</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) {</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>){</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow){</span><br><span class="line">                slow = head;</span><br><span class="line">                <span class="keyword">while</span>(fast != slow){</span><br><span class="line">                    fast = fast.next;</span><br><span class="line">                    slow = slow.next;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> fast;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="链表相交节点"><a href="#链表相交节点" class="headerlink" title="链表相交节点"></a>链表相交节点</h2><p>okok，解决以上两个小问题后， 打怪升级终于来到了最终问题：找到相交节点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) {</span></span><br><span class="line"><span class="comment"> *         val = x;</span></span><br><span class="line"><span class="comment"> *         next = null;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> {</span><br><span class="line">        <span class="keyword">if</span>(headA == headB) <span class="keyword">return</span> headA;</span><br><span class="line">        <span class="keyword">if</span>(headA == <span class="literal">null</span> || headB == <span class="literal">null</span> || headA.next == <span class="literal">null</span> || headB.next == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cycleA</span> <span class="operator">=</span> detectCycle(headA);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cycleB</span> <span class="operator">=</span> detectCycle(headB);</span><br><span class="line">        <span class="keyword">if</span>(cycleA == <span class="literal">null</span> &amp;&amp; cycleB == <span class="literal">null</span>){</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">endA</span> <span class="operator">=</span> headA;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">endB</span> <span class="operator">=</span> headB;</span><br><span class="line">            <span class="keyword">while</span>(endA.next != <span class="literal">null</span>){</span><br><span class="line">                len++;</span><br><span class="line">                endA = endA.next;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">while</span>(endB.next != <span class="literal">null</span>){</span><br><span class="line">                len--;</span><br><span class="line">                endB = endB.next;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(endA != endB){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(len &gt; <span class="number">0</span>){</span><br><span class="line">                <span class="keyword">while</span>(len &gt; <span class="number">0</span>){</span><br><span class="line">                    headA = headA.next;</span><br><span class="line">                    len--;</span><br><span class="line">                }</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">while</span>(len &lt; <span class="number">0</span>){</span><br><span class="line">                    headB = headB.next;</span><br><span class="line">                    len++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">while</span>(headA != headB){</span><br><span class="line">                headA = headA.next;</span><br><span class="line">                headB = headB.next;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> headA;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>((cycleA == <span class="literal">null</span> &amp;&amp; cycleB != <span class="literal">null</span>) || (cycleA != <span class="literal">null</span> &amp;&amp; cycleB == <span class="literal">null</span>)){</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(cycleA != <span class="literal">null</span> &amp;&amp; cycleB != <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> cycleA;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span>{</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>){</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow){</span><br><span class="line">                slow = head;</span><br><span class="line">                <span class="keyword">while</span>(fast != slow){</span><br><span class="line">                    fast = fast.next;</span><br><span class="line">                    slow = slow.next;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> fast;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>链表能够掌握好如何解决上述一些问题，就能够一通百通，关键在于结构的特性，如何利用这些特性去解决问题，还有快慢指针的作用也要梳理清楚</p>
<p>链表，搞定√</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/QQ20220331104633.gif" alt=""></p>
]]></content>
      <categories>
        <category>Boom LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Boom LeetCode入门（五）二叉树</title>
    <url>/posts/46035.html</url>
    <content><![CDATA[<h1 id="二叉树的前、中、后序遍历"><a href="#二叉树的前、中、后序遍历" class="headerlink" title="二叉树的前、中、后序遍历"></a>二叉树的前、中、后序遍历</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220513153104.png" alt=""> </p>
<p>二叉树经典问题之一，有关前中后序的遍历，主要通过递归和利用栈两种方式来实现，其中递归实现比较简单，思路如下↓</p>
<p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">二叉树的前序遍历</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="literal">null</span>){</span><br><span class="line">            <span class="comment">//前序遍历</span></span><br><span class="line">            res.add(root.val);</span><br><span class="line">            postorderTraversal(root.left);</span><br><span class="line">            <span class="comment">//中序遍历</span></span><br><span class="line">            <span class="comment">//res.add(root.val);</span></span><br><span class="line">            postorderTraversal(root.right);</span><br><span class="line">            <span class="comment">//后序遍历</span></span><br><span class="line">            <span class="comment">//res.add(root.val);</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>借助栈实现三种遍历时，每种遍历下如何出栈入栈又有所区别，分别展开来讲</p>
<h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">二叉树的前序遍历</a></p>
<p>前序遍历下，先让根节点入栈</p>
<p>之后逐步出栈，并判断出栈节点左右孩子是否为空，不为空则入栈</p>
<p>需要注意的是，由于栈的先入后出特性，<strong>右孩子先入栈，左孩子后入栈</strong>，每次出栈时打印节点信息，最终输出为先序遍历结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()){</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            res.add(temp.val);</span><br><span class="line">            <span class="keyword">if</span>(temp.right != <span class="literal">null</span>){</span><br><span class="line">                stack.push(temp.right);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(temp.left != <span class="literal">null</span>){</span><br><span class="line">                stack.push(temp.left);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/">二叉树的后序遍历</a></p>
<p>后序遍历需要借助两个栈，stack1 stack2</p>
<p>头结点先入栈stack1，出栈时不直接打印，而是入栈stack2，同时比对当前节点左右孩子，此时<strong>左孩子先入栈，右孩子后入栈</strong>。这样stack1中弹出顺序，即stack2中的入栈顺序为头节点→右节点→左节点</p>
<p>所以最终stack2中出栈打印时为左节点→右节点→头节点，即为后序遍历顺序 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack2 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack1.push(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack1.isEmpty()){</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> stack1.pop();</span><br><span class="line">            stack2.push(temp);</span><br><span class="line">            <span class="keyword">if</span>(temp.left != <span class="literal">null</span>){</span><br><span class="line">                stack1.push(temp.left);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(temp.right != <span class="literal">null</span>){</span><br><span class="line">                stack1.push(temp.right);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span>(!stack2.isEmpty()){</span><br><span class="line">            res.add(stack2.pop().val);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">二叉树的中序遍历</a></p>
<p>中序遍历下，所有左边界先入栈，然后逐个出栈并检查出栈节点是否存在右子节点，存在的话将右子节点，以及其所有的左子边界节点全部出栈</p>
<p>何为左子边界？如↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220513153127.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span> || !stack.isEmpty()){</span><br><span class="line">            <span class="keyword">while</span>(cur != <span class="literal">null</span>){</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            }</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            res.add(temp.val);</span><br><span class="line">            <span class="keyword">if</span>(temp.right != <span class="literal">null</span>){</span><br><span class="line">                cur = temp.right;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="二叉树的广度优先遍历"><a href="#二叉树的广度优先遍历" class="headerlink" title="二叉树的广度优先遍历"></a>二叉树的广度优先遍历</h1><p> <a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">二叉树的层序遍历</a></p>
<p>二叉树的前序遍历即为深度优先遍历，在广度上的遍历则称之为广度优先遍历（层序遍历）</p>
<p>广度优先遍历利用队列FIFO的特性实现，最开始根节点入队列，然后开始出队列，每次出队时记录当前值，并比对当前出队节点的左右子节点是否为空，不为空则入队</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()){</span><br><span class="line">            List&lt;Integer&gt; resTemp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> queue.size(); i&gt;<span class="number">0</span>; i--){</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                resTemp.add(temp.val);</span><br><span class="line">                <span class="keyword">if</span>(temp.left != <span class="literal">null</span>){</span><br><span class="line">                    queue.offer(temp.left);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(temp.right != <span class="literal">null</span>){</span><br><span class="line">                    queue.offer(temp.right);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            res.add(resTemp);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>由于出队时就能得到当前层的节点树，对上述算法稍加改进就能够得到树的最大宽度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * public class TreeNode {</span><br><span class="line"> *     int val;</span><br><span class="line"> *     TreeNode left;</span><br><span class="line"> *     TreeNode right;</span><br><span class="line"> *     TreeNode() {}</span><br><span class="line"> *     TreeNode(int val) { this.val = val; }</span><br><span class="line"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span><br><span class="line"> *         this.val = val;</span><br><span class="line"> *         this.left = left;</span><br><span class="line"> *         this.right = right;</span><br><span class="line"> *     }</span><br><span class="line"> * }</span><br><span class="line"> */</span><br><span class="line">class Solution {</span><br><span class="line">    public int maxlevel(TreeNode root) {</span><br><span class="line">        if(root == null) return 0;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        while(!queue.isEmpty()){</span><br><span class="line">        	max = queue.size() &gt; max ? queue.size() : max;</span><br><span class="line">            for(int i = queue.size(); i&gt;0; i--){</span><br><span class="line">                TreeNode temp = queue.poll();</span><br><span class="line">                if(temp.left != null){</span><br><span class="line">                    queue.offer(temp.left);</span><br><span class="line">                }</span><br><span class="line">                if(temp.right != null){</span><br><span class="line">                    queue.offer(temp.right);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        return max;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="特殊二叉树的判断"><a href="#特殊二叉树的判断" class="headerlink" title="特殊二叉树的判断"></a>特殊二叉树的判断</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220513153148.png" alt=""></p>
<h2 id="搜索二叉树"><a href="#搜索二叉树" class="headerlink" title="搜索二叉树"></a>搜索二叉树</h2><p>搜索二叉树结构如下↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220513153205.png" alt=""></p>
<p>对于搜索二叉树中的每一个节点，其左子树的值都比它小，右子树的值都比它大</p>
<p>因此其左→头→右的中序遍历结果必定为一个有序的升序序列</p>
<p><a href="https://leetcode.cn/problems/validate-binary-search-tree/">验证二叉搜索树</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="type">long</span> <span class="variable">preVal</span> <span class="operator">=</span> Long.MIN_VALUE;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isValid</span> <span class="operator">=</span> isValidBST(root.left);</span><br><span class="line">        <span class="keyword">if</span>(!isValid){</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(root.val &lt;= preVal){</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        preVal = root.val;</span><br><span class="line">        <span class="keyword">return</span> isValidBST(root.right);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h2><p>完全二叉树下节点的编号完全对应其在满二叉树下的编号（满二叉树定义如下：对于二叉树中的任一节点，除了叶子节点外，其它任意节点应当都是有左右孩子节点的。同时，满二叉树也是一种特殊的完全二叉树）</p>
<p>如下图中左边二叉树为一颗完全二叉树，右边二叉树则不是</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220513153221.png" alt=""></p>
<p>判断一棵树是否为完全二叉树，借助层序遍历实现，层序遍历过程中的两个特殊情形：</p>
<ul>
<li>如果存在节点有右孩子，且无左孩子，该二叉树不是完全二叉树</li>
<li>当第一次遇到左右孩子不齐全的节点时，后续所有节点应当为叶子节点</li>
</ul>
<p><a href="https://leetcode.cn/problems/check-completeness-of-a-binary-tree/"> 二叉树的完全性检验</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() {}</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) {</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCompleteTree</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="comment">//flag标记是否已经出现左右孩子不全的节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span> ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()){</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            <span class="keyword">if</span>(temp.left == <span class="literal">null</span>){</span><br><span class="line">                <span class="keyword">if</span>(temp.right != <span class="literal">null</span>){</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                   flag = <span class="number">1</span>;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(temp.left != <span class="literal">null</span>){</span><br><span class="line">                <span class="keyword">if</span>(temp.right == <span class="literal">null</span>){</span><br><span class="line">                    queue.offer(temp.left);</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    queue.offer(temp.left);</span><br><span class="line">                    queue.offer(temp.right);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>){</span><br><span class="line">            <span class="keyword">while</span>(!queue.isEmpty()){</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(temp.left != <span class="literal">null</span> || temp.right != <span class="literal">null</span>){</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h2><p>满二叉树具有如下性质，其高度h和节点数n必定满足<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex" xmlns="http://www.w3.org/2000/svg" width="11.663ex" height="2.099ex" role="img" focusable="false" viewBox="0 -846 5154.9 928"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1165.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2221.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(533,363) scale(0.707)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mo" transform="translate(3654.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(4654.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p5.binaryTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.tree.TreeNode;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FullBinaryTree</span> {</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TreeNode</span>{</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode(<span class="type">int</span> val){</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFullBinaryTree</span><span class="params">(TreeNode root)</span>{</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()){</span><br><span class="line">            h++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> queue.size(); i&gt;<span class="number">0</span>; i--){</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                n++;</span><br><span class="line">                <span class="keyword">if</span>(temp.left != <span class="literal">null</span>){</span><br><span class="line">                    queue.offer(temp.left);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(temp.right != <span class="literal">null</span>){</span><br><span class="line">                    queue.offer(temp.right);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="type">return</span> <span class="variable">n</span> <span class="operator">=</span>= (Math.pow(<span class="number">2</span>, h) - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p>对于任何一个子树，其左子树和右子树的<strong>高度差都不超过一</strong>的二叉树为平衡二叉树</p>
<p><a href="https://leetcode.cn/problems/ping-heng-er-cha-shu-lcof/">剑指 Offer 55 - II. 平衡二叉树</a></p>
<p>解决该问题的核心在于，对每一个节点需要进行三个判断：</p>
<ul>
<li>左子树是否为平衡二叉树</li>
<li>右子树是否为平衡二叉树</li>
<li>左右子树高度差是否不超过1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">reType</span>{</span><br><span class="line">        <span class="type">boolean</span> bal;</span><br><span class="line">        <span class="type">int</span> high;</span><br><span class="line">        reType(<span class="type">boolean</span> bal, <span class="type">int</span> high){</span><br><span class="line">            <span class="built_in">this</span>.bal = bal;</span><br><span class="line">            <span class="built_in">this</span>.high = high;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">return</span> process(root).bal;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> reType <span class="title function_">process</span><span class="params">(TreeNode root)</span>{</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">reType</span>(<span class="literal">true</span>, <span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">reType</span> <span class="variable">rA</span> <span class="operator">=</span> process(root.left);</span><br><span class="line">        <span class="type">reType</span> <span class="variable">rB</span> <span class="operator">=</span> process(root.right);</span><br><span class="line">        <span class="type">reType</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">reType</span>(rA.bal &amp;&amp; rB.bal &amp;&amp; (Math.abs(rA.high - rB.high) &lt; <span class="number">2</span>), </span><br><span class="line">                                Math.max(rA.high, rB.high) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>该算法的解题思路，适用于<strong>所有的树形DP问题</strong>，吃透它！（例如：思考下如何通过树形DP实现搜索二叉树）</p>
<h1 id="公共祖先节点"><a href="#公共祖先节点" class="headerlink" title="公共祖先节点"></a>公共祖先节点</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220513153243.png" alt=""></p>
<p><a href="https://leetcode.cn/problems/first-common-ancestor-lcci/">面试题 04.08. 首个共同祖先</a></p>
<p>公共节点存在如下两种情况：</p>
<ul>
<li>node1为node2的祖先，或node2为node1祖先</li>
<li>node1和node2有其它公共祖先</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> {</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span> || root == p || root == q){</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">l</span> <span class="operator">=</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">r</span> <span class="operator">=</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        <span class="comment">//左右子树均有返回值</span></span><br><span class="line">        <span class="keyword">if</span>(l != <span class="literal">null</span> &amp;&amp; r != <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//左右子树并不都有返回值</span></span><br><span class="line">        <span class="type">return</span> <span class="variable">l</span> <span class="operator">=</span>= <span class="literal">null</span> ? r : l;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="后继节点"><a href="#后继节点" class="headerlink" title="后继节点"></a>后继节点</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220513153259.png" alt=""></p>
<p>后继节点，即中序遍历中，一个节点的下一个节点即为后继节点</p>
<p>由于此时的二叉树结构中给出了parent指针，那么就可以利用该特性来降低通过中序遍历来实现该代码的时间复杂度</p>
<p>对于该数据类型的二叉树，具有如下特性：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220513153316.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220513153330.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p5.binaryTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中序后继节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MiddleNextNode</span> {</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TreeNode</span>{</span><br><span class="line">        TreeNode left;</span><br><span class="line">        TreeNode right;</span><br><span class="line">        TreeNode parent;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        TreeNode(<span class="type">int</span> val){</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">minddleNextNode</span><span class="params">(TreeNode node)</span>{</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(node.right != <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> getNearLeft(node.right);</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">parent</span> <span class="operator">=</span> node.parent;</span><br><span class="line">            <span class="keyword">while</span>(parent != <span class="literal">null</span> &amp;&amp; parent.left != <span class="literal">null</span>){</span><br><span class="line">                node = parent;</span><br><span class="line">                parent = node.parent;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> parent;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回右子树节点的第一个左叶子节点</span></span><br><span class="line">    <span class="keyword">private</span> TreeNode <span class="title function_">getNearLeft</span><span class="params">(TreeNode node)</span> {</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span>(node.left != <span class="literal">null</span>){</span><br><span class="line">            node = node.left;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="二叉树的序列化与反序列化"><a href="#二叉树的序列化与反序列化" class="headerlink" title="二叉树的序列化与反序列化"></a>二叉树的序列化与反序列化</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220513153350.png" alt=""></p>
<p><a href="https://leetcode.cn/problems/h54YBf/">剑指 Offer II 048. 序列化与反序列化二叉树</a></p>
<p>序列化反序列化均可利用递归实现，以前序遍历为序列化反序列化依据实现↓</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) { val = x; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Codec</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encodes a tree to a single string.</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">serialize</span><span class="params">(TreeNode root)</span> {</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"null,"</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> root.val + <span class="string">","</span>;</span><br><span class="line">        res += serialize(root.left);</span><br><span class="line">        res += serialize(root.right);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes your encoded data to tree.</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">deserialize</span><span class="params">(String data)</span> {</span><br><span class="line">        <span class="keyword">if</span>(data == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        String[] nodes = data.split(<span class="string">","</span>);</span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nodes.length; i++){</span><br><span class="line">            queue.offer(nodes[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> process(queue);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">process</span><span class="params">(Queue&lt;String&gt; queue)</span>{</span><br><span class="line">        <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        <span class="keyword">if</span>(temp.equals(<span class="string">"null"</span>)){</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">tempNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(Integer.valueOf(temp));</span><br><span class="line">        tempNode.left = process(queue);</span><br><span class="line">        tempNode.right = process(queue);</span><br><span class="line">        <span class="keyword">return</span> tempNode;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">// Codec ser = new Codec();</span></span><br><span class="line"><span class="comment">// Codec deser = new Codec();</span></span><br><span class="line"><span class="comment">// TreeNode ans = deser.deserialize(ser.serialize(root));</span></span><br></pre></td></tr></table></figure>
<h1 id="折纸问题"><a href="#折纸问题" class="headerlink" title="折纸问题"></a>折纸问题</h1><p><a href="https://blog.csdn.net/TuZiBuQing/article/details/124128137">折纸问题（微软面试题）</a></p>
<p><strong>问题描述：</strong></p>
<p>请把一段纸条竖着放在桌子上，然后从纸条的下边向上方对折1次，压出折痕后展开。此时 折痕是凹下去的，即折<br>痕突起的方向指向纸条的背面。如果从纸条的下边向上方连续对折2 次，压出折痕后展开，此时有三条折痕，从上<br>到下依次是下折痕、下折痕和上折痕。<br>给定一 个输入参数N，代表纸条都从下边向上方连续对折N次，请从上到下打印所有折痕的方向 例如：N=1时，打<br>印：凹；N=2时，打印： 凹 凹 凸</p>
<p><strong>规律</strong>：</p>
<p>通过折纸操作发现，最后打印的结果应该是一个<strong>左子树全部为凹</strong>，<strong>右子树全部为凸</strong>的二叉树结构</p>
<p>最后通过中序遍历进行打印</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p5.binaryTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Origami</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        <span class="comment">//三个传入参数分别表示，当前为第几次折叠、一共折叠多少次、折痕为凹用true表示</span></span><br><span class="line">        origami(<span class="number">1</span>, N, <span class="literal">true</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">origami</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> n, <span class="type">boolean</span> b)</span> {</span><br><span class="line">        <span class="keyword">if</span>(i &gt; n){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        origami(i+<span class="number">1</span>, n, <span class="literal">true</span>);</span><br><span class="line">        System.out.print(b ? <span class="string">"凹 "</span> : <span class="string">"凸 "</span>);</span><br><span class="line">        origami(i+<span class="number">1</span>, n, <span class="literal">false</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>二叉树的相关算法中，重点是掌握DFS和BFS的方法，并利用DFS和BFS完成特殊问题的求解。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/QQ20220331104633.gif" alt=""></p>
]]></content>
      <categories>
        <category>Boom LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Boom LeetCode入门（七）前缀树 &amp; 贪心算法</title>
    <url>/posts/43015.html</url>
    <content><![CDATA[<h1 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h1><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>前缀树用于存储字符串等数据的结构，其插入和删除流程大体如↓：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220523112226.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220523112205.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220523112143.png" alt=""></p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p7.preTreeAndGreedy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p7.preTreeAndGreedy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:PreTree</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:前缀树</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/21 19:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreTree</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">preNode</span>{</span><br><span class="line">        <span class="comment">//p值用于有多少个字符串路径经过当前路径</span></span><br><span class="line">        <span class="type">int</span> pass;</span><br><span class="line">        <span class="comment">//e值用于记录以当前节点为终止节点的路径有多少条</span></span><br><span class="line">        <span class="type">int</span> end;</span><br><span class="line">        preNode[] nexts;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">preNode</span><span class="params">()</span>{</span><br><span class="line">            pass = <span class="number">0</span>;</span><br><span class="line">            end = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//nexts用于记录到0-26对应的字母a-z是否存在</span></span><br><span class="line">            <span class="comment">//nexts[0] == null表示没有走向a的路径</span></span><br><span class="line">            <span class="comment">//nexts[0] != null表示有走向a的路径，且存储了路径的下一个节点</span></span><br><span class="line">            <span class="comment">//next[25] == null表示没有走向z的路径</span></span><br><span class="line">            nexts = <span class="keyword">new</span> <span class="title class_">preNode</span>[<span class="number">26</span>];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化根节点</span></span><br><span class="line">    <span class="type">preNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">preNode</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将所传入字符串插入前缀树中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span>{</span><br><span class="line">        <span class="keyword">if</span>(word == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">char</span>[] arr = word.toCharArray();</span><br><span class="line">        <span class="type">preNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        node.pass++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> arr[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(node.nexts[index] == <span class="literal">null</span>){</span><br><span class="line">                node.nexts[index] = <span class="keyword">new</span> <span class="title class_">preNode</span>();</span><br><span class="line">            }</span><br><span class="line">            node = node.nexts[index];</span><br><span class="line">            node.pass++;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//终止节点除p值增加外，e值也增加</span></span><br><span class="line">        node.end++;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询字符串加入过几次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(String word)</span>{</span><br><span class="line">        <span class="keyword">if</span>(word == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">preNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="type">char</span>[] arr = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> arr[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(node.nexts[index] == <span class="literal">null</span>){</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            node = node.nexts[index];</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//返回最终节点的e值即为字符串加入次数</span></span><br><span class="line">        <span class="keyword">return</span> node.end;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有多少个单词是以当前所传入word为前缀的，例如以ab为前缀的是abc、abd等</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pathNumber</span><span class="params">(String word)</span>{</span><br><span class="line">        <span class="keyword">if</span>(word == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">preNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="type">char</span>[] arr = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> arr[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(node.nexts[index] == <span class="literal">null</span>){</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            node = node.nexts[index];</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//返回最后一个字符的p值</span></span><br><span class="line">        <span class="keyword">return</span> node.pass;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除所传入字符串的路径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String word)</span>{</span><br><span class="line">        <span class="comment">//word不存在时，不进行删除操作</span></span><br><span class="line">        <span class="keyword">if</span>(word == <span class="literal">null</span> || search(word) == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">char</span>[] arr = word.toCharArray();</span><br><span class="line">        <span class="type">preNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> arr[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span>(--node.nexts[index].pass == <span class="number">0</span>){</span><br><span class="line">                <span class="comment">//当某个节点的p值为0时，应当直接对后续的全部路径进行剪枝操作</span></span><br><span class="line">                node.nexts[index] = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//终止节点的e值减1</span></span><br><span class="line">        --node.end;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220523112125.png" alt=""></p>
<h2 id="经典贪心算法题解"><a href="#经典贪心算法题解" class="headerlink" title="经典贪心算法题解"></a>经典贪心算法题解</h2><h3 id="会议室日程安排"><a href="#会议室日程安排" class="headerlink" title="会议室日程安排"></a>会议室日程安排</h3><p>题目：一个项目占用一个会议室，会议室同时只能被一个项目占用。给你每个项目的开始和结束时间，请给出最多能够完成多少场项目的宣讲，返回该场次数。</p>
<p>求解思路：</p>
<p>该问题的求解中贪心策略体现在，<strong>将尽可能早结束的会议安排进行程</strong>，就能得到最优解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p7.preTreeAndGreedy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p7.preTreeAndGreedy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:Code02_Greedy_Room</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:贪心算法求解最大会议场次数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/21 20:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code02_Greedy_Room</span> {</span><br><span class="line">    <span class="comment">//存储会议时间戳</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">roomTime</span>{</span><br><span class="line">        <span class="comment">//会议开始与结束时间</span></span><br><span class="line">        <span class="type">int</span> begin;</span><br><span class="line">        <span class="type">int</span> end;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">roomTime</span><span class="params">(<span class="type">int</span> begin, <span class="type">int</span> end)</span>{</span><br><span class="line">            <span class="built_in">this</span>.begin = begin;</span><br><span class="line">            <span class="built_in">this</span>.end = end;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;roomTime&gt;{</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(roomTime o1, roomTime o2)</span> {</span><br><span class="line">            <span class="keyword">return</span> o1.end - o2.end;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回从时间点timePot开始能够进行的最多场次会议</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxNum</span><span class="params">(roomTime[] roomTimesSet, <span class="type">int</span> timePot)</span>{</span><br><span class="line">        <span class="keyword">if</span>(roomTimesSet == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        Arrays.sort(roomTimesSet, <span class="keyword">new</span> <span class="title class_">myComparator</span>());</span><br><span class="line">        <span class="keyword">if</span>(timePot &lt; roomTimesSet[<span class="number">0</span>].begin){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//记录能够开展的会议场次数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; roomTimesSet.length; i++) {</span><br><span class="line">            <span class="keyword">if</span>(timePot &lt;= roomTimesSet[i].end){</span><br><span class="line">                res++;</span><br><span class="line">                timePot = roomTimesSet[i].end;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h3 id="分金条"><a href="#分金条" class="headerlink" title="分金条"></a>分金条</h3><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220523112104.png" alt=""></p>
<p>算法思路：<strong>哈夫曼树</strong>，依托小根堆数据结构，每次取出小根堆顶端的两个数，求其和，将和累加进最小代价，并将和放入小根堆，重复此操作，直到小根堆不足两个数时，返回最小代价。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p7.preTreeAndGreedy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p7.preTreeAndGreedy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:Code03_Greedy_splitGold</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:贪心算法求解最小分黄金代价</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/21 21:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code03_Greedy_splitGold</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">splitGold</span><span class="params">(<span class="type">int</span>[] arr)</span>{</span><br><span class="line">        <span class="keyword">if</span>(arr == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line">            queue.add(arr[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(queue.size() &gt; <span class="number">1</span>){</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> queue.poll() + queue.poll();</span><br><span class="line">            res += temp;</span><br><span class="line">            queue.add(temp);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h3 id="求最大资金数"><a href="#求最大资金数" class="headerlink" title="求最大资金数"></a>求最大资金数</h3><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220523112038.png" alt=""></p>
<p>该题求解思路为，每次选择能够执行项目中，利润最大的项目。这样本金能够得到最大程度的上升。</p>
<p>借助<strong>两个堆</strong>来实现该方案，首先借助一个小根堆，小根堆中依据项目所需本金升序排列项目，每次根据所拥有的本金从小根堆中出队列。出队列的项目入另一个大顶堆，大顶堆依据项目的利润降序排列。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p7.preTreeAndGreedy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p7.preTreeAndGreedy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:Code03_Greedy_MaxMoney</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:贪心算法求解最大收益</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/21 21:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code03_Greedy_MaxMoney</span> {</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">project</span>{</span><br><span class="line">        <span class="comment">//项目所需花费资金</span></span><br><span class="line">        <span class="type">int</span> cost;</span><br><span class="line">        <span class="comment">//项目所能获得的利润</span></span><br><span class="line">        <span class="type">int</span> profit;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">project</span><span class="params">(<span class="type">int</span> cost, <span class="type">int</span> profit)</span>{</span><br><span class="line">            <span class="built_in">this</span>.cost = cost;</span><br><span class="line">            <span class="built_in">this</span>.profit = profit;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//小根堆中依据花费升序排列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">costComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;project&gt;{</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(project o1, project o2)</span> {</span><br><span class="line">            <span class="keyword">return</span> o1.cost - o2.cost;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//大根堆中依据利润降序排列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">profitComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;project&gt;{</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(project o1, project o2)</span> {</span><br><span class="line">            <span class="keyword">return</span> o2.profit - o1.profit;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//num：允许做几次项目，money：初始资金</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxMoney</span><span class="params">(project[] projects, <span class="type">int</span> num, <span class="type">int</span> money)</span>{</span><br><span class="line">        <span class="keyword">if</span>(projects == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        PriorityQueue&lt;project&gt; minCostQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">costComparator</span>());</span><br><span class="line">        <span class="keyword">for</span> (project p : projects) {</span><br><span class="line">            minCostQueue.add(p);</span><br><span class="line">        }</span><br><span class="line">        PriorityQueue&lt;project&gt; maxProfitQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">profitComparator</span>());</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> money;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num; i++) {</span><br><span class="line">            <span class="keyword">while</span>(!minCostQueue.isEmpty() &amp;&amp; minCostQueue.peek().cost &lt;= monry){</span><br><span class="line">                maxProfitQueue.add(minCostQueue.poll());</span><br><span class="line">            }</span><br><span class="line">           <span class="keyword">if</span>(maxProfitQueue.isEmpty()){</span><br><span class="line">               <span class="keyword">return</span> res;</span><br><span class="line">           }</span><br><span class="line">           res += maxProfitQueue.poll().profit;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>拓展：如何通过1个大根堆+1个小根堆实现，实时返回一个数组的中位数？</p>
<p>规则如下：</p>
<ul>
<li>第一个数直接入大根堆</li>
<li>后续进入的数，如果大于大根堆堆顶的数，入大根堆，否则入小根堆</li>
<li>如果大小堆size大小相差2，将size较大的堆堆顶元素出队，并入队另一个堆</li>
</ul>
<p>这样，当大小堆size相等时，去两个堆堆顶元素的平均数，不想等时，取size较大那一个堆的堆顶元素，就能取得当前数组中位数。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本节讲解了如何构建一颗前缀树，并实现对树的编辑。学习了贪心算法，需要注意的是贪心算法并没有固定的解题模板，其思路依据场景的变化而变化，需要多尝试，利用对比器进行检验，验证其有效性。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/QQ20220331104633.gif" alt=""></p>
]]></content>
      <categories>
        <category>Boom LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Boom LeetCode入门（八）暴力递归</title>
    <url>/posts/29668.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>暴力递归，用于求解能够将每一个问题划分为多个子问题，且子问题与主体问题类型一致，在运算的过程中不记录子问题的结果，同时为了避免程序的死循环，暴力递归还应当具备明确的终止递归条件。<strong>暴力递归是动态规划的基础</strong></p>
<h1 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h1><p>问题：打印n层汉诺塔，从左边移动到最右边的全部过程</p>
<p>解题思路如↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220527172806.png" style="zoom:50%;"></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220527181920.png" style="zoom:50%;"></p>
<p>实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p9.recursion;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p9.recursion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:Code01_Hanoi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:暴力递归求解汉诺塔问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/24 15:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code01_Hanoi</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//对于有三根柱，三根棍的汉诺塔问题，打印移动顺序</span></span><br><span class="line">        <span class="comment">//i &gt; 0</span></span><br><span class="line">        hanoi(<span class="number">3</span>, <span class="string">"左"</span>, <span class="string">"中"</span>, <span class="string">"右"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">int</span> i, String start, String other, String end)</span> {</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">1</span>){</span><br><span class="line">            System.out.println(<span class="string">"Move 1 from"</span> + start + <span class="string">"to"</span> + end);</span><br><span class="line">        } <span class="keyword">else</span>{</span><br><span class="line">            <span class="comment">//1~i-1从from放到other</span></span><br><span class="line">            hanoi(i - <span class="number">1</span>, start, end, other);</span><br><span class="line">            <span class="comment">//i放到最终位置end</span></span><br><span class="line">            System.out.println(<span class="string">"Move "</span> + i + <span class="string">" from "</span> + start + <span class="string">"to"</span> + end);</span><br><span class="line">            <span class="comment">//1~i-1从other放到to，继续递归</span></span><br><span class="line">            hanoi(i - <span class="number">1</span>, other, start, end);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="打印子序列"><a href="#打印子序列" class="headerlink" title="打印子序列"></a>打印子序列</h1><p>问题：打印一个字符串的全部子序列，包括空字符串</p>
<p>该问题下通过递归，对于字符串中的每一个字符，按照“<strong>添加</strong>该字符到最终子序列”和“<strong>不添加</strong>该字符到最终子序列”，两条路径进行递归，对每一个字符按照该方案进行递归求解，得到最终全部子序列，大体过程如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220527182001.png" style="zoom:50%;"></p>
<p>实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p9.recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p9.recursion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:Code02_PrintAllSubsequence</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:利用递归打印字符串的全部子序列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/24 16:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code02_PrintAllSubsequence</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="type">char</span>[] arr = str.toCharArray();</span><br><span class="line">        printAllSubsequence(arr, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Character&gt;());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printAllSubsequence</span><span class="params">(<span class="type">char</span>[] arr, <span class="type">int</span> i, ArrayList&lt;Character&gt; list)</span> {</span><br><span class="line">        <span class="keyword">if</span>(i == arr.length ){</span><br><span class="line">            printList(list);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//添加当前字符进子序列，并继续递归</span></span><br><span class="line">        ArrayList&lt;Character&gt; keepRes = copyList(list);</span><br><span class="line">        keepRes.add(arr[i]);</span><br><span class="line">        printAllSubsequence(arr, i + <span class="number">1</span>, keepRes);</span><br><span class="line">        <span class="comment">//不添加当前字符进子序列，并继续递归</span></span><br><span class="line">        ArrayList&lt;Character&gt; notKeepRes = copyList(list);</span><br><span class="line">        printAllSubsequence(arr, i + <span class="number">1</span>, notKeepRes);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;Character&gt; <span class="title function_">copyList</span><span class="params">(ArrayList&lt;Character&gt; list)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(list);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printList</span><span class="params">(ArrayList&lt;Character&gt; list)</span> {</span><br><span class="line">        <span class="keyword">for</span> (Character c : list) {</span><br><span class="line">            System.out.print(c);</span><br><span class="line">        }</span><br><span class="line">        System.out.println();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>test：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220527182026.png" alt=""></p>
<h1 id="字符串的全排列"><a href="#字符串的全排列" class="headerlink" title="字符串的全排列"></a>字符串的全排列</h1><p>问题：打印一个字符串的全部排列</p>
<p><a href="https://leetcode.cn/problems/permutations/"> 全排列</a></p>
<p>全排列问题仍然可以利用递归求解，对于长度为n的字符串String中的每一个字符i，0 ~ i为已经确定的字符串，而后续逐步选取i+1~n上的每一个字符拼接到i+1的位置上完成排列，需要注意的是递归返回时，应当交换回字符位置，以复原初始字符串</p>
<p>实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line">        process(nums, <span class="number">0</span>, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, List&lt;List&lt;Integer&gt;&gt; res)</span>{</span><br><span class="line">        <span class="keyword">if</span>(i == nums.length){</span><br><span class="line">            List&lt;Integer&gt; temp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">                temp.add(num);</span><br><span class="line">            }</span><br><span class="line">            res.add(temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; nums.length; j++){</span><br><span class="line">            swap(nums, i, j);</span><br><span class="line">            process(nums, i + <span class="number">1</span>, res);</span><br><span class="line">            swap(nums, i, j);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span>{</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>编码过程中遇到了多维数组的初始化问题，如何解决戳<a href="https://blog.csdn.net/qq_45792472/article/details/121671852">多维List数组的初始化</a></p>
<p>直接抄作业，能够使用的两种初始化方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">//没有Integer</span></span><br></pre></td></tr></table></figure>
<p>List是接口，ArrayList实现了这个接口，所以不能直接使用的初始化方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">List</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;ArrayList&lt;Integer&gt;&gt;();</span><br></pre></td></tr></table></figure>
<h1 id="纸牌游戏"><a href="#纸牌游戏" class="headerlink" title="纸牌游戏"></a>纸牌游戏</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220527182050.png" alt=""></p>
<p>定义两个函数，先手函数F(arr, L, R)用于返回数组arr中L-R范围内先手时能够获得的最大数，后手函数S(arr, L, R)用于返回后手时所能获得的数</p>
<p>其中F函数下：</p>
<ul>
<li>当L==R时，只有一张牌，且为先手，直接返回这张牌的数值即可</li>
<li>否则，返回<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="24.661ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10900.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(980,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1431,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1709,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(2390,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2890.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3890.4,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(4639.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5028.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5557.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6008.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6459.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6904.1,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(7807.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(8807.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(9307.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9752.2,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(10511.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="24.838ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10978.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(980,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1431,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1709,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(2468,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2968.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3968.4,0)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(4717.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5106.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5635.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6086.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6537.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6982.1,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(7663.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8107.8,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(9089,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(10089.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(10589.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>中的最大值</li>
</ul>
<p>而S函数下：</p>
<ul>
<li>当L==R时，只有一张牌，且为后手，无法取得这张牌，返回0</li>
<li>否则，返回<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="24.426ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10796.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(980,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1431,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1709,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(2390,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2890.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3890.4,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(4535.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4924.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5453.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5904.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6355.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6800.1,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(7703.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(8703.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(9203.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(9648.2,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(10407.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>和<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="24.602ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10874.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(980,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1431,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mi" transform="translate(1709,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(2468,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(2968.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3968.4,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(4613.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5002.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5531.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5982.4,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(6433.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6878.1,0)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(7559.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(8003.8,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mo" transform="translate(8985,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(9985.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(10485.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>中的<strong>最小值</strong>（因为对方也是懂策略的人，总能取得最大值）</li>
</ul>
<p>实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p9.recursion;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p9.recursion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:Code03_PokeGame</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:利用递归求解扑克游戏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/24 20:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code03_PokeGame</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span>{</span><br><span class="line">        <span class="keyword">if</span>(l == r){</span><br><span class="line">            <span class="keyword">return</span> arr[l];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> Math.max(arr[l] + s(arr, l + <span class="number">1</span>, r), arr[r] + s(arr, l, r - <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">s</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span>{</span><br><span class="line">        <span class="keyword">if</span>(l == r){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> Math.min(arr[l] + f(arr, l + <span class="number">1</span>, r), arr[r] + f(arr, l, r - <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="递归实现栈的逆序"><a href="#递归实现栈的逆序" class="headerlink" title="递归实现栈的逆序"></a>递归实现栈的逆序</h1><p>问题：给出一个栈的逆序，要求不能申请额外的数据结构，只能使用递归函数</p>
<p>解题思路：先分析如何将一个栈中，如何返回栈底元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        stack.push(<span class="number">3</span>);</span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> swapFootTop(stack);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()){</span><br><span class="line">            System.out.println(stack.pop());</span><br><span class="line">        }</span><br><span class="line">        System.out.println(last);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">swapFootTop</span><span class="params">(Stack&lt;Integer&gt; stack)</span>{</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        <span class="keyword">if</span>(stack.isEmpty()) {</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> swapFootTop(stack);</span><br><span class="line">            stack.push(result);</span><br><span class="line">            <span class="keyword">return</span> last;</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></table></figure>
<p>这样，利用栈返回栈底元素时元素入栈，最终完成逆序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p9.recursion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p9.recursion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:Code04_ReverseStack</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:栈的逆序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/27 14:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code04_ReverseStack</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        stack.push(<span class="number">3</span>);</span><br><span class="line">        stack.push(<span class="number">2</span>);</span><br><span class="line">        stack.push(<span class="number">1</span>);</span><br><span class="line">        reverse(stack);</span><br><span class="line"><span class="comment">//        int last = swapFootTop(stack);</span></span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()){</span><br><span class="line">            System.out.println(stack.pop());</span><br><span class="line">        }</span><br><span class="line"><span class="comment">//        System.out.println(last);</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(Stack&lt;Integer&gt; stack)</span> {</span><br><span class="line">        <span class="keyword">if</span>(stack.isEmpty()){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> swapFootTop(stack);</span><br><span class="line">        reverse(stack);</span><br><span class="line">        stack.push(last);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">swapFootTop</span><span class="params">(Stack&lt;Integer&gt; stack)</span>{</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        <span class="keyword">if</span>(stack.isEmpty()) {</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> swapFootTop(stack);</span><br><span class="line">            stack.push(result);</span><br><span class="line">            <span class="keyword">return</span> last;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="数字转字符"><a href="#数字转字符" class="headerlink" title="数字转字符"></a>数字转字符</h1><p>问题：规定1和A对应，2和B对应，3和C对应……</p>
<p>那么一个数字字符串，例如“111”，能够转化成“AAA”、“KA”、“AK”</p>
<p>给定一个只有数字的字符串，返回有多少种转化结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p9.recursion;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p9.recursion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:Code05_NumConvertToWord</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:数字转字符，组合方式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/27 16:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code05_NumConvertToWord</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="comment">//AAAAA AKAA AKK AAK KKA KAAA AAKA AAAK</span></span><br><span class="line">        System.out.println(convert(<span class="string">"11111"</span>, <span class="number">0</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">convert</span><span class="params">(String s, <span class="type">int</span> i)</span> {</span><br><span class="line">        <span class="keyword">if</span>(i == s.length()){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(i) == <span class="string">'0'</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(i) == <span class="string">'1'</span>){</span><br><span class="line">            <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> convert(s, i + <span class="number">1</span>);<span class="comment">//i自己作为单独的部分，有多少种转换方法</span></span><br><span class="line">            <span class="keyword">if</span>(i + <span class="number">1</span> &lt; s.length()){</span><br><span class="line">                res += convert(s, i + <span class="number">2</span>);<span class="comment">//i和i+1作为一个部分，有多少种转换方法</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(i) == <span class="string">'2'</span>){</span><br><span class="line">            <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> convert(s, i + <span class="number">1</span>);<span class="comment">//i自己作为单独的部分，有多少种转换方法</span></span><br><span class="line">            <span class="comment">//只有20 - 26算入字符</span></span><br><span class="line">            <span class="keyword">if</span>(i + <span class="number">1</span> &lt; s.length() &amp;&amp; s.charAt(i + <span class="number">1</span>) &gt;= <span class="string">'0'</span> &amp;&amp; s.charAt(i + <span class="number">1</span>) &lt;= <span class="string">'6'</span>){</span><br><span class="line">                res += convert(s, i + <span class="number">2</span>);<span class="comment">//i和i+1作为一个部分，有多少种转换方法</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//s[i]为‘3’到‘9’时，只能自己作为单独的部分</span></span><br><span class="line">        <span class="keyword">return</span> convert(s, i + <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="背包最大价值问题"><a href="#背包最大价值问题" class="headerlink" title="背包最大价值问题"></a>背包最大价值问题</h1><p>问题描述：给定两个长度都为N的数组weights和values，分别代表对应数组下标物品的重量和价值。给定一个正数bag，表示一个载重bag的袋子，袋子能装下的物品总量不能超过这个重量。返回你能装下最多的价值是多少？</p>
<p>思路：记录对于每一个物品，放入背包和不放入背包的总价值，比较并选取最大化价值的放入方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p9.recursion;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p9.recursion</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:Code06_NPackage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:递归求解背包最大价值问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/27 17:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code06_NPackage</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxWeight</span><span class="params">(<span class="type">int</span>[] weights, <span class="type">int</span>[] values, <span class="type">int</span> i, <span class="type">int</span> curWeight, <span class="type">int</span> bag)</span>{</span><br><span class="line">        <span class="comment">//重量超过bag时，不能放入该物品</span></span><br><span class="line">        <span class="keyword">if</span>(curWeight &gt; bag){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//物品选取完毕，返回0</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt; values.length){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//不放入当前物品和放入中，选择能够最大化最终value的方案</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(</span><br><span class="line">                <span class="comment">//不放入当前物品</span></span><br><span class="line">                getMaxWeight(weights, values, i + <span class="number">1</span>, curWeight, bag),</span><br><span class="line">                <span class="comment">//放入当前物品</span></span><br><span class="line">                values[i] + getMaxWeight(weights, values, i +<span class="number">1</span>, curWeight + weights[i], bag)</span><br><span class="line">        );</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="N皇后问题"><a href="#N皇后问题" class="headerlink" title="N皇后问题"></a>N皇后问题</h1><p>再次回到<a href="https://shunliu.xyz/posts/43015.html#N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98">N皇后问题</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220527182114.png" alt=""></p>
<h2 id="暴力求解"><a href="#暴力求解" class="headerlink" title="暴力求解"></a>暴力求解</h2><p>每一行逐列探索，最后累加所有可能的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p7.preTreeAndGreedy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p7.preTreeAndGreedy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:Code05_NQueen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:N皇后问题</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/21 22:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code05_NQueen</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxNQueen</span><span class="params">(<span class="type">int</span> n)</span>{</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//recode[i]表示第i行的Queen放在第几列</span></span><br><span class="line">        <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">return</span> simProcess(<span class="number">0</span>, record, n);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//暴力遍历求解N皇后问题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">simProcess</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span>[] record, <span class="type">int</span> n)</span>{</span><br><span class="line">        <span class="keyword">if</span>(i == n){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) {</span><br><span class="line">            <span class="keyword">if</span>(isValid(record, i, j)){</span><br><span class="line">                record[i] = j;</span><br><span class="line">                res += simProcess(i + <span class="number">1</span>, record, n);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//验证当前位置是否符合放置规范</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span>[] record, <span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; i; k++) {</span><br><span class="line">            <span class="comment">//如果在同一列或同一条斜线上，不合法</span></span><br><span class="line">            <span class="comment">//同一斜线上的验证，通过判断斜率是否为1判定</span></span><br><span class="line">            <span class="keyword">if</span>(k == j || Math.abs(record[k] - j) == Math.abs(i - k)){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本part学习了递归函数的使用，递归核心特征在于其能够保留历史处理数据，对于需要借助历史数据求解问题的场景中，借助递归能够很大程度上降低程序时间复杂度，是对暴力求解方法的优化</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/QQ20220331104633.gif" alt=""></p>
]]></content>
      <categories>
        <category>Boom LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Boom LeetCode入门（六）图</title>
    <url>/posts/51878.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于图的算法，在图的不同表示结构下（例如邻接表和邻接矩阵）有不同的具体实现方式，但是具体的算法思路是一致的，因而在学习过程中只需要掌握好一种结构下的具体实现，在面对其它结构时，将其结构调整到我们所熟悉的那一种就能够搞定它。</p>
<p>本part中的算法均使用以下图结构实现：</p>
<p>Node节点结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p6.graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">    <span class="comment">//节点的值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> value;</span><br><span class="line">    <span class="comment">//节点入度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> in;</span><br><span class="line">    <span class="comment">//节点出度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> out;</span><br><span class="line">    <span class="comment">//与该节点有边相连接的节点集合(该节点指向的节点，即以该点为起点)</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Node&gt; nexts;</span><br><span class="line">    <span class="comment">//该节点的边集合，以该节点为起点的边</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Edge&gt; edges;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value)</span>{</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        in = <span class="number">0</span>;</span><br><span class="line">        out = <span class="number">0</span>;</span><br><span class="line">        nexts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>Edge边结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p6.graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Edge</span> {</span><br><span class="line">    <span class="comment">//边的权重</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> weight;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//边的入节点</span></span><br><span class="line">    <span class="keyword">public</span> Node from;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//边的出节点</span></span><br><span class="line">    <span class="keyword">public</span> Node to;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(<span class="type">int</span> weight, Node from, Node to)</span>{</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        <span class="built_in">this</span>.from = from;</span><br><span class="line">        <span class="built_in">this</span>.to = to;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>Graph图结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p6.graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Graph</span> {</span><br><span class="line">    <span class="comment">//点集合&lt;节点标号，节点&gt;</span></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Integer, Node&gt; nodes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//边集合</span></span><br><span class="line">    <span class="keyword">public</span> HashSet&lt;Edge&gt; edges;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">()</span>{</span><br><span class="line">        nodes = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        edges = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220514192108.png" alt=""></p>
<p>对于如下图，其BFS序列为[A, B, C, D, E, F]，其中，同一层次的遍历顺序不分先后(例如，也可以为[A, B, D, C, E, F])</p>
<p>DFS序列为[A, B, E, C, F, D]，与BFS相同，DFS序列也能够存在多个不同序列</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220514192127.png" alt=""></p>
<p>图的BFS↓</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p6.graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p6.graph</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:GraphBfs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:图的广度优先遍历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/14 14:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GraphBfs</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">graphBfs</span><span class="params">(Node node)</span>{</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        Set&lt;Node&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        set.add(node);</span><br><span class="line">        queue.offer(node);</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()){</span><br><span class="line">            node = queue.poll();</span><br><span class="line">            System.out.println(node.value);</span><br><span class="line">            <span class="keyword">for</span> (Node temp : node.nexts) {</span><br><span class="line">                <span class="keyword">if</span>(!set.contains(temp)){</span><br><span class="line">                    set.add(temp);</span><br><span class="line">                    queue.offer(temp);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>以set存储节点并逐一比对，便于区分图中是否有环</p>
<p>图的DFS↓</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p6.graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p6.graph</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:Code02_GraphDFS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:图的深度优先遍历</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/14 14:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code02_GraphDFS</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">graphDfs</span><span class="params">(Node node)</span>{</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        Set&lt;Node&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        set.add(node);</span><br><span class="line">        stack.push(node);</span><br><span class="line">        System.out.println(node.value);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()){</span><br><span class="line">            node = stack.pop();</span><br><span class="line">            <span class="keyword">for</span> (Node temp : node.nexts) {</span><br><span class="line">                <span class="keyword">if</span>(!set.contains(temp)){</span><br><span class="line">                    stack.push(temp);</span><br><span class="line">                    set.add(temp);</span><br><span class="line">                    System.out.println(temp.value);</span><br><span class="line">                    stack.push(node);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="拓扑排序算法"><a href="#拓扑排序算法" class="headerlink" title="拓扑排序算法"></a>拓扑排序算法</h1><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220515111440.png" alt=""></p>
<p>拓扑排序<strong>仅适用于无环图</strong></p>
<p>拓扑排序常用于有依赖项的应用中，例如对于一个工程，工程B完成后，才能开始A工程，那么应当保证工程的正确执行顺序以避免阻塞，拓扑排序算法思路如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220514192146.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p6.graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p6.graph</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:Code03_TopoSort</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:图的拓扑排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/14 15:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code03_TopoSort</span> {</span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Node&gt; <span class="title function_">topoSort</span><span class="params">(Graph graph)</span>{</span><br><span class="line">        <span class="keyword">if</span>(graph == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//以HashMap存储对应节点，当前的出度</span></span><br><span class="line">        Map&lt;Node, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//用队列存储当前出度为0的节点</span></span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Node node : graph.nodes.values()) {</span><br><span class="line">            map.put(node, node.out);</span><br><span class="line">            <span class="keyword">if</span>(node.out == <span class="number">0</span>){</span><br><span class="line">                queue.offer(node);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Node&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty()){</span><br><span class="line">            <span class="comment">//取出出度为0的Node</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            res.add(temp);</span><br><span class="line">            <span class="comment">//更新其它Nodes出度</span></span><br><span class="line">            <span class="keyword">for</span> (Node next : temp.nexts) {</span><br><span class="line">                map.put(next, map.get(next) - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(map.get(next) == <span class="number">0</span>){</span><br><span class="line">                    queue.offer(next);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h1><p>求最小生成树的算法有Kruskal算法和Prim算法，两种算法均用于<strong>无向图</strong>中，区别在于K算法以<strong>边</strong>为参考，而P算法以<strong>点</strong>为参考</p>
<h2 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h2><p>算法思路如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220514192202.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220514192216.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220514192230.png" alt=""></p>
<p>实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p6.graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p6.graph</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:Code04_Kruskal</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/14 15:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code04_Kruskal</span> {</span><br><span class="line">    <span class="comment">//初始化set结构用于判断是否形成了环</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Node, Set&lt;Node&gt;&gt; <span class="title function_">mySet</span><span class="params">(Graph graph)</span>{</span><br><span class="line">        <span class="keyword">if</span>(graph == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//HashMap用来存储节点所在集合</span></span><br><span class="line">        Map&lt;Node, Set&lt;Node&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Node node : graph.nodes.values()) {</span><br><span class="line">            Set&lt;Node&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            set.add(node);</span><br><span class="line">            map.put(node, set);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断两个节点是否位于同一集合内，即是否有环</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameSet</span><span class="params">(Map&lt;Node, Set&lt;Node&gt;&gt; map, Node A, Node B)</span>{</span><br><span class="line">        <span class="keyword">return</span> map.get(A) == map.get(B);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//合并两个集合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(Map&lt;Node, Set&lt;Node&gt;&gt; map, Node A, Node B)</span>{</span><br><span class="line">        Set&lt;Node&gt; fromSet = map.get(A);</span><br><span class="line">        Set&lt;Node&gt; toSet = map.get(B);</span><br><span class="line">        <span class="keyword">for</span> (Node node : toSet) {</span><br><span class="line">            <span class="keyword">if</span>(!fromSet.contains(node)){</span><br><span class="line">                fromSet.add(node);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        map.put(B, fromSet);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过自定义比较器，实现优先队列中的边升序排列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Edge&gt;{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Edge o1, Edge o2)</span> {</span><br><span class="line">            <span class="keyword">return</span> o1.weight - o2.weight;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Kruskal算法核心</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Edge&gt; <span class="title function_">kruskal</span><span class="params">(Graph graph)</span>{</span><br><span class="line">        <span class="keyword">if</span>(graph == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        Map&lt;Node, Set&lt;Node&gt;&gt; map = mySet(graph);</span><br><span class="line">        Set&lt;Edge&gt; res = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        PriorityQueue&lt;Edge&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">myComparator</span>());</span><br><span class="line">        <span class="keyword">for</span> (Edge edge : graph.edges) {</span><br><span class="line">            queue.add(edge);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()){</span><br><span class="line">            <span class="type">Edge</span> <span class="variable">edge</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//边对应的两个节点不在同一集合中时，加入res中并合并两个集合</span></span><br><span class="line">            <span class="keyword">if</span>(!isSameSet(map, edge.from, edge.to)){</span><br><span class="line">                res.add(edge);</span><br><span class="line">                union(map, edge.from, edge.to);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h2><p>算法思路如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220514192246.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220514192302.png" alt=""></p>
<p>实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p6.graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p6.graph</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:Code05_Prim</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:Prime算法求最小生成树</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/14 16:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code05_Prim</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Edge&gt;{</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Edge o1, Edge o2)</span> {</span><br><span class="line">            <span class="keyword">return</span> o1.weight - o2.weight;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Edge&gt; <span class="title function_">prim</span><span class="params">(Graph graph)</span>{</span><br><span class="line">        <span class="keyword">if</span>(graph == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//set用于存放已放入最小生成树中的节点</span></span><br><span class="line">        Set&lt;Node&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Edge&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">myComparator</span>());</span><br><span class="line">        Set&lt;Edge&gt; res = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Node node : graph.nodes.values()) {</span><br><span class="line">            <span class="comment">//随机选择一个节点</span></span><br><span class="line">            <span class="keyword">if</span>(!set.contains(node)){</span><br><span class="line">                set.add(node);</span><br><span class="line">                <span class="comment">//节点所连边全部入队</span></span><br><span class="line">                <span class="keyword">for</span> (Edge edge : node.edges) {</span><br><span class="line">                    queue.add(edge);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">while</span>(!queue.isEmpty()){</span><br><span class="line">                    <span class="type">Edge</span> <span class="variable">edge</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                    <span class="comment">//最小边两侧节点没有加入最小树中时</span></span><br><span class="line">                    <span class="keyword">if</span>(!set.contains(edge.to)){</span><br><span class="line">                        res.add(edge);</span><br><span class="line">                        set.add(edge.to);</span><br><span class="line">                        <span class="keyword">for</span> (Edge temp : edge.to.edges) {</span><br><span class="line">                            queue.offer(temp);</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>prim函数中的for循环是为了防止出现无连通图，对其中的森林进行处理，逐一生成最小生成树</p>
<h1 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h1><p>求两个节点之间的最短路径，利用Dijkstra算法和Floyd算法求解</p>
<h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><p>Dijkstra算法适用于没有负数权值边(可以有累加值为负数的边，但不能有累加值为负数的环)的图，给定一个起始节点，求该起始节点到所有节点的最小路径</p>
<p>其算法思想如↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220514192325.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220514192339.png" alt=""></p>
<p>实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p6.graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:p6.graph</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:Code06_Dijkstra</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:Dijkstra算法求最短路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/14 18:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code06_Dijkstra</span> {</span><br><span class="line">    <span class="comment">//返回Map中，Value为head到该Value对应节点的最短路径</span></span><br><span class="line">    <span class="keyword">public</span> HashMap&lt;Node, Integer&gt; <span class="title function_">dijkstra</span><span class="params">(Node head)</span>{</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        HashMap&lt;Node, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//到自己的最短距离为0</span></span><br><span class="line">        map.put(head, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//selectedSet记录当前已被作为基准，使用过的节点</span></span><br><span class="line">        HashSet&lt;Node&gt; selectedSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//返回当前节点所对应的最短边所连接的节点（且该节点未作为基准使用过）</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">minNode</span> <span class="operator">=</span> getMinEdgeAndNoSelectedNode(map, selectedSet);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(minNode != <span class="literal">null</span>){</span><br><span class="line">            <span class="comment">//当前基准节点的最短路径</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">distance</span> <span class="operator">=</span> map.get(minNode);</span><br><span class="line">            <span class="comment">//更新该基准节点所连接到的节点其最短距离</span></span><br><span class="line">            <span class="keyword">for</span> (Edge edge : minNode.edges) {</span><br><span class="line">                <span class="type">Node</span> <span class="variable">toNode</span> <span class="operator">=</span> edge.to;</span><br><span class="line">                <span class="keyword">if</span>(!map.containsKey(toNode)){</span><br><span class="line">                    map.put(toNode, distance + edge.weight);</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    map.put(toNode, Math.min(map.get(toNode), distance + edge.weight));</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            selectedSet.add(minNode);</span><br><span class="line">            <span class="comment">//继续选择下一个基准节点，直到所有节点都使用过，返回null，结束</span></span><br><span class="line">            minNode = getMinEdgeAndNoSelectedNode(map, selectedSet);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">getMinEdgeAndNoSelectedNode</span><span class="params">(HashMap&lt;Node, Integer&gt; map, HashSet&lt;Node&gt; selectedSet)</span> {</span><br><span class="line">        <span class="type">Node</span> <span class="variable">minNode</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minDistance</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Node, Integer&gt; entry : map.entrySet()) {</span><br><span class="line">            <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="keyword">if</span>(map.get(temp) &lt; minNode.value &amp;&amp; selectedSet.contains(temp)){</span><br><span class="line">                minNode = temp;</span><br><span class="line">                minDistance = map.get(temp);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> minNode;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>该part中详细介绍了图结构的使用，以及常见的图相关算法，其中较为关键的是要能够<strong>熟练掌握一种自己所熟悉图结构下算法的具体实现</strong>，并能够<strong>将其它图结构转化为自己所熟悉的结构</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/QQ20220331104633.gif" alt=""></p>
]]></content>
      <categories>
        <category>Boom LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Boom LeetCode入门（一）复杂度&amp;简单排序算法</title>
    <url>/posts/34409.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>BoomLeetCode系列笔记为学习左神视频<a href="https://www.bilibili.com/video/BV13g41157hK?p=2">一周刷爆LeetCode</a>所总结笔记，一共38p，计划每天刷1p，笔记更新进度会比较慢</p>
<p>瑞思拜左神~</p>
<p>文章时间复杂度均按最坏情况下计算</p>
<h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>这部分对于有编程基础的来说不是问题，大体上快速过一遍，先以选择排序中的计算方式给出时间复杂度概念</p>
<p>全部笔记已上传github：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220504164859.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220504164838.png" alt=""></p>
<h1 id="简单排序算法"><a href="#简单排序算法" class="headerlink" title="简单排序算法"></a>简单排序算法</h1><p>关于排序算法，另一篇文章<a href="https://shunliu.xyz/posts/47991e6b.html?highlight=%E6%8E%92%E5%BA%8F">请教我学数据结构（一）排序</a>有介绍过，温故知新，看完左神视频后又有了一些新的理解，所以选择再完整记录一次</p>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>时间复杂度的介绍中大体讲解了选择排序流程，即对于长度为N的数组。从数组下标0开始，寻找当前数组中0-N减1的最小数，放在数组下标0的位置，继续从下标1开始，寻找数组1-N减1的最小数，放在数组下标1的位置。即每一轮查找都有一个数放入最终所在位置。</p>
<p>基于以上思路，编码实现选择排序算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p1.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code01_SelectionSort</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">//        输入数据处理</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入排序数字个数==========&gt;"</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        System.out.println(<span class="string">"请输入数据============&gt;"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            nums[i]= sc.nextInt();</span><br><span class="line">        }</span><br><span class="line">        selectionSort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">            System.out.print(num + <span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选择排序主体</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span>[] nums)</span>{</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length &lt; <span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++){</span><br><span class="line">            <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++){</span><br><span class="line">                minIndex = nums[j] &lt; nums[minIndex] ? j : minIndex;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(minIndex != i){</span><br><span class="line">                swap(nums, i, minIndex);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组位置交换</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span>{</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>时间复杂度<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p><strong>额外</strong>空间复杂度O(1)</p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序大体思路如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220504164817.png" alt=""></p>
<p>实现代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p1.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code02_BubbleSort</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Main处理输入输出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入排序数字个数==========&gt;"</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        System.out.println(<span class="string">"请输入数据============&gt;"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            nums[i]= sc.nextInt();</span><br><span class="line">        }</span><br><span class="line">        bubbleSort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">            System.out.print(num + <span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//冒泡排序核心思路</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] nums)</span>{</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length &lt; <span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nums.length - <span class="number">1</span>; i&gt;<span class="number">0</span>; i--){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++){</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &gt; nums[j+<span class="number">1</span>]){</span><br><span class="line">                    swap(nums, j);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换数组前后位置数据</span></span><br><span class="line"><span class="comment">//    public static void swap(int[] nums, int i){</span></span><br><span class="line"><span class="comment">//        int temp = nums[i+1];</span></span><br><span class="line"><span class="comment">//        nums[i+1] = nums[i];</span></span><br><span class="line"><span class="comment">//        nums[i] = temp;</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">    <span class="comment">//异或运算交换元素位置,不推荐使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i)</span>{</span><br><span class="line">        nums[i] = nums[i] ^ nums[i + <span class="number">1</span>];</span><br><span class="line">        nums[i + <span class="number">1</span>] = nums[i + <span class="number">1</span>] ^ nums[i];</span><br><span class="line">        nums[i] = nums[i] ^ nums[i + <span class="number">1</span>];</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>时间复杂度<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p><strong>额外</strong>空间复杂度O(1)</p>
<p>其中对于异或运算实现数组元素交换，其原理为：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220504164754.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220504164658.png" alt=""></p>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序思路如↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220504164641.png" alt=""></p>
<p>实现代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p1.sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code03_InsertionSort</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入排序数字个数==========&gt;"</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        System.out.println(<span class="string">"请输入数据============&gt;"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            nums[i]= sc.nextInt();</span><br><span class="line">        }</span><br><span class="line">        insertionSort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">            System.out.print(num + <span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入排序核心思路</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length &lt; <span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; <span class="number">0</span>; j--){</span><br><span class="line">                <span class="keyword">if</span>(nums[j-<span class="number">1</span>] &lt; nums[j]){</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                swap(nums, j);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> j)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[j];</span><br><span class="line">        nums[j] = nums[j - <span class="number">1</span>];</span><br><span class="line">        nums[j - <span class="number">1</span>] = temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>时间复杂度<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2577.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p><strong>额外</strong>空间复杂度O(1)</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本部分内容回顾了时间复杂度的计算方法，以及一些简单排序算法。复现过程中没有完全copy左神代码，根据自己的理解做了一些调整，没有通过对比器进行测试，如有错误，请指正。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/QQ20220331104633.gif" alt=""></p>
]]></content>
      <categories>
        <category>Boom LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Boom LeetCode入门（二）O(NlogN)时复的排序算法</title>
    <url>/posts/45144.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Boom LeetCode(一)中介绍了常用排序算法选择排序、冒泡排序和插入排序，这些排序算法的时间复杂度均为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.606ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2919.8 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mn" transform="translate(975.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2530.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>，排序效率较低，而对于排序，结合二分法和归并思想能够有效提升算法查询效率，本部分中介绍<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="10.355ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4577 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(2040,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2338,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2823,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(3300,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(4188,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>时间复杂度的排序算法。</p>
<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>归并排序通过<strong>递归地划分左右数组</strong>，对左右数组完成排序后，再<strong>合并两个数组</strong>，完成最终数组的排序，算法思路如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220508113028.png" alt=""></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p2.sort_nlogn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理输入输出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入排序数字个数==========&gt;"</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        System.out.println(<span class="string">"请输入数据============&gt;"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            nums[i]= sc.nextInt();</span><br><span class="line">        }</span><br><span class="line">        mergeSort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">            System.out.print(num + <span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length &lt; <span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        sort(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//归并排序核心代码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r)</span> {</span><br><span class="line">        <span class="keyword">if</span>(l == r){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> l + (r - l) / <span class="number">2</span>; <span class="comment">//int m = l + ((r - l) &gt;&gt; 1);</span></span><br><span class="line">        sort(nums, l , m);</span><br><span class="line">        sort(nums, m+<span class="number">1</span>, r);</span><br><span class="line">        merge(nums, l, m, r);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">//    借助辅助数组完成左右数组合并</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> m, <span class="type">int</span> r)</span> {</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[r - l + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= m &amp;&amp; j &lt;= r){</span><br><span class="line">            arr[index++] = nums[i] &lt;= nums[j] ? nums[i++]:nums[j++];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span>(i &lt;= m){</span><br><span class="line">            arr[index++] = nums[i++];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= r){</span><br><span class="line">            arr[index++] = nums[j++];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; arr.length; k++) {</span><br><span class="line">            nums[l + k] = arr[k];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>以<a href="https://www.csdn.net/tags/NtTaUg0sNzM1MjktYmxvZwO0O0OO0O0O.html">master公式</a>计算其时间复杂度为</p>
<script type="math/tex; mode=display">T(N) = 2T(N/2)+O(N)</script><p>其中a=2, b=2, d=1即<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex" xmlns="http://www.w3.org/2000/svg" width="9.115ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 4028.9 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="msub" transform="translate(783,0)"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(510,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1646.3,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mo" transform="translate(2453.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3508.9,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container></p>
<p>所以其时间复杂度为</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="18.734ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8280.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="mo" transform="translate(704,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1093,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(1981,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2647.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3703.6,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(4466.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4855.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(5743.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(6041.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6526.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(7003.6,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(7891.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p>归并排序时间复杂度低的原因是，相比于part1中提到的时间复杂度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.606ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2919.8 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mn" transform="translate(975.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2530.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>的排序算法， 这些算法每一次排序过程都要经过一个<strong>长时间的元素比较</strong>，浪费了大量的比较次数。而归并排序中，每一次合并的两个数组都是<strong>有序的</strong>，这大大降低了比对次数，从而降低了算法的时间复杂度</p>
<p>由于归并排序中借用了其它数组完成数组的合并，因而该排序为<strong>外排序算法</strong></p>
<p>额外空间复杂度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.495ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2429 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2040,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p>思考：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220508113004.png" alt=""></p>
<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h2><p>快速排序经历了多个版本的迭代优化，不同版本基本思路如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220508112934.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220508112906.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220508112847.png" alt=""></p>
<h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p2.sort_nlogn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.generic.SWAP;</span><br><span class="line"><span class="keyword">import</span> jdk.internal.org.objectweb.asm.commons.StaticInitMerger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速排序3.0</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code02_QuickSort</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入排序数字个数==========&gt;"</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        System.out.println(<span class="string">"请输入数据============&gt;"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            nums[i] = sc.nextInt();</span><br><span class="line">        }</span><br><span class="line">        quickSort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">            System.out.print(num + <span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length &lt; <span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        sort(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r)</span> {</span><br><span class="line">        <span class="keyword">if</span>(l &lt; r){</span><br><span class="line">            <span class="comment">//快排3.0不同于其它两个版本就在于这里</span></span><br><span class="line">            <span class="comment">//不再是仅取数组尾元素作为flag</span></span><br><span class="line">            <span class="comment">//而是随机选择一个数，并与数组尾元素交换作为flag</span></span><br><span class="line">            <span class="comment">//这降低了数据整体有序时，O(n^2)复杂度的时间复杂度</span></span><br><span class="line">            swap(nums, r, l + (<span class="type">int</span>)Math.random() * (r - l + <span class="number">1</span>));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//数组p用来记录一次排序完成后，当前排序数字的左右边界</span></span><br><span class="line">            <span class="comment">// (例如以5为flag时，排序完成后[1, 3, 2, 4, 5, 5, 9, 7])</span></span><br><span class="line">            <span class="comment">//这时返回p[0]为4，p[1]为5</span></span><br><span class="line">            <span class="comment">//partition函数功能即为找到左右边界的具体实现</span></span><br><span class="line">            <span class="type">int</span>[] p = partition(nums, l, r);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//以左右边界划分数组，递归调用函数排序</span></span><br><span class="line">            sort(nums, l, p[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">            sort(nums, p[<span class="number">1</span>] + <span class="number">1</span>, r);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] partition(<span class="type">int</span>[] nums, <span class="type">int</span> l, <span class="type">int</span> r) {</span><br><span class="line">        <span class="comment">//less始终记录左边界的下一位</span></span><br><span class="line">        <span class="comment">//more始终记录右边界</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">less</span> <span class="operator">=</span> l - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">more</span> <span class="operator">=</span> r;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; more){</span><br><span class="line">            <span class="keyword">if</span>(nums[l] &lt; nums[r]){</span><br><span class="line">                swap(nums, ++less, l++);</span><br><span class="line">            }<span class="keyword">else</span> <span class="keyword">if</span>(nums[l] &gt; nums[r]){</span><br><span class="line">                swap(nums, --more, l);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                l++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        swap(nums, more, r);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]{less + <span class="number">1</span>, more};</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>时间复杂度上，快速排序对于有序的数组（例如[1,2,3,4,5,6,7,8,9]），其排序性能差，按照最坏情况下的复杂度算为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.606ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2919.8 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mn" transform="translate(975.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2530.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p>额外空间复杂度<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="8.346ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3689 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1450,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1935,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2412,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(3300,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p>以一个实例加深对该快排思路的理解：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220508112758.png" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本节中介绍了部分排序效率更高的算法，这些算法通过二分递归等思想降低了之前的一些简单排序算法中，存在的历史对比信息浪费，从而导致算法效率低的问题。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/QQ20220331104633.gif" alt=""></p>
]]></content>
      <categories>
        <category>Boom LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Boom LeetCode入门（三）堆排序&amp;桶排序</title>
    <url>/posts/25933.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本节详解堆排序和桶排序，堆排序中最关键的就是熟悉堆结构的构建和使用</p>
<h1 id="堆结构-amp-堆排序"><a href="#堆结构-amp-堆排序" class="headerlink" title="堆结构&堆排序"></a>堆结构&amp;堆排序</h1><h2 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h2><p>堆结构在逻辑上是一颗<strong>完全二叉树</strong>，    对于一颗完全二叉树。<strong>每一颗子树</strong>其<strong>根节点为最大值</strong>，则该完全二叉树为<strong>大根堆</strong>。相反，每一颗子树其根节点为<strong>最小值</strong>，则为<strong>小根堆</strong></p>
<p>以大根堆下的堆排序为例，排序算法思路如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220510101855.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220510101915.png" alt=""></p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>大顶堆下的堆排序代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p3.heapsort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code01_HeapSort</span> {</span><br><span class="line">    <span class="comment">//处理输入输出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入排序数字个数==========&gt;"</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        System.out.println(<span class="string">"请输入数据============&gt;"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            nums[i] = sc.nextInt();</span><br><span class="line">        }</span><br><span class="line">        heapSort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">            System.out.print(num + <span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="comment">//特殊情况</span></span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length &lt; <span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建初始大顶堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) {</span><br><span class="line">            heapInsert(nums, i);</span><br><span class="line">        }</span><br><span class="line"><span class="comment">//        System.out.println("debug======&gt;排序完成");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//heapSize用来记录堆的右边界，每取完一个最大值，右边界左移一位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">heapSize</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        swap(nums, <span class="number">0</span>, heapSize--);</span><br><span class="line">        <span class="keyword">while</span>(heapSize &gt; <span class="number">0</span>){</span><br><span class="line">            <span class="comment">//heapify为取完最大值后，对大顶堆的调整</span></span><br><span class="line">            heapify(nums, <span class="number">0</span>, heapSize);</span><br><span class="line">            swap(nums, <span class="number">0</span>, heapSize--);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> index)</span> {</span><br><span class="line">        <span class="comment">//值不断与父节点比较，直到父节点大于其值，或者到达根节点时，调整结束</span></span><br><span class="line">        <span class="keyword">while</span>(nums[index] &gt; nums[(index - <span class="number">1</span>) / <span class="number">2</span>]){</span><br><span class="line">            swap(nums, index, (index - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">            index = (index - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> index, <span class="type">int</span> heapSize)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; heapSize){</span><br><span class="line">            <span class="comment">//右子节点存在时，先比较左右子节点，找到最大值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">largeIdx</span> <span class="operator">=</span> (left + <span class="number">1</span> &lt; heapSize &amp;&amp; nums[left + <span class="number">1</span>] &gt;nums[left]) ?</span><br><span class="line">                    left + <span class="number">1</span> : left;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//子节点数值小于父节点时，大顶堆调整完毕</span></span><br><span class="line">            <span class="comment">//这里要留意大顶堆结构特性，当父节点数值大于子节点时，当前父节点子树结构未被打乱</span></span><br><span class="line">            <span class="comment">//所以必定大于所有子树节点数值</span></span><br><span class="line">            <span class="keyword">if</span>(nums[largeIdx] &lt;= nums[index]){</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            swap(nums, index, largeIdx);</span><br><span class="line">            index = largeIdx;</span><br><span class="line">            left = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换数组数值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = temp;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>堆排序下每次调整，在一个树的高度上只有一次，而堆结构又是一颗完全二叉树。</p>
<p>因此堆排序的时间复杂度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="8.346ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3689 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1450,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1935,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2412,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(3300,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p>而对于空间复杂度，堆排序下只有在堆结构进行调整时需要额外为几个变量开辟空间，其空间复杂度低</p>
<p>堆结构的重要性体现在它的多个应用场景下，优先级队列就是基于堆结构实现的，其底层结构为小根堆，JAVA中有PriorityQueue具体实现，能够直接调用</p>
<h2 id="JAVA比较器的使用"><a href="#JAVA比较器的使用" class="headerlink" title="JAVA比较器的使用"></a>JAVA比较器的使用</h2><p>JAVA中通过Arrays.sort()对一个数组进行排序，返回的结果默认按照升序排列，如何直接得到降序排列结果呢</p>
<p>对于比较器中传入的两个参数a,b(注意传参顺序，a为第一个参数，b为第二参数)，根据返回结果：</p>
<ul>
<li>为负数时，a排前面</li>
<li>为正数时，b排前面</li>
<li>为0时，都可</li>
</ul>
<p>那么应用比较器生成大根堆的排序时，就可以将其返回结果看作是：</p>
<ul>
<li>为负数时，a排<strong>上面</strong></li>
<li>为正数时，b排<strong>下面</strong></li>
<li>为0时，都可</li>
</ul>
<p>这样就可以通过传入一个比较器，将PriorityQueue调整为大根堆结构</p>
<h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><p>前面提到的所有排序算法只与两个数大小的比较有关，将这些算法统称为<strong>基于比较的排序算法</strong>，而桶排序就是一种不基于比较的排序算法，需要留意的是：</p>
<p>不基于比较的排序算法，如何实现需要<strong>根据数据状况定制</strong></p>
<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>对于一个数组，例如[0, 1, 2, 4, 5, 7, 7, 1, 2, 7]</p>
<p>从左往右遍历数组，并记录下每一个数出现的次数</p>
<p>0→1次</p>
<p>1→2次</p>
<p>2→2次</p>
<p>4→1次</p>
<p>5→1次</p>
<p>7→3次</p>
<p>再根据记录的次数得出排序后的数组为[0, 1, 1, 2, 2, 4, 5, 7, 7, 7]</p>
<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><h3 id="算法思路-1"><a href="#算法思路-1" class="headerlink" title="算法思路"></a>算法思路</h3><p>基数排序为桶排序中最为重要的一种排序算法</p>
<p>其算法思路如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220510101937.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220510101954.png" alt=""></p>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> p3.heapsort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基数排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code02_RadixSort</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line"><span class="comment">//        System.out.println("debug=====&gt;" + getMaxDigit(new int[]{1000}));</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入排序数字个数==========&gt;"</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        System.out.println(<span class="string">"请输入数据============&gt;"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">            nums[i] = sc.nextInt();</span><br><span class="line">        }</span><br><span class="line">        radixSort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) {</span><br><span class="line">            System.out.print(num + <span class="string">" "</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length &lt; <span class="number">2</span>){</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">init</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span>[] help = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//count数组用来记录，每个位置上同一数字的出现数字</span></span><br><span class="line">        <span class="comment">//下标1-9对应出现的数字，下标对应数字为出现次数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算nums数组中最大数的位数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxDigit</span> <span class="operator">=</span> getMaxDigit(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; maxDigit; i++) {</span><br><span class="line">            <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; nums.length; j++) {</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> ((nums[j] / (<span class="type">int</span>)Math.pow(init, i)) % <span class="number">10</span>);</span><br><span class="line">                count[num] ++;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; count.length; j++) {</span><br><span class="line">                count[j] = count[j] + count[j-<span class="number">1</span>];</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> nums.length - <span class="number">1</span>; j&gt;=<span class="number">0</span>; j--){</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> ((nums[j] / (<span class="type">int</span>)Math.pow(init, i)) % <span class="number">10</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">numCount</span> <span class="operator">=</span> count[num];</span><br><span class="line">                help[numCount - <span class="number">1</span>] = nums[j];</span><br><span class="line">                count[num]--;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; help.length; j++) {</span><br><span class="line">                nums[i] = help[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMaxDigit</span><span class="params">(<span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) {</span><br><span class="line">            max = Math.max(max, nums[i]);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">digit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(max != <span class="number">0</span>){</span><br><span class="line">            digit++;</span><br><span class="line">            max = max / <span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> digit;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>radixSort使用了两个数组来辅助排序，分别是count[]用来记录对应下标的数字，在当前位数的排序中出现的次数，不过做了一些调整，记录不是=该数的次数，而是&lt;=该数的次数，为什么要这样保存呢，看一个实例</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220510102014.png" alt=""></p>
<h1 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h1><p>对于排序算法，排序完成后相同值的对应位置没有发生变化，则认为该排序算法是稳定的。例如([1, 2, 3, 1]排序完成后[1, 1, 2, 3],第一个以仍对应的原数组中第一个1，则该排序过程是稳定的)。</p>
<p>稳定的排序算法：冒泡排序、插入排序、归并排序、基数排序</p>
<p>不稳定的排序算法：选择排序、快速排序、堆排序</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>各排序算法一览表如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">排序算法</th>
<th style="text-align:center">时间复杂度</th>
<th style="text-align:center">空间复杂度</th>
<th style="text-align:center">稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">选择</td>
<td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.606ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2919.8 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mn" transform="translate(975.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2530.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></td>
<td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.618ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2041 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:center">冒泡</td>
<td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.606ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2919.8 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mn" transform="translate(975.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2530.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></td>
<td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.618ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2041 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">插入</td>
<td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="6.606ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 2919.8 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mn" transform="translate(975.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2530.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></td>
<td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.618ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2041 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">归并</td>
<td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="10.355ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4577 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(2040,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2338,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2823,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(3300,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(4188,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></td>
<td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="5.495ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2429 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(2040,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center">快排3.0</td>
<td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="10.355ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4577 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(2040,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2338,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2823,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(3300,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(4188,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></td>
<td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="8.346ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3689 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1450,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1935,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(2412,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(3300,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:center">堆</td>
<td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="10.355ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4577 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mi" transform="translate(2040,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(2338,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2823,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(3300,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(4188,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></td>
<td style="text-align:center"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="4.618ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 2041 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1152,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(1652,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></td>
<td style="text-align:center">×</td>
</tr>
</tbody>
</table>
</div>
<p>排序算法的回顾到这一part结束，熟悉每个排序算法要解决的问题和算法思路尤为重要。后续将逐步回顾常用数据结构的使用。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/QQ20220331104633.gif" alt=""></p>
]]></content>
      <categories>
        <category>Boom LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客题解-NC68跳台阶</title>
    <url>/posts/5dbe7165.html</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>与斐波那契数列一样，只是初始状态改为</p>
<p>f（0）= f（1）= 1；</p>
<p>状态转移方程仍然为：</p>
<p>f（n） = f（n - 1） + f (n - 2);</p>
<p>题目分析，假设f[i]表示在第i个台阶上可能的方法数。逆向思维。如果我从第n个台阶进行下台阶，下一步有2中可能，一种走到第n-1个台阶，一种是走到第n-2个台阶。所以f[n] = f[n-1] + f[n-2].<br>那么初始条件了，f[0] = f[1] = 1。<br>所以就变成了：f[n] = f[n-1] + f[n-2], 初始值f[0]=1, f[1]=1，目标求f[n]</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">JumpFloor</span><span class="params">(<span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>; </span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; target; ++i)&#123;</span><br><span class="line">            sum = a + b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客题解</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot+VUE实战项目-后台管理系统</title>
    <url>/posts/33939.html</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>笔记为学习青戈大佬 <a href="https://www.bilibili.com/video/BV1U44y1W77D?spm_id_from=333.337.search-card.all.click">从0开始带你手撸一套SpringBoot+Vue后台管理系统（2022年最新版）</a>所总结笔记，瑞斯拜~</p>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>项目所使用软件及版本如↓</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213907.png" alt=""></p>
<p>软件包自取：</p>
<p>链接: <a href="https://pan.baidu.com/s/10UEXF10CuMSA8zFNrLBYBw?pwd=rb9d">https://pan.baidu.com/s/10UEXF10CuMSA8zFNrLBYBw?pwd=rb9d</a> 提取码: rb9d</p>
<h2 id="vue安装"><a href="#vue安装" class="headerlink" title="vue安装"></a>vue安装</h2><p>还需要安装vue-cli(==这里和视频版本不一致，有问题检查版本==)，教程戳<a href="https://blog.csdn.net/m0_67392661/article/details/123368325">vue-cli（vue脚手架）安装 详细教程</a></p>
<p>抄作业，步骤如下：</p>
<p>（1）命令行工具输入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure>
<p>安装完成后输入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">webpack -v</span><br></pre></td></tr></table></figure>
<p>检查</p>
<p>（2）命令行输入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm install --global vue-cli</span><br></pre></td></tr></table></figure>
<p>安装完成后输入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure>
<p>检查</p>
<p>tips:项目中根目录依据所建项目文件夹灵活变动，不一定和该文章保持完全一致</p>
<p>在F:/代码/后台管理系统  下新建vue项目</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vue create vue</span><br></pre></td></tr></table></figure>
<p>设置属性如下图，版本选择2.X，接下来分别选择Y→json→n</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213845.png" alt=""></p>
<p>创建完毕：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213828.png" alt=""></p>
<p>idea打开刚新建项目vue</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213800.png" alt=""></p>
<p>命令行中在F:/代码/后台管理系统/vue 下执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213743.png" alt=""></p>
<p>本地访问 <a href="http://localhost:8080/能够访问到刚刚构建的前端项目">http://localhost:8080/能够访问到刚刚构建的前端项目</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213725.png" alt=""></p>
<h2 id="element框架安装"><a href="#element框架安装" class="headerlink" title="element框架安装"></a>element框架安装</h2><p>项目中后台管理系统使用element框架</p>
<p><a href="https://element.eleme.cn/#/zh-CN/component/installation">element官方安装教程</a></p>
<p>F:/代码/后台管理系统/vue  下执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>
<p>安装完成后依据<a href="https://element.eleme.cn/#/zh-CN/component/quickstart">Quick Start</a>指引</p>
<p>在main.js下引入element</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">import Vue from 'vue'</span><br><span class="line">import App from './App.vue'</span><br><span class="line">import router from './router'</span><br><span class="line">import ElementUI from 'element-ui';</span><br><span class="line">import 'element-ui/lib/theme-chalk/index.css';</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="keyword">false</span></span><br><span class="line">Vue.use(ElementUI<span class="punctuation">,</span> <span class="punctuation">{</span>size<span class="punctuation">:</span> <span class="string">"small"</span><span class="punctuation">}</span>);</span><br><span class="line"></span><br><span class="line">new Vue(<span class="punctuation">{</span></span><br><span class="line">  router<span class="punctuation">,</span></span><br><span class="line">  render<span class="punctuation">:</span> h =&gt; h(App)</span><br><span class="line"><span class="punctuation">}</span>).$mount('#app')</span><br></pre></td></tr></table></figure>
<p>HomeView.vue下进行test</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class="home"&gt;</span><br><span class="line">    &lt;el-button&gt;{{msg}}&lt;/el-button&gt;</span><br><span class="line">    &lt;img alt="Vue logo" src="../assets/logo.png"&gt;</span><br><span class="line">    &lt;HelloWorld msg="Welcome to Your Vue.js App"/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// @ is an alias to /src</span><br><span class="line">import HelloWorld from '@/components/HelloWorld.vue'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'HomeView',</span><br><span class="line">  components: {</span><br><span class="line">    HelloWorld</span><br><span class="line">  },</span><br><span class="line">  data(){</span><br><span class="line">    return{</span><br><span class="line">      msg: "Hello Sliu"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213700.png" alt=""></p>
<h1 id="前端页面修改"><a href="#前端页面修改" class="headerlink" title="前端页面修改"></a>前端页面修改</h1><p>前端页面的编写快速带过，静态资源github自取</p>
<h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h2><p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>, { <span class="attr">size</span>: <span class="string">"small"</span> });</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">}).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure>
<p>Home.vu（第一节）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;el-button type="danger"&gt;{{ msg }}&lt;/el-button&gt;</span><br><span class="line">  </span><br><span class="line">  export default {</span><br><span class="line">  name: 'Home',</span><br><span class="line">  components: {</span><br><span class="line">    HelloWorld</span><br><span class="line">  },</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      msg: "hello 青哥哥"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h2><p>Home.vue（第二节）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-aside width="200px" style="background-color: rgb(238, 241, 246);"&gt;</span><br><span class="line">        &lt;el-menu :default-openeds="['1', '3']" style="min-height: 100%"&gt;</span><br><span class="line">          &lt;el-submenu index="1"&gt;</span><br><span class="line">            &lt;template slot="title"&gt;&lt;i class="el-icon-message"&gt;&lt;/i&gt;导航一&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;template slot="title"&gt;分组一&lt;/template&gt;</span><br><span class="line">              &lt;el-menu-item index="1-1"&gt;选项1&lt;/el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index="1-2"&gt;选项2&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">            &lt;el-menu-item-group title="分组2"&gt;</span><br><span class="line">              &lt;el-menu-item index="1-3"&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">            &lt;el-submenu index="1-4"&gt;</span><br><span class="line">              &lt;template slot="title"&gt;选项4&lt;/template&gt;</span><br><span class="line">              &lt;el-menu-item index="1-4-1"&gt;选项4-1&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-submenu&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">          &lt;el-submenu index="2"&gt;</span><br><span class="line">            &lt;template slot="title"&gt;&lt;i class="el-icon-menu"&gt;&lt;/i&gt;导航二&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;template slot="title"&gt;分组一&lt;/template&gt;</span><br><span class="line">              &lt;el-menu-item index="2-1"&gt;选项1&lt;/el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index="2-2"&gt;选项2&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">            &lt;el-menu-item-group title="分组2"&gt;</span><br><span class="line">              &lt;el-menu-item index="2-3"&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">            &lt;el-submenu index="2-4"&gt;</span><br><span class="line">              &lt;template slot="title"&gt;选项4&lt;/template&gt;</span><br><span class="line">              &lt;el-menu-item index="2-4-1"&gt;选项4-1&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-submenu&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">          &lt;el-submenu index="3"&gt;</span><br><span class="line">            &lt;template slot="title"&gt;&lt;i class="el-icon-setting"&gt;&lt;/i&gt;导航三&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item-group&gt;</span><br><span class="line">              &lt;template slot="title"&gt;分组一&lt;/template&gt;</span><br><span class="line">              &lt;el-menu-item index="3-1"&gt;选项1&lt;/el-menu-item&gt;</span><br><span class="line">              &lt;el-menu-item index="3-2"&gt;选项2&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">            &lt;el-menu-item-group title="分组2"&gt;</span><br><span class="line">              &lt;el-menu-item index="3-3"&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-menu-item-group&gt;</span><br><span class="line">            &lt;el-submenu index="3-4"&gt;</span><br><span class="line">              &lt;template slot="title"&gt;选项4&lt;/template&gt;</span><br><span class="line">              &lt;el-menu-item index="3-4-1"&gt;选项4-1&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;/el-submenu&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-menu&gt;</span><br><span class="line">      &lt;/el-aside&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-container&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-header style="text-align: right; font-size: 12px; border-bottom: 1px solid #ccc; line-height: 60px"&gt;</span><br><span class="line">          &lt;el-dropdown&gt;</span><br><span class="line">            &lt;i class="el-icon-setting" style="margin-right: 15px"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;el-dropdown-menu slot="dropdown"&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;查看&lt;/el-dropdown-item&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;新增&lt;/el-dropdown-item&gt;</span><br><span class="line">              &lt;el-dropdown-item&gt;删除&lt;/el-dropdown-item&gt;</span><br><span class="line">            &lt;/el-dropdown-menu&gt;</span><br><span class="line">          &lt;/el-dropdown&gt;</span><br><span class="line">          &lt;span&gt;王小虎&lt;/span&gt;</span><br><span class="line">        &lt;/el-header&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-main&gt;</span><br><span class="line">          &lt;el-table :data="tableData"&gt;</span><br><span class="line">            &lt;el-table-column prop="date" label="日期" width="140"&gt;</span><br><span class="line">            &lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column prop="name" label="姓名" width="120"&gt;</span><br><span class="line">            &lt;/el-table-column&gt;</span><br><span class="line">            &lt;el-table-column prop="address" label="地址"&gt;</span><br><span class="line">            &lt;/el-table-column&gt;</span><br><span class="line">          &lt;/el-table&gt;</span><br><span class="line">        &lt;/el-main&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/el-container&gt;</span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'Home',</span><br><span class="line">  data() {</span><br><span class="line">    const item = {</span><br><span class="line">      date: '2016-05-02',</span><br><span class="line">      name: '王小虎',</span><br><span class="line">      address: '上海市普陀区金沙江路 1518 弄'</span><br><span class="line">    };</span><br><span class="line">    return {</span><br><span class="line">      tableData: Array(20).fill(item),</span><br><span class="line">      msg: "hello 青哥哥"</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>App.vue（第二节）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app{</span><br><span class="line">  min-height: 100vh;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>gloable.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">div</span>{</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>在main.js 引入：<code>import './assets/gloable.css'</code></p>
<h2 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h2><p>gloable.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*{</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-container style="min-height: 100vh"&gt;</span><br><span class="line">    &lt;el-aside :width="sideWidth + 'px'" style="background-color: rgb(238, 241, 246); box-shadow: 2px 0 6px rgb(0 21 41 / 35%);"&gt;</span><br><span class="line">      &lt;el-menu :default-openeds="['1', '3']" style="min-height: 100%; overflow-x: hidden"</span><br><span class="line">               background-color="rgb(48, 65, 86)"</span><br><span class="line">               text-color="#fff"</span><br><span class="line">               active-text-color="#ffd04b"</span><br><span class="line">               :collapse-transition="false"</span><br><span class="line">               :collapse="isCollapse"</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;div style="height: 60px; line-height: 60px; text-align: center"&gt;</span><br><span class="line">          &lt;img src="../assets/logo.png" alt="" style="width: 20px; position: relative; top: 5px; margin-right: 5px"&gt;</span><br><span class="line">          &lt;b style="color: white" v-show="logoTextShow"&gt;后台管理系统&lt;/b&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;el-submenu index="1"&gt;</span><br><span class="line">          &lt;template slot="title"&gt;</span><br><span class="line">            &lt;i class="el-icon-message"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot="title"&gt;导航一&lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;el-menu-item-group&gt;</span><br><span class="line">            &lt;template slot="title"&gt;分组一&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item index="1-1"&gt;选项1&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index="1-2"&gt;选项2&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;el-menu-item-group title="分组2"&gt;</span><br><span class="line">            &lt;el-menu-item index="1-3"&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;el-submenu index="1-4"&gt;</span><br><span class="line">            &lt;template slot="title"&gt;选项4&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item index="1-4-1"&gt;选项4-1&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-submenu&gt;</span><br><span class="line">        &lt;el-submenu index="2"&gt;</span><br><span class="line">          &lt;template slot="title"&gt;</span><br><span class="line">            &lt;i class="el-icon-menu"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot="title"&gt;导航二&lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;el-menu-item-group&gt;</span><br><span class="line">            &lt;template slot="title"&gt;分组一&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item index="2-1"&gt;选项1&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index="2-2"&gt;选项2&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;el-menu-item-group title="分组2"&gt;</span><br><span class="line">            &lt;el-menu-item index="2-3"&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;el-submenu index="2-4"&gt;</span><br><span class="line">            &lt;template slot="title"&gt;选项4&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item index="2-4-1"&gt;选项4-1&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-submenu&gt;</span><br><span class="line">        &lt;el-submenu index="3"&gt;</span><br><span class="line">          &lt;template slot="title"&gt;</span><br><span class="line">            &lt;i class="el-icon-setting"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot="title"&gt;导航三&lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;el-menu-item-group&gt;</span><br><span class="line">            &lt;template slot="title"&gt;分组一&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item index="3-1"&gt;选项1&lt;/el-menu-item&gt;</span><br><span class="line">            &lt;el-menu-item index="3-2"&gt;选项2&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;el-menu-item-group title="分组2"&gt;</span><br><span class="line">            &lt;el-menu-item index="3-3"&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;el-submenu index="3-4"&gt;</span><br><span class="line">            &lt;template slot="title"&gt;选项4&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item index="3-4-1"&gt;选项4-1&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-submenu&gt;</span><br><span class="line">      &lt;/el-menu&gt;</span><br><span class="line">    &lt;/el-aside&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-header style="font-size: 12px; border-bottom: 1px solid #ccc; line-height: 60px; display: flex"&gt;</span><br><span class="line">        &lt;div style="flex: 1; font-size: 20px"&gt;</span><br><span class="line">          &lt;span :class="collapseBtnClass" style="cursor: pointer" @click="collapse"&gt;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;el-dropdown style="width: 70px; cursor: pointer"&gt;</span><br><span class="line">          &lt;span&gt;王小虎&lt;/span&gt;&lt;i class="el-icon-arrow-down" style="margin-left: 5px"&gt;&lt;/i&gt;</span><br><span class="line">          &lt;el-dropdown-menu slot="dropdown"&gt;</span><br><span class="line">            &lt;el-dropdown-item&gt;个人信息&lt;/el-dropdown-item&gt;</span><br><span class="line">            &lt;el-dropdown-item&gt;退出&lt;/el-dropdown-item&gt;</span><br><span class="line">          &lt;/el-dropdown-menu&gt;</span><br><span class="line">        &lt;/el-dropdown&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/el-header&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-main&gt;</span><br><span class="line">        &lt;el-table :data="tableData"&gt;</span><br><span class="line">          &lt;el-table-column prop="date" label="日期" width="140"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column prop="name" label="姓名" width="120"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column prop="address" label="地址"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">        &lt;/el-table&gt;</span><br><span class="line">      &lt;/el-main&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">  &lt;/el-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'Home',</span><br><span class="line">  data() {</span><br><span class="line">    const item = {</span><br><span class="line">      date: '2016-05-02',</span><br><span class="line">      name: '王小虎',</span><br><span class="line">      address: '上海市普陀区金沙江路 1518 弄'</span><br><span class="line">    };</span><br><span class="line">    return {</span><br><span class="line">      tableData: Array(10).fill(item),</span><br><span class="line">      msg: "hello 青哥哥",</span><br><span class="line">      collapseBtnClass: 'el-icon-s-fold',</span><br><span class="line">      isCollapse: false,</span><br><span class="line">      sideWidth: 200,</span><br><span class="line">      logoTextShow: true</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    collapse() {  // 点击收缩按钮触发</span><br><span class="line">      this.isCollapse = !this.isCollapse</span><br><span class="line">      if (this.isCollapse) {  // 收缩</span><br><span class="line">        this.sideWidth = 64</span><br><span class="line">        this.collapseBtnClass = 'el-icon-s-unfold'</span><br><span class="line">        this.logoTextShow = false</span><br><span class="line">      } else {   // 展开</span><br><span class="line">        this.sideWidth = 200</span><br><span class="line">        this.collapseBtnClass = 'el-icon-s-fold'</span><br><span class="line">        this.logoTextShow = true</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h2><p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./assets/gloable.css'</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>, { <span class="attr">size</span>: <span class="string">"mini"</span> });</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>({</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">}).$mount(<span class="string">'#app'</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>gloable.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*{</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ml-5</span> {</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.mr-5</span> {</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.pd-10</span> {</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-container style="min-height: 100vh"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-aside :width="sideWidth + 'px'" style="box-shadow: 2px 0 6px rgb(0 21 41 / 35%);"&gt;</span><br><span class="line">      &lt;el-menu :default-openeds="['1', '3']" style="min-height: 100%; overflow-x: hidden"</span><br><span class="line">               background-color="rgb(48, 65, 86)"</span><br><span class="line">               text-color="#fff"</span><br><span class="line">               active-text-color="#ffd04b"</span><br><span class="line">               :collapse-transition="false"</span><br><span class="line">               :collapse="isCollapse"</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;div style="height: 60px; line-height: 60px; text-align: center"&gt;</span><br><span class="line">          &lt;img src="../assets/logo.png" alt="" style="width: 20px; position: relative; top: 5px; right: 5px"&gt;</span><br><span class="line">          &lt;b style="color: white" v-show="logoTextShow"&gt;后台管理系统&lt;/b&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;el-submenu index="1"&gt;</span><br><span class="line">          &lt;template slot="title"&gt;</span><br><span class="line">            &lt;i class="el-icon-message"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot="title"&gt;导航一&lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;el-menu-item-group title="分组2"&gt;</span><br><span class="line">            &lt;el-menu-item index="1-3"&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;el-submenu index="1-4"&gt;</span><br><span class="line">            &lt;template slot="title"&gt;选项4&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item index="1-4-1"&gt;选项4-1&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-submenu&gt;</span><br><span class="line">        &lt;el-submenu index="2"&gt;</span><br><span class="line">          &lt;template slot="title"&gt;</span><br><span class="line">            &lt;i class="el-icon-menu"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot="title"&gt;导航二&lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;el-submenu index="2-4"&gt;</span><br><span class="line">            &lt;template slot="title"&gt;选项4&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item index="2-4-1"&gt;选项4-1&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-submenu&gt;</span><br><span class="line">        &lt;el-submenu index="3"&gt;</span><br><span class="line">          &lt;template slot="title"&gt;</span><br><span class="line">            &lt;i class="el-icon-setting"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot="title"&gt;导航三&lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;el-submenu index="3-4"&gt;</span><br><span class="line">            &lt;template slot="title"&gt;选项4&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item index="3-4-1"&gt;选项4-1&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-submenu&gt;</span><br><span class="line">      &lt;/el-menu&gt;</span><br><span class="line">    &lt;/el-aside&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-header style="font-size: 12px; border-bottom: 1px solid #ccc; line-height: 60px; display: flex"&gt;</span><br><span class="line">        &lt;div style="flex: 1; font-size: 20px"&gt;</span><br><span class="line">          &lt;span :class="collapseBtnClass" style="cursor: pointer" @click="collapse"&gt;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;el-dropdown style="width: 70px; cursor: pointer"&gt;</span><br><span class="line">          &lt;span&gt;王小虎&lt;/span&gt;&lt;i class="el-icon-arrow-down" style="margin-left: 5px"&gt;&lt;/i&gt;</span><br><span class="line">          &lt;el-dropdown-menu slot="dropdown" &gt;</span><br><span class="line">            &lt;el-dropdown-item style="font-size: 14px; padding: 5px 0"&gt;个人信息&lt;/el-dropdown-item&gt;</span><br><span class="line">            &lt;el-dropdown-item style="font-size: 14px; padding: 5px 0"&gt;退出&lt;/el-dropdown-item&gt;</span><br><span class="line">          &lt;/el-dropdown-menu&gt;</span><br><span class="line">        &lt;/el-dropdown&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/el-header&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-main&gt;</span><br><span class="line">        &lt;div style="margin-bottom: 30px"&gt;</span><br><span class="line">          &lt;el-breadcrumb separator="/"&gt;</span><br><span class="line">            &lt;el-breadcrumb-item :to="{ path: '/' }"&gt;首页&lt;/el-breadcrumb-item&gt;</span><br><span class="line">            &lt;el-breadcrumb-item&gt;用户管理&lt;/el-breadcrumb-item&gt;</span><br><span class="line">          &lt;/el-breadcrumb&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div style="margin: 10px 0"&gt;</span><br><span class="line">          &lt;el-input style="width: 200px" placeholder="请输入名称" suffix-icon="el-icon-search"&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;el-input style="width: 200px" placeholder="请输入邮箱" suffix-icon="el-icon-message" class="ml-5"&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;el-input style="width: 200px" placeholder="请输入地址" suffix-icon="el-icon-position" class="ml-5"&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;el-button class="ml-5" type="primary"&gt;搜索&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div style="margin: 10px 0"&gt;</span><br><span class="line">          &lt;el-button type="primary"&gt;新增 &lt;i class="el-icon-circle-plus-outline"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button type="danger"&gt;批量删除 &lt;i class="el-icon-remove-outline"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button type="primary"&gt;导入 &lt;i class="el-icon-bottom"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button type="primary"&gt;导出 &lt;i class="el-icon-top"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-table :data="tableData" border stripe :header-cell-class-name="headerBg"&gt;</span><br><span class="line">          &lt;el-table-column prop="date" label="日期" width="140"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column prop="name" label="姓名" width="120"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column prop="address" label="地址"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column label="操作"  width="200" align="center"&gt;</span><br><span class="line">            &lt;template slot-scope="scope"&gt;</span><br><span class="line">              &lt;el-button type="success"&gt;编辑 &lt;i class="el-icon-edit"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button type="danger"&gt;删除 &lt;i class="el-icon-remove-outline"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">        &lt;/el-table&gt;</span><br><span class="line">        &lt;div style="padding: 10px 0"&gt;</span><br><span class="line">          &lt;el-pagination</span><br><span class="line"></span><br><span class="line">              :page-sizes="[5, 10, 15, 20]"</span><br><span class="line">              :page-size="10"</span><br><span class="line">              layout="total, sizes, prev, pager, next, jumper"</span><br><span class="line">              :total="400"&gt;</span><br><span class="line">          &lt;/el-pagination&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-main&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">  &lt;/el-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'Home',</span><br><span class="line">  data() {</span><br><span class="line">    const item = {</span><br><span class="line">      date: '2016-05-02',</span><br><span class="line">      name: '王小虎',</span><br><span class="line">      address: '上海市普陀区金沙江路 1518 弄'</span><br><span class="line">    };</span><br><span class="line">    return {</span><br><span class="line">      tableData: Array(10).fill(item),</span><br><span class="line">      msg: "hello 青哥哥",</span><br><span class="line">      collapseBtnClass: 'el-icon-s-fold',</span><br><span class="line">      isCollapse: false,</span><br><span class="line">      sideWidth: 200,</span><br><span class="line">      logoTextShow: true,</span><br><span class="line">      headerBg: 'headerBg'</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    collapse() {  // 点击收缩按钮触发</span><br><span class="line">      this.isCollapse = !this.isCollapse</span><br><span class="line">      if (this.isCollapse) {  // 收缩</span><br><span class="line">        this.sideWidth = 64</span><br><span class="line">        this.collapseBtnClass = 'el-icon-s-unfold'</span><br><span class="line">        this.logoTextShow = false</span><br><span class="line">      } else {   // 展开</span><br><span class="line">        this.sideWidth = 200</span><br><span class="line">        this.collapseBtnClass = 'el-icon-s-fold'</span><br><span class="line">        this.logoTextShow = true</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.headerBg {</span><br><span class="line">  background: #eee!important;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213544.png" alt=""></p>
<h1 id="SpringBoot框架搭建"><a href="#SpringBoot框架搭建" class="headerlink" title="SpringBoot框架搭建"></a>SpringBoot框架搭建</h1><p>新建spring项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213518.png" alt=""></p>
<p>导入插件</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213440.png" alt=""></p>
<p>application.properties下配置数据源</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2b8</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>
<p>打开Navicat新建数据库sliu（数据库名随意，无须保持一致）</p>
<p>修改application.properties数据源</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/sliu?serverTimezone=GMT%2b8</span></span><br></pre></td></tr></table></figure>
<p>由于前端页面下，构建vue项目时所使用端口号也是8080,在application.properties下修改spring项目端口号为9090，以避免冲突</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">9090</span></span><br></pre></td></tr></table></figure>
<p>添加vue的启动方式</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213419.png" alt=""></p>
<p>配置完成后前后端项目能够实现同时启动    </p>
<h1 id="SpringBoot集成Mybatis"><a href="#SpringBoot集成Mybatis" class="headerlink" title="SpringBoot集成Mybatis"></a>SpringBoot集成Mybatis</h1><p>application.properties中存在大量重复项，新建application.yaml替换它</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/sliu?serverTimezone=GMT%2b8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>
<p>新建user表用于测试数据库连接</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220610194511.png" alt=""></p>
<p>表字段如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213214.png" alt=""></p>
<p>其中create_time默认值设置为CURRENT_TIMESTAMP</p>
<p>新增列</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213157.png" alt=""></p>
<p>新建一个<strong>entity</strong>目录，该目录下用于<strong>封装实体类</strong>，新建User类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.crypto.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.entity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@lombok</span>.Data</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Data createTime;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>新建<strong>mapper</strong>目录，该目录下保存<strong>数据库访问接口</strong>，新建UserMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line">    <span class="comment">//查询User表中所有数据</span></span><br><span class="line">    <span class="meta">@Select("SELECT * from user")</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>其中@Mapper接口用于将接口注入到容器中，用于完成后续自动注入</p>
<p>新建<strong>controller</strong>文件夹，该文件夹用于<strong>处理前台发送的请求</strong>。新建UserController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/")</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">printAllUser</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAllUser();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213138.png" alt=""></p>
<p>修改SpringbootApplication用于测试数据库查询是否成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootApplication</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(SpringbootApplication.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/")</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">toIndex</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAllUser();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>修改SpringbootApplication</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringbootApplication</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> {</span><br><span class="line">        SpringApplication.run(SpringbootApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>rebuild项目，访问<a href="http://localhost:9090">http://localhost:9090</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213122.png" alt=""></p>
<h1 id="SpringBoot增删改查"><a href="#SpringBoot增删改查" class="headerlink" title="SpringBoot增删改查"></a>SpringBoot增删改查</h1><p>通常，<strong>查询</strong>数据库使用<strong>get</strong>请求，而对于数据库的修改，例如<strong>增删改</strong>使用<strong>post</strong>请求</p>
<p>修改UserController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>{</span><br><span class="line">        <span class="keyword">return</span> userMapper.insertUser(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">printAllUser</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAllUser();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>修改UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line">    <span class="comment">//查询User表中所有数据</span></span><br><span class="line">    <span class="meta">@Select("SELECT * from user")</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert("Insert into user(username, password, nickname, email, phone, address) " +</span></span><br><span class="line"><span class="meta">            "VALUES(#{username}, #{password}, #{nickname}, #{email}, #{phone}, #{address})")</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>rebuild项目</p>
<p>打开<a href="https://www.postman.com/">postman</a>，发送post请求用于测试</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213106.png" alt=""></p>
<p>继续改进UserController，当前save()方法下仅能够实现插入一条新数据，实际应用场景下，应当先判断该条id的数据在数据库中是否以及存在。不存在时插入，存在时应当执行的是更新操作。</p>
<p>新建<strong>service</strong>文件夹,存放<strong>业务逻辑操作</strong>，并将操作完成的数据返回给view层，展现给用户。新建UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 16:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> {</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">save</span><span class="params">(User user)</span>{</span><br><span class="line">        <span class="comment">//传入user无id，表示为新增</span></span><br><span class="line">        <span class="keyword">if</span>(user.getId() == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span> userMapper.insertUser(user);</span><br><span class="line">        }<span class="keyword">else</span> {<span class="comment">//否则更新</span></span><br><span class="line">            <span class="keyword">return</span> userMapper.updateUser(user);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>修改UserMapper，新增update方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line">    <span class="comment">//查询User表中所有数据</span></span><br><span class="line">    <span class="meta">@Select("SELECT * from user")</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert("Insert into user(username, password, nickname, email, phone, address) " +</span></span><br><span class="line"><span class="meta">            "VALUES(#{username}, #{password}, #{nickname}, #{email}, #{phone}, #{address})")</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update("update user set username=#{username}, password=#{password}, nickname=#{nickname}, email=#{email}, " +</span></span><br><span class="line"><span class="meta">            "phone=#{phone}, address=#{address} where id=#{id}")</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>修改UserController中save方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>{</span><br><span class="line">        <span class="keyword">return</span> userService.save(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">printAllUser</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAllUser();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>rebuild项目并利用postman发送请求，测试</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213045.png" alt=""></p>
<p>这样存在的问题是，在执行更新操作时，update SQL语句下更新的是全部字段，当仅仅想要修改数据库的一个字段时，需要传入所有的实体类字段，否则会将其它字段全部置为Null（例如欲修改用户jjwang的邮箱时，post请求仅仅传入一个email字段，那么其它字段会全部置为Null）</p>
<p><strong>动态SQL</strong>就用于解决该类问题</p>
<p>安装MyBatisX插件</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213027.png" alt=""></p>
<p>在resources文件夹下新建mapper/User.xml用于封装动态数据库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.sliu.springboot.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span>&gt;</span></span><br><span class="line">        update user</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span><br><span class="line">                username=#{username},</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"password != null"</span>&gt;</span></span><br><span class="line">                password=#{password},</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"nickname != null"</span>&gt;</span></span><br><span class="line">                nickname=#{nickname},</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null"</span>&gt;</span></span><br><span class="line">                email=#{email},</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null"</span>&gt;</span></span><br><span class="line">                phone=#{phone},</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"address != null"</span>&gt;</span></span><br><span class="line">                address=#{address}</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            id=#{id}</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line">    <span class="comment">//查询User表中所有数据</span></span><br><span class="line">    <span class="meta">@Select("SELECT * from user")</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert("Insert into user(username, password, nickname, email, phone, address) " +</span></span><br><span class="line"><span class="meta">            "VALUES(#{username}, #{password}, #{nickname}, #{email}, #{phone}, #{address})")</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>application.yml文件下引入该mapper，同时配置打印日志</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/sliu?serverTimezone=GMT%2b8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>
<p>rebuild项目，postman下进行test</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529213001.png" alt=""></p>
<p>CRUD还有删除没有实现</p>
<p>修改UserController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//新增和修改User</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>{</span><br><span class="line">        <span class="keyword">return</span> userService.save(user);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询全部User</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">printAllUser</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAllUser();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//依据id删除User</span></span><br><span class="line">    <span class="meta">@DeleteMapping("/{id}")</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>{</span><br><span class="line">        <span class="keyword">return</span> userMapper.deleteUserById(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>修改UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line">    <span class="comment">//查询User表中所有数据</span></span><br><span class="line">    <span class="meta">@Select("SELECT * from user")</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert("Insert into user(username, password, nickname, email, phone, address) " +</span></span><br><span class="line"><span class="meta">            "VALUES(#{username}, #{password}, #{nickname}, #{email}, #{phone}, #{address})")</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete("delete from user where id=#{id}")</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@Param("id")</span> Integer id)</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>rebuild项目，postman下进行test</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220529212939.png" alt=""></p>
<h1 id="SpringBoot实现分页查询"><a href="#SpringBoot实现分页查询" class="headerlink" title="SpringBoot实现分页查询"></a>SpringBoot实现分页查询</h1><p>分页查询的实质就是利用SQL语句中Limit关键字完成对数据的分割查询，以一个简单的例子入手</p>
<p>修改UserController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增和修改User</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>{</span><br><span class="line">        <span class="keyword">return</span> userService.save(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部User</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">printAllUser</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAllUser();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//依据id删除User</span></span><br><span class="line">    <span class="meta">@DeleteMapping("/{id}")</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>{</span><br><span class="line">        <span class="keyword">return</span> userMapper.deleteUserById(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询打印所有user信息，pageNum为页码数，pageSize为每页展示数据</span></span><br><span class="line">    <span class="meta">@GetMapping("/page")</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">printUserByPage</span><span class="params">(<span class="meta">@RequestParam</span> Integer pageNum, <span class="meta">@RequestParam</span> Integer pageSize)</span>{</span><br><span class="line">        pageNum = (pageNum - <span class="number">1</span>) * pageSize;</span><br><span class="line">        <span class="keyword">return</span> userMapper.printUserByPage(pageNum, pageSize);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>修改UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line">    <span class="comment">//查询User表中所有数据</span></span><br><span class="line">    <span class="meta">@Select("SELECT * from user")</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert("Insert into user(username, password, nickname, email, phone, address) " +</span></span><br><span class="line"><span class="meta">            "VALUES(#{username}, #{password}, #{nickname}, #{email}, #{phone}, #{address})")</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete("delete from user where id=#{id}")</span></span><br><span class="line">    Integer <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@Param("id")</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select("SELECT * from user limit #{pageNum}, #{pageSize}")</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">printUserByPage</span><span class="params">(Integer pageNum, Integer pageSize)</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>rebuild项目，postman下进行test</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220531210451.png" alt=""></p>
<p>除了依据PageNum和PageSize返回所对应页码的数据，还应当获取当前表格下全部数据条数，以便于通过计算得到总页数。以Map结构同时保存数据data，和总数据条数totalNum</p>
<p>修改UserController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增和修改User</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>{</span><br><span class="line">        <span class="keyword">return</span> userService.save(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部User</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">printAllUser</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAllUser();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//依据id删除User</span></span><br><span class="line">    <span class="meta">@DeleteMapping("/{id}")</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>{</span><br><span class="line">        <span class="keyword">return</span> userMapper.deleteUserById(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询打印所有user信息，pageNum为页码数，pageSize为每页展示数据</span></span><br><span class="line">    <span class="meta">@GetMapping("/page")</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">printUserByPage</span><span class="params">(<span class="meta">@RequestParam</span> Integer pageNum, <span class="meta">@RequestParam</span> Integer pageSize)</span>{</span><br><span class="line">        pageNum = (pageNum - <span class="number">1</span>) * pageSize;</span><br><span class="line">        List&lt;User&gt; data = userMapper.printUserByPage(pageNum, pageSize);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">totalUserNum</span> <span class="operator">=</span> userMapper.selectTotal();</span><br><span class="line">        Map&lt;String, Object&gt; res = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"data"</span>, userMapper.printUserByPage(pageNum, pageSize));</span><br><span class="line">        res.put(<span class="string">"total"</span>, totalUserNum);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>修改userMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询User表中所有数据</span></span><br><span class="line">    <span class="meta">@Select("SELECT * from user")</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入一条数据</span></span><br><span class="line">    <span class="meta">@Insert("Insert into user(username, password, nickname, email, phone, address) " +</span></span><br><span class="line"><span class="meta">            "VALUES(#{username}, #{password}, #{nickname}, #{email}, #{phone}, #{address})")</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新数据</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除数据</span></span><br><span class="line">    <span class="meta">@Delete("delete from user where id=#{id}")</span></span><br><span class="line">    Integer <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@Param("id")</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="meta">@Select("SELECT * from user limit #{pageNum}, #{pageSize}")</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">printUserByPage</span><span class="params">(Integer pageNum, Integer pageSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据库中总数据条数</span></span><br><span class="line">    <span class="meta">@Select("SELECT count(*) from user")</span></span><br><span class="line">    Integer <span class="title function_">selectTotal</span><span class="params">()</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>rebuild项目，postman下test，此时返回数据中包含有数据库总条数的信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220531210556.png" alt=""></p>
<p>前端页面项目部署在8080端口，而后台服务则在9090端口，当前端页面要获取后台数据用于展示时，会出现跨域问题</p>
<p>SpringBoot项目下新建<strong>config</strong>文件夹，新建CorsConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:CorsConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/31 15:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前跨域请求最大有效时长，默认一天</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MAX_AGE</span> <span class="operator">=</span> <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span>{</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">"http://localhost:8080"</span>); <span class="comment">//1 设置访问源地址</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">"*"</span>); <span class="comment">//2 设置访问源请求头</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"*"</span>); <span class="comment">//3 设置访问源请求方法</span></span><br><span class="line">        corsConfiguration.setMaxAge(MAX_AGE);</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, corsConfiguration); <span class="comment">//4 对接口配置跨域设置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>User下对password属性添加注解，防止密码外泄</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@lombok</span>.Data</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Data createTime;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>将数据渲染到前端页面Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-container style="min-height: 100vh"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-aside :width="sideWidth + 'px'" style="box-shadow: 2px 0 6px rgb(0 21 41 / 35%);"&gt;</span><br><span class="line">      &lt;el-menu :default-openeds="['1', '3']" style="min-height: 100%; overflow-x: hidden"</span><br><span class="line">               background-color="rgb(48, 65, 86)"</span><br><span class="line">               text-color="#fff"</span><br><span class="line">               active-text-color="#ffd04b"</span><br><span class="line">               :collapse-transition="false"</span><br><span class="line">               :collapse="isCollapse"</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;div style="height: 60px; line-height: 60px; text-align: center"&gt;</span><br><span class="line">          &lt;img src="../assets/logo.png" alt="" style="width: 20px; position: relative; top: 5px; right: 5px"&gt;</span><br><span class="line">          &lt;b style="color: white" v-show="logoTextShow"&gt;后台管理系统&lt;/b&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;el-submenu index="1"&gt;</span><br><span class="line">          &lt;template slot="title"&gt;</span><br><span class="line">            &lt;i class="el-icon-message"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot="title"&gt;导航一&lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;el-menu-item-group title="分组2"&gt;</span><br><span class="line">            &lt;el-menu-item index="1-3"&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;el-submenu index="1-4"&gt;</span><br><span class="line">            &lt;template slot="title"&gt;选项4&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item index="1-4-1"&gt;选项4-1&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-submenu&gt;</span><br><span class="line">        &lt;el-submenu index="2"&gt;</span><br><span class="line">          &lt;template slot="title"&gt;</span><br><span class="line">            &lt;i class="el-icon-menu"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot="title"&gt;导航二&lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;el-submenu index="2-4"&gt;</span><br><span class="line">            &lt;template slot="title"&gt;选项4&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item index="2-4-1"&gt;选项4-1&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-submenu&gt;</span><br><span class="line">        &lt;el-submenu index="3"&gt;</span><br><span class="line">          &lt;template slot="title"&gt;</span><br><span class="line">            &lt;i class="el-icon-setting"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot="title"&gt;导航三&lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;el-submenu index="3-4"&gt;</span><br><span class="line">            &lt;template slot="title"&gt;选项4&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item index="3-4-1"&gt;选项4-1&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-submenu&gt;</span><br><span class="line">      &lt;/el-menu&gt;</span><br><span class="line">    &lt;/el-aside&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-header style="font-size: 12px; border-bottom: 1px solid #ccc; line-height: 60px; display: flex"&gt;</span><br><span class="line">        &lt;div style="flex: 1; font-size: 20px"&gt;</span><br><span class="line">          &lt;span :class="collapseBtnClass" style="cursor: pointer" @click="collapse"&gt;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;el-dropdown style="width: 70px; cursor: pointer"&gt;</span><br><span class="line">          &lt;span&gt;王小虎&lt;/span&gt;&lt;i class="el-icon-arrow-down" style="margin-left: 5px"&gt;&lt;/i&gt;</span><br><span class="line">          &lt;el-dropdown-menu slot="dropdown"&gt;</span><br><span class="line">            &lt;el-dropdown-item style="font-size: 14px; padding: 5px 0"&gt;个人信息&lt;/el-dropdown-item&gt;</span><br><span class="line">            &lt;el-dropdown-item style="font-size: 14px; padding: 5px 0"&gt;退出&lt;/el-dropdown-item&gt;</span><br><span class="line">          &lt;/el-dropdown-menu&gt;</span><br><span class="line">        &lt;/el-dropdown&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/el-header&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-main&gt;</span><br><span class="line">        &lt;div style="margin-bottom: 30px"&gt;</span><br><span class="line">          &lt;el-breadcrumb separator="/"&gt;</span><br><span class="line">            &lt;el-breadcrumb-item :to="{ path: '/' }"&gt;首页&lt;/el-breadcrumb-item&gt;</span><br><span class="line">            &lt;el-breadcrumb-item&gt;用户管理&lt;/el-breadcrumb-item&gt;</span><br><span class="line">          &lt;/el-breadcrumb&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div style="margin: 10px 0"&gt;</span><br><span class="line">          &lt;el-input style="width: 200px" placeholder="请输入名称" suffix-icon="el-icon-search"&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;el-input style="width: 200px" placeholder="请输入邮箱" suffix-icon="el-icon-message" class="ml-5"&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;el-input style="width: 200px" placeholder="请输入地址" suffix-icon="el-icon-position" class="ml-5"&gt;&lt;/el-input&gt;</span><br><span class="line">          &lt;el-button class="ml-5" type="primary"&gt;搜索&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div style="margin: 10px 0"&gt;</span><br><span class="line">          &lt;el-button type="primary"&gt;新增 &lt;i class="el-icon-circle-plus-outline"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button type="danger"&gt;批量删除 &lt;i class="el-icon-remove-outline"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button type="primary"&gt;导入 &lt;i class="el-icon-bottom"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button type="primary"&gt;导出 &lt;i class="el-icon-top"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-table :data="tableData" border stripe :header-cell-class-name="headerBg"&gt;</span><br><span class="line">          &lt;el-table-column prop="id" label="ID" width="80"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column prop="username" label="用户名" width="140"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column prop="nickname" label="昵称" width="120"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column prop="email" label="邮箱"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column prop="phone" label="电话"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column prop="address" label="地址"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column label="操作" width="200" align="center"&gt;</span><br><span class="line">            &lt;template slot-scope="scope"&gt;</span><br><span class="line">              &lt;el-button type="success"&gt;编辑 &lt;i class="el-icon-edit"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button type="danger"&gt;删除 &lt;i class="el-icon-remove-outline"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">        &lt;/el-table&gt;</span><br><span class="line">        &lt;div style="padding: 10px 0"&gt;</span><br><span class="line">          &lt;el-pagination</span><br><span class="line">              @size-change="handleSizeChange"</span><br><span class="line">              @current-change="handleCurrentChange"</span><br><span class="line">              :current-page="pageNum"</span><br><span class="line">              :page-sizes="[2, 5, 10, 20]"</span><br><span class="line">              :page-size="pageSize"</span><br><span class="line">              layout="total, sizes, prev, pager, next, jumper"</span><br><span class="line">              :total="total"&gt;</span><br><span class="line">          &lt;/el-pagination&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-main&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">  &lt;/el-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// @ is an alias to /src</span><br><span class="line">import HelloWorld from '@/components/HelloWorld.vue'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'Home',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      tableData: [],</span><br><span class="line">      total: 0,</span><br><span class="line">      pageNum: 1,</span><br><span class="line">      pageSize: 2,</span><br><span class="line">      msg: "hello sliu",</span><br><span class="line">      collapseBtnClass: 'el-icon-s-fold',</span><br><span class="line">      isCollapse: false,</span><br><span class="line">      sideWidth: 200,</span><br><span class="line">      logoTextShow: true,</span><br><span class="line">      headerBg: 'headerBg'</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  created() {</span><br><span class="line">    //请求分页查询数据</span><br><span class="line">    fetch( "http://localhost:9090/user/page?pageNum="+this.pageNum+"&amp;pageSize="+this.pageSize)</span><br><span class="line">        .then(res =&gt; res.json()).then(res =&gt; {</span><br><span class="line">      console.log(res)</span><br><span class="line">      this.tableData=res.data</span><br><span class="line">      this.total=res.total</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    collapse() {  // 点击收缩按钮触发</span><br><span class="line">      this.isCollapse = !this.isCollapse</span><br><span class="line">      if (this.isCollapse) {  // 收缩</span><br><span class="line">        this.sideWidth = 64</span><br><span class="line">        this.collapseBtnClass = 'el-icon-s-unfold'</span><br><span class="line">        this.logoTextShow = false</span><br><span class="line">      } else {   // 展开</span><br><span class="line">        this.sideWidth = 200</span><br><span class="line">        this.collapseBtnClass = 'el-icon-s-fold'</span><br><span class="line">        this.logoTextShow = true</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    load(){</span><br><span class="line">      fetch( "http://localhost:9090/user/page?pageNum="+this.pageNum+"&amp;pageSize="+this.pageSize)</span><br><span class="line">          .then(res =&gt; res.json()).then(res =&gt; {</span><br><span class="line">        console.log(res)</span><br><span class="line">        this.tableData=res.data</span><br><span class="line">        this.total=res.total</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    handleSizeChange(pageSize){</span><br><span class="line">      console.log(pageSize)</span><br><span class="line">      this.pageSize = pageSize</span><br><span class="line">      this.load()</span><br><span class="line">    },</span><br><span class="line">    handleCurrentChange(pageNum){</span><br><span class="line">      console.log(pageNum)</span><br><span class="line">      this.pageNum = pageNum</span><br><span class="line">      this.load()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.headerBg {</span><br><span class="line">  background: #eee !important;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>rebuild前后端项目，访问localhost:8080，搞定√</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220531210623.png" alt=""></p>
<p>基于以上查询实现以username的模糊查询</p>
<p>修改UserController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增和修改User</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>{</span><br><span class="line">        <span class="keyword">return</span> userService.save(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部User</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">printAllUser</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAllUser();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//依据id删除User</span></span><br><span class="line">    <span class="meta">@DeleteMapping("/{id}")</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>{</span><br><span class="line">        <span class="keyword">return</span> userMapper.deleteUserById(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询打印所有user信息，pageNum为页码数，pageSize为每页展示数据</span></span><br><span class="line">    <span class="meta">@GetMapping("/page")</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">printUserByPage</span><span class="params">(<span class="meta">@RequestParam</span> Integer pageNum, <span class="meta">@RequestParam</span> Integer pageSize,</span></span><br><span class="line"><span class="params">                                               <span class="meta">@RequestParam</span> String username)</span>{</span><br><span class="line">        pageNum = (pageNum - <span class="number">1</span>) * pageSize;</span><br><span class="line">        List&lt;User&gt; data = userMapper.printUserByPage(pageNum, pageSize, username);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">totalUserNum</span> <span class="operator">=</span> userMapper.selectTotal(username);</span><br><span class="line">        Map&lt;String, Object&gt; res = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        res.put(<span class="string">"data"</span>, data);</span><br><span class="line">        res.put(<span class="string">"total"</span>, totalUserNum);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>修改UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询User表中所有数据</span></span><br><span class="line">    <span class="meta">@Select("SELECT * from user")</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入一条数据</span></span><br><span class="line">    <span class="meta">@Insert("Insert into user(username, password, nickname, email, phone, address) " +</span></span><br><span class="line"><span class="meta">            "VALUES(#{username}, #{password}, #{nickname}, #{email}, #{phone}, #{address})")</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新数据</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除数据</span></span><br><span class="line">    <span class="meta">@Delete("delete from user where id=#{id}")</span></span><br><span class="line">    Integer <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@Param("id")</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="meta">@Select("SELECT * from user where username like concat('%', #{username}, '%') limit #{pageNum}, #{pageSize}")</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">printUserByPage</span><span class="params">(Integer pageNum, Integer pageSize, String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据库中总数据条数</span></span><br><span class="line">    <span class="meta">@Select("SELECT count(*) from user where username like concat('%', #{username}, '%')")</span></span><br><span class="line">    Integer <span class="title function_">selectTotal</span><span class="params">(String username)</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>rebuild项目，postman下进行test</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220531210641.png" alt=""></p>
<p>渲染到前端页面Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-container style="min-height: 100vh"&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-aside :width="sideWidth + 'px'" style="box-shadow: 2px 0 6px rgb(0 21 41 / 35%);"&gt;</span><br><span class="line">      &lt;el-menu :default-openeds="['1', '3']" style="min-height: 100%; overflow-x: hidden"</span><br><span class="line">               background-color="rgb(48, 65, 86)"</span><br><span class="line">               text-color="#fff"</span><br><span class="line">               active-text-color="#ffd04b"</span><br><span class="line">               :collapse-transition="false"</span><br><span class="line">               :collapse="isCollapse"</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;div style="height: 60px; line-height: 60px; text-align: center"&gt;</span><br><span class="line">          &lt;img src="../assets/logo.png" alt="" style="width: 20px; position: relative; top: 5px; right: 5px"&gt;</span><br><span class="line">          &lt;b style="color: white" v-show="logoTextShow"&gt;后台管理系统&lt;/b&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;el-submenu index="1"&gt;</span><br><span class="line">          &lt;template slot="title"&gt;</span><br><span class="line">            &lt;i class="el-icon-message"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot="title"&gt;导航一&lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;el-menu-item-group title="分组2"&gt;</span><br><span class="line">            &lt;el-menu-item index="1-3"&gt;选项3&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-menu-item-group&gt;</span><br><span class="line">          &lt;el-submenu index="1-4"&gt;</span><br><span class="line">            &lt;template slot="title"&gt;选项4&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item index="1-4-1"&gt;选项4-1&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-submenu&gt;</span><br><span class="line">        &lt;el-submenu index="2"&gt;</span><br><span class="line">          &lt;template slot="title"&gt;</span><br><span class="line">            &lt;i class="el-icon-menu"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot="title"&gt;导航二&lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;el-submenu index="2-4"&gt;</span><br><span class="line">            &lt;template slot="title"&gt;选项4&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item index="2-4-1"&gt;选项4-1&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-submenu&gt;</span><br><span class="line">        &lt;el-submenu index="3"&gt;</span><br><span class="line">          &lt;template slot="title"&gt;</span><br><span class="line">            &lt;i class="el-icon-setting"&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span slot="title"&gt;导航三&lt;/span&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;el-submenu index="3-4"&gt;</span><br><span class="line">            &lt;template slot="title"&gt;选项4&lt;/template&gt;</span><br><span class="line">            &lt;el-menu-item index="3-4-1"&gt;选项4-1&lt;/el-menu-item&gt;</span><br><span class="line">          &lt;/el-submenu&gt;</span><br><span class="line">        &lt;/el-submenu&gt;</span><br><span class="line">      &lt;/el-menu&gt;</span><br><span class="line">    &lt;/el-aside&gt;</span><br><span class="line"></span><br><span class="line">    &lt;el-container&gt;</span><br><span class="line">      &lt;el-header style="font-size: 12px; border-bottom: 1px solid #ccc; line-height: 60px; display: flex"&gt;</span><br><span class="line">        &lt;div style="flex: 1; font-size: 20px"&gt;</span><br><span class="line">          &lt;span :class="collapseBtnClass" style="cursor: pointer" @click="collapse"&gt;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;el-dropdown style="width: 70px; cursor: pointer"&gt;</span><br><span class="line">          &lt;span&gt;王小虎&lt;/span&gt;&lt;i class="el-icon-arrow-down" style="margin-left: 5px"&gt;&lt;/i&gt;</span><br><span class="line">          &lt;el-dropdown-menu slot="dropdown"&gt;</span><br><span class="line">            &lt;el-dropdown-item style="font-size: 14px; padding: 5px 0"&gt;个人信息&lt;/el-dropdown-item&gt;</span><br><span class="line">            &lt;el-dropdown-item style="font-size: 14px; padding: 5px 0"&gt;退出&lt;/el-dropdown-item&gt;</span><br><span class="line">          &lt;/el-dropdown-menu&gt;</span><br><span class="line">        &lt;/el-dropdown&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/el-header&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-main&gt;</span><br><span class="line">        &lt;div style="margin-bottom: 30px"&gt;</span><br><span class="line">          &lt;el-breadcrumb separator="/"&gt;</span><br><span class="line">            &lt;el-breadcrumb-item :to="{ path: '/' }"&gt;首页&lt;/el-breadcrumb-item&gt;</span><br><span class="line">            &lt;el-breadcrumb-item&gt;用户管理&lt;/el-breadcrumb-item&gt;</span><br><span class="line">          &lt;/el-breadcrumb&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div style="margin: 10px 0"&gt;</span><br><span class="line">          &lt;el-input style="width: 200px" placeholder="请输入名称" suffix-icon="el-icon-search" v-model="username"&gt;&lt;/el-input&gt;</span><br><span class="line">&lt;!--          &lt;el-input style="width: 200px" placeholder="请输入邮箱" suffix-icon="el-icon-message" class="ml-5"&gt;&lt;/el-input&gt;--&gt;</span><br><span class="line">&lt;!--          &lt;el-input style="width: 200px" placeholder="请输入地址" suffix-icon="el-icon-position" class="ml-5"&gt;&lt;/el-input&gt;--&gt;</span><br><span class="line">          &lt;el-button class="ml-5" type="primary" @click="load"&gt;搜索&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div style="margin: 10px 0"&gt;</span><br><span class="line">          &lt;el-button type="primary"&gt;新增 &lt;i class="el-icon-circle-plus-outline"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button type="danger"&gt;批量删除 &lt;i class="el-icon-remove-outline"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button type="primary"&gt;导入 &lt;i class="el-icon-bottom"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">          &lt;el-button type="primary"&gt;导出 &lt;i class="el-icon-top"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;el-table :data="tableData" border stripe :header-cell-class-name="headerBg"&gt;</span><br><span class="line">          &lt;el-table-column prop="id" label="ID" width="80"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column prop="username" label="用户名" width="140"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column prop="nickname" label="昵称" width="120"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column prop="email" label="邮箱"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column prop="phone" label="电话"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column prop="address" label="地址"&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">          &lt;el-table-column label="操作" width="200" align="center"&gt;</span><br><span class="line">            &lt;template slot-scope="scope"&gt;</span><br><span class="line">              &lt;el-button type="success"&gt;编辑 &lt;i class="el-icon-edit"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">              &lt;el-button type="danger"&gt;删除 &lt;i class="el-icon-remove-outline"&gt;&lt;/i&gt;&lt;/el-button&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">          &lt;/el-table-column&gt;</span><br><span class="line">        &lt;/el-table&gt;</span><br><span class="line">        &lt;div style="padding: 10px 0"&gt;</span><br><span class="line">          &lt;el-pagination</span><br><span class="line">              @size-change="handleSizeChange"</span><br><span class="line">              @current-change="handleCurrentChange"</span><br><span class="line">              :current-page="pageNum"</span><br><span class="line">              :page-sizes="[2, 5, 10, 20]"</span><br><span class="line">              :page-size="pageSize"</span><br><span class="line">              layout="total, sizes, prev, pager, next, jumper"</span><br><span class="line">              :total="total"&gt;</span><br><span class="line">          &lt;/el-pagination&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/el-main&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/el-container&gt;</span><br><span class="line">  &lt;/el-container&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// @ is an alias to /src</span><br><span class="line">import HelloWorld from '@/components/HelloWorld.vue'</span><br><span class="line"></span><br><span class="line">export default {</span><br><span class="line">  name: 'Home',</span><br><span class="line">  data() {</span><br><span class="line">    return {</span><br><span class="line">      tableData: [],</span><br><span class="line">      username: "",</span><br><span class="line">      total: 0,</span><br><span class="line">      pageNum: 1,</span><br><span class="line">      pageSize: 2,</span><br><span class="line">      msg: "hello sliu",</span><br><span class="line">      collapseBtnClass: 'el-icon-s-fold',</span><br><span class="line">      isCollapse: false,</span><br><span class="line">      sideWidth: 200,</span><br><span class="line">      logoTextShow: true,</span><br><span class="line">      headerBg: 'headerBg'</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">  created() {</span><br><span class="line">    //请求分页查询数据</span><br><span class="line">    fetch( "http://localhost:9090/user/page?pageNum="+this.pageNum+"&amp;pageSize="+this.pageSize+"&amp;username="+this.username)</span><br><span class="line">        .then(res =&gt; res.json()).then(res =&gt; {</span><br><span class="line">      console.log(res)</span><br><span class="line">      this.tableData=res.data</span><br><span class="line">      this.total=res.total</span><br><span class="line">    })</span><br><span class="line">  },</span><br><span class="line">  methods: {</span><br><span class="line">    collapse() {  // 点击收缩按钮触发</span><br><span class="line">      this.isCollapse = !this.isCollapse</span><br><span class="line">      if (this.isCollapse) {  // 收缩</span><br><span class="line">        this.sideWidth = 64</span><br><span class="line">        this.collapseBtnClass = 'el-icon-s-unfold'</span><br><span class="line">        this.logoTextShow = false</span><br><span class="line">      } else {   // 展开</span><br><span class="line">        this.sideWidth = 200</span><br><span class="line">        this.collapseBtnClass = 'el-icon-s-fold'</span><br><span class="line">        this.logoTextShow = true</span><br><span class="line">      }</span><br><span class="line">    },</span><br><span class="line">    load(){</span><br><span class="line">      fetch( "http://localhost:9090/user/page?pageNum="+this.pageNum+"&amp;pageSize="+this.pageSize+"&amp;username="+this.username)</span><br><span class="line">          .then(res =&gt; res.json()).then(res =&gt; {</span><br><span class="line">        console.log(res)</span><br><span class="line">        this.tableData=res.data</span><br><span class="line">        this.total=res.total</span><br><span class="line">      })</span><br><span class="line">    },</span><br><span class="line">    handleSizeChange(pageSize){</span><br><span class="line">      console.log(pageSize)</span><br><span class="line">      this.pageSize = pageSize</span><br><span class="line">      this.load()</span><br><span class="line">    },</span><br><span class="line">    handleCurrentChange(pageNum){</span><br><span class="line">      console.log(pageNum)</span><br><span class="line">      this.pageNum = pageNum</span><br><span class="line">      this.load()</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.headerBg {</span><br><span class="line">  background: #eee !important;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>访问localhost:8080</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220531210659.png" alt=""></p>
<h1 id="SpringBoot集成Mybatis-plus"><a href="#SpringBoot集成Mybatis-plus" class="headerlink" title="SpringBoot集成Mybatis-plus"></a>SpringBoot集成Mybatis-plus</h1><p>利用<a href="https://baomidou.com/">Mybatis-plus</a>实现分页查询</p>
<p>pom.xml下导入Mybatis-plus依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>application.yaml下修改Mybatis-plus日志打印方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/sliu?serverTimezone=GMT%2b8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment">#  configuration:</span></span><br><span class="line"><span class="comment">#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>
<p>config文件夹下新建MybatisPlusConfig用于接管mapper注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan("com.sliu.springboot.mapper")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>删除UserMapper上@mapper注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询User表中所有数据</span></span><br><span class="line">    <span class="meta">@Select("SELECT * from user")</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入一条数据</span></span><br><span class="line">    <span class="meta">@Insert("Insert into user(username, password, nickname, email, phone, address) " +</span></span><br><span class="line"><span class="meta">            "VALUES(#{username}, #{password}, #{nickname}, #{email}, #{phone}, #{address})")</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新数据</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除数据</span></span><br><span class="line">    <span class="meta">@Delete("delete from user where id=#{id}")</span></span><br><span class="line">    Integer <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@Param("id")</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="meta">@Select("SELECT * from user where username like concat('%', #{username}, '%') limit #{pageNum}, #{pageSize}")</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">printUserByPage</span><span class="params">(Integer pageNum, Integer pageSize, String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据库中总数据条数</span></span><br><span class="line">    <span class="meta">@Select("SELECT count(*) from user where username like concat('%', #{username}, '%')")</span></span><br><span class="line">    Integer <span class="title function_">selectTotal</span><span class="params">(String username)</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>rebuild项目,postman下进行test</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220610213639.png" alt=""></p>
<p>使用mybatis_plus简化数据库crud</p>
<p>修改UserMapper继承BaseMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询User表中所有数据</span></span><br><span class="line">    <span class="meta">@Select("SELECT * from user")</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入一条数据</span></span><br><span class="line">    <span class="meta">@Insert("Insert into user(username, password, nickname, email, phone, address) " +</span></span><br><span class="line"><span class="meta">            "VALUES(#{username}, #{password}, #{nickname}, #{email}, #{phone}, #{address})")</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新数据</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除数据</span></span><br><span class="line">    <span class="meta">@Delete("delete from user where id=#{id}")</span></span><br><span class="line">    Integer <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@Param("id")</span> Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="meta">@Select("SELECT * from user where username like concat('%', #{username}, '%') limit #{pageNum}, #{pageSize}")</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">printUserByPage</span><span class="params">(Integer pageNum, Integer pageSize, String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取数据库中总数据条数</span></span><br><span class="line">    <span class="meta">@Select("SELECT count(*) from user where username like concat('%', #{username}, '%')")</span></span><br><span class="line">    Integer <span class="title function_">selectTotal</span><span class="params">(String username)</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>修改UserService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.service</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 16:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">saveUser</span><span class="params">(User user)</span>{</span><br><span class="line">        <span class="keyword">return</span> saveOrUpdate(user);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    UserMapper userMapper;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    public int save(User user){</span></span><br><span class="line"><span class="comment">//        //传入user无id，表示为新增</span></span><br><span class="line"><span class="comment">//        if(user.getId() == null){</span></span><br><span class="line"><span class="comment">//            return userMapper.insertUser(user);</span></span><br><span class="line"><span class="comment">//        }else {//否则更新</span></span><br><span class="line"><span class="comment">//            return userMapper.updateUser(user);</span></span><br><span class="line"><span class="comment">//        }</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>修改User类指定表名和列名，同时在数据库user表中新增一个字段avatar_url用于测试指定数据库列名</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220610213659.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.crypto.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.entity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:User</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@lombok</span>.Data</span><br><span class="line"><span class="meta">@TableName(value = "user")</span><span class="comment">//指定数据库表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> {</span><br><span class="line">    <span class="comment">//指定数据库主键</span></span><br><span class="line">    <span class="meta">@TableId(value = "id")</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Data createTime;</span><br><span class="line">    <span class="meta">@TableField(value = "avatar_url")</span><span class="comment">//指定数据库列名</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>rebuild项目，postman下进行测试</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220610213715.png" alt=""></p>
<h1 id="SpringBoot集成SwaggerUI"><a href="#SpringBoot集成SwaggerUI" class="headerlink" title="SpringBoot集成SwaggerUI"></a>SpringBoot集成SwaggerUI</h1><p>通过postman进行数据请求的测试比较麻烦，整合Swagger简化测试流程</p>
<p>pom.xml下导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入Swagger3依赖 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>config文件夹下新建swaggerConfig配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.oas.annotations.EnableOpenApi;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.config</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:SwaggerConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/6/10 21:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableOpenApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.OAS_30)</span><br><span class="line">                .apiInfo(apiInfo()).enable(<span class="literal">true</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//apis： 添加swagger接口提取范围</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.sliu.springboot.controller"</span>))</span><br><span class="line">                <span class="comment">//.apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">"sliu的项目接口文档"</span>)</span><br><span class="line">                .description(<span class="string">"项目接口测试"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">"sliu"</span>, <span class="string">"https://shunliu.xyz"</span>, <span class="string">"shunliu@csu.edu.cn"</span>))</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>rebuild项目，访问localhost:9090/swagger-ui/index.html</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220610213734.png" alt=""></p>
<p>继续改造UserMapper中数据操作，全部替换为mybatis-plus实现</p>
<p>修改UserMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.mapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; {</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    //查询User表中所有数据</span></span><br><span class="line"><span class="comment">//    @Select("SELECT * from user")</span></span><br><span class="line"><span class="comment">//    List&lt;User&gt; findAllUser();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    //插入一条数据</span></span><br><span class="line"><span class="comment">//    @Insert("Insert into user(username, password, nickname, email, phone, address) " +</span></span><br><span class="line"><span class="comment">//            "VALUES(#{username}, #{password}, #{nickname}, #{email}, #{phone}, #{address})")</span></span><br><span class="line"><span class="comment">//    int insertUser(User user);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    //更新数据</span></span><br><span class="line"><span class="comment">//    int updateUser(User user);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    //删除数据</span></span><br><span class="line"><span class="comment">//    @Delete("delete from user where id=#{id}")</span></span><br><span class="line"><span class="comment">//    Integer deleteUserById(@Param("id") Integer id);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    //分页查询</span></span><br><span class="line"><span class="comment">//    @Select("SELECT * from user where username like concat('%', #{username}, '%') limit #{pageNum}, #{pageSize}")</span></span><br><span class="line"><span class="comment">//    List&lt;User&gt; printUserByPage(Integer pageNum, Integer pageSize, String username);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    //获取数据库中总数据条数</span></span><br><span class="line"><span class="comment">//    @Select("SELECT count(*) from user where username like concat('%', #{username}, '%')")</span></span><br><span class="line"><span class="comment">//    Integer selectTotal(String username);</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>修改UserController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sliu.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.sliu.springboot.service.UserService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.util.Strings;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@PackageName</span>:com.sliu.springboot.controller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>:UserController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:sliu</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022/5/29 15:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@Api(tags="用户管理")</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/user")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> {</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    UserMapper userMapper;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增和修改User</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>{</span><br><span class="line">        <span class="keyword">return</span> userService.saveUser(user);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询全部User</span></span><br><span class="line"><span class="comment">//    @ApiOperation("用户列表")</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">printAllUser</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> userService.list();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//依据id删除User</span></span><br><span class="line">    <span class="meta">@DeleteMapping("/{id}")</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteUserById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>{</span><br><span class="line">        <span class="keyword">return</span> userService.removeById(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询打印所有user信息，pageNum为页码数，pageSize为每页展示数据</span></span><br><span class="line"><span class="comment">//    @GetMapping("/page")</span></span><br><span class="line"><span class="comment">//    public Map&lt;String, Object&gt; printUserByPage(@RequestParam Integer pageNum, @RequestParam Integer pageSize,</span></span><br><span class="line"><span class="comment">//                                               @RequestParam String username){</span></span><br><span class="line"><span class="comment">//        pageNum = (pageNum - 1) * pageSize;</span></span><br><span class="line"><span class="comment">//        List&lt;User&gt; data = userMapper.printUserByPage(pageNum, pageSize, username);</span></span><br><span class="line"><span class="comment">//        Integer totalUserNum = userMapper.selectTotal(username);</span></span><br><span class="line"><span class="comment">//        Map&lt;String, Object&gt; res = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        res.put("data", data);</span></span><br><span class="line"><span class="comment">//        res.put("total", totalUserNum);</span></span><br><span class="line"><span class="comment">//        return res;</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">    <span class="comment">//mybatis-plus实现分页查询</span></span><br><span class="line">    <span class="meta">@GetMapping("/page")</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;User&gt; <span class="title function_">printUserByPage</span><span class="params">(<span class="meta">@RequestParam</span> Integer pageNum, <span class="meta">@RequestParam</span> Integer pageSize,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@RequestParam(defaultValue = "")</span> String username,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@RequestParam(defaultValue = "")</span> String nickname,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@RequestParam(defaultValue = "")</span> String address)</span>{</span><br><span class="line">        IPage&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum, pageSize);</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.like(!Strings.isEmpty(username),<span class="string">"username"</span>, username);</span><br><span class="line">        queryWrapper.like(!Strings.isEmpty(nickname),<span class="string">"nickname"</span>, nickname);</span><br><span class="line">        queryWrapper.like(!Strings.isEmpty(address),<span class="string">"address"</span>, address);</span><br><span class="line">        <span class="keyword">return</span> userService.page(page, queryWrapper);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>rebuild项目，swagger下进行test</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/20220610221140.png" alt=""></p>
<p>Coming soon……</p>
<p><img src="https://cdn.jsdelivr.net/gh/ls19970727/CDN2/image/06540a40-f0e1-11eb-bc26-0eb5f5ffa3da (1" alt="">.gif)</p>
]]></content>
      <categories>
        <category>项目实战</category>
      </categories>
      <tags>
        <tag>后台</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>利用猫抓下载网页上的视频</title>
    <url>/posts/b9d22aba.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        直奔主题上教程啦。首先我们需要准备以下工具:Chrome浏览器+猫抓拓展包（关注程序员评测室公众号回复猫抓拓展包）。接下来就可以开始你的视频抓取之路啦！</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-打开chrome的开发者模式"><a href="#1-打开chrome的开发者模式" class="headerlink" title="1 打开chrome的开发者模式"></a>1 打开chrome的开发者模式</h2><p>打开Chrome 浏览器，按图示顺序依次点击更多→更多工具→拓展程序</p>


<p>​        打开后就是如下页面，查看右上角开发者模式是否处于打开状态（关闭模式下点击一下开启）。</p>

<h2 id="2-安装拓展包"><a href="#2-安装拓展包" class="headerlink" title="2 安装拓展包"></a>2 安装拓展包</h2><p>​        将后缀名为crx的拓展包拖入图示区域。</p>

<p>​        拖动到指定区域后出现以下内容，点击添加拓展程序。</p>

<p>好啦！恭喜你已经完成了拓展程序的安装，我们可以看到浏览器右上方已经出现了猫抓的图标。</p>

<h2 id="3-开始下载视频"><a href="#3-开始下载视频" class="headerlink" title="3 开始下载视频"></a>3 开始下载视频</h2><p>​        打开某个包含视频内容的网站，我们可以看到猫抓小图标上出现了一些数字，这个数字表示当前页面存在可下载的视频数量。点击猫抓图标就可以下载对应的内容啦！</p>

<p>​        下载完成后记得将下载的文件后缀名修改为.mp4</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>​        使用该方法有点复杂，不过你学会了拓展程序的安装就如同打开了一扇新世界的大门啊！通过安装实用的浏览器拓展程序将会让你的日常使用更加得心应手。</p>
<p>推荐下某乎大神给的<a href="https://www.zhihu.com/question/19594682/answer/693396771?hb_wx_block=1">拓展程序</a>。</p>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>电脑</tag>
        <tag>网页</tag>
        <tag>视频</tag>
      </tags>
  </entry>
  <entry>
    <title>网易云歌单导入AppleMusic</title>
    <url>/posts/3bb2dd71.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Apple Music作为ios内的一款音乐APP，学生认证后五元一月的价格实属良心，当然比起国内大量的音乐软件，收录的华人音乐内容偏少，优质的段子手评论也很少。但是优势却也很明显，普通音质的音乐比起其他软件的无损音乐要更加高（简直是无损中的无损啊）。所以如果你追求极致的音质体验，又偏爱欧美音乐时，Apple Music确实是性价比最高的选择了。</p>
<p>但是，在小编从网易云音乐转用Apple Music时却发现这是一件极其痛苦的事情，一方面沉醉于Apple Music使用的简洁风格的流畅用户体验以及夸张的音质。一方面又难以割舍网易云音乐中一颗一颗小红星攒出来只属于我自己的歌单（泪奔）。难道我要从网易云的歌单中一首接一首的去Apple Music中搜索id然后添加到音乐库中去吗，看着我那500+音乐的歌单陷入了沉思….</p>
<p>事实上，我们可以利用ios上默认安装的一款app，快捷指令（原捷径）一键导入歌单。具体步骤如下：</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-下载“网易云→Apple-Music”快捷指令"><a href="#1-下载“网易云→Apple-Music”快捷指令" class="headerlink" title="1. 下载“网易云→Apple Music”快捷指令"></a>1. 下载“网易云→Apple Music”快捷指令</h2><p>关注公众号：“程序员评测室”后台回复“导入歌单”可以获取下载链接（由于要调用到快捷指令，请在safari中打开该链接）</p>

<p>点击上图下方获取捷径。</p>

<p>出现上图所示内容，下拉到底部。</p>

<p>点击添加不受信任的快捷指令（注意：该快捷指令并无恶意内容，由于是非苹果官方捷径库的第三方捷径，所以会有该提示，请放心使用），到这里我们就成功将该捷径添加进了捷径中心。</p>
<h2 id="2-复制网易云歌单中的歌单链接"><a href="#2-复制网易云歌单中的歌单链接" class="headerlink" title="2. 复制网易云歌单中的歌单链接"></a>2. 复制网易云歌单中的歌单链接</h2><p> 具体操作：首先点开你想复制的歌单，然后点击分享，最后点击复制链接。</p>

<h2 id="3-利用捷径开始复制这个歌单吧！"><a href="#3-利用捷径开始复制这个歌单吧！" class="headerlink" title="3. 利用捷径开始复制这个歌单吧！"></a>3. 利用捷径开始复制这个歌单吧！</h2><p>退出网易云，进入捷径中心，点击我们在步骤一中成功添加的捷径并授予系统提示的相关权限。接下来在一段时间的等待过后就可以在Apple Music中看到我们成功复制的歌单啦！（注意，等待时间的长短取决于你歌单中音乐数量的多少，我亲测复制300+音乐用时半小时），在等待过程中不要把捷径中心挂在后台，会出现提前结束捷径的情况。</p>

<p>下面就是我自己成功复制的歌单啦！</p>

<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>好啦，到这里就结束啦，快去将你心爱的网易云歌单导入Apple Music吧！</p>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>手机</tag>
        <tag>ios</tag>
        <tag>音乐</tag>
      </tags>
  </entry>
</search>
